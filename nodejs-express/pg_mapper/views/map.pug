extends layout
block content

    #map
    script.
        //Array that will save all the layers
        var layerArray = [];
        
        
        
        var map = L.map('map',{preferCanvas: true, center: [39.96964,116.33251], zoom: 12});
        
        //create array with all layers?

        var markerGroup = L.layerGroup().addTo(map);

        var lensesLayer = L.geoJSON().addTo(map);



        L.tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/toner-lite/{z}/{x}/{y}{r}.{ext}', {
            attribution: 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
            subdomains: 'abcd',
            minZoom: 2,
            maxZoom: 25,
            ext: 'png'
        }).addTo(map);

        var timeB4draw = Math.floor( new Date().getTime()/1000);
        //var myData = jsonData;
        var myData = !{JSON.stringify(jsonData)};
        var timeAdraw1 = Math.floor( new Date().getTime()/1000);
        console.log(timeAdraw1-timeB4draw);
        // Create variable to hold map element, give initial settings to map
       
       

        

        var color;
        var r = Math.floor(Math.random() * 255);
        var g = Math.floor(Math.random() * 255);
        var b = Math.floor(Math.random() * 255);
        color= "rgb("+r+" ,"+g+","+ b+")"; 
        var defaultLayer = L.geoJSON().addTo(map);
        var firstStyle = {
            "color": color,
            "weight": 1,
            "opacity": 0.4
        };
        


        /*var lineCoordinate = [];
        for(var i in jsonData.features){
            console.log("cheguei aqui tambem");
            if (i+1 == jsonData.features.Length){
                break
            }
            var pointJson1 = jsonData.features[i];
            var pointJson2 = jsonData.features[i+1];
            console.log(myData.features[i]);
            var coord1 = pointJson1.coordinates;
            var coord2 = pointJson2.coordinates;
            //L.marker([coord[1],coord[0]]).addTo(map);
            lineCoordinate.push([[coord1[0],coord1[1]],[coord2[0],coord2[1]]]);
            console.log(lineCoordinate);
            
        }*/
        // Add JSON to map
        
        L.geoJson(myData,firstStyle).addTo(defaultLayer);
        
        
        
        /*L.glify.lines({
            map: map,
            latitudeKey: 1,
            longitudeKey: 0,
            data: myData
            });*/
            
        var timeAdraw2 = Math.floor( new Date().getTime()/1000);
        console.log(timeAdraw2-timeB4draw);


      
        map.on('click', function(e) { 
            var location= e.latlng;
            
            console.log(location.lat);

            // Create URL

            var urlString = "query/" + location.lng + "/" + location.lat;
            
            var color2;
            var r = Math.floor(Math.random() * 255);
            var g = Math.floor(Math.random() * 255);
            var b = Math.floor(Math.random() * 255);
            color2= "rgb("+r+" ,"+g+","+ b+")"; 

            

            var individualStyle = {
                "color": color2,
                "weight": 1,
                "opacity": 0.7
            };
            
            var newData = $.ajax({
                url: urlString,
                type: 'GET',
                dataType:'json',
                success: console.log("Data successfully loaded!"),
                error: function (xhr) {
                    alert(xhr.statusText)
                }
                
            }) 
            $.when(newData).done(function() {
                
                console.log("Im removing the map now and adding new ones afterwards")
                map.removeLayer(defaultLayer);
                var tracksToDraw = L.geoJson(newData.responseJSON,individualStyle);
                tracksToDraw.addTo(markerGroup);
                var idTracks = tracksToDraw._leaflet_id;
                var lens = { id : idTracks, areaQuery : L.circle([location.lat, location.lng], {
                    color: 'red',
                    fillColor: '#f03',
                    fillOpacity: 0.1,
                    radius: 500
                }).addTo(lensesLayer)
              };
              lens.areaQuery.bindPopup("<input type='button' value='Delete this lens' class='marker-delete-button'/>")
              lens.areaQuery.on("popupopen", function() {
                var tempMarker = lens;

                //var tempMarkerGeoJSON = this.toGeoJSON();

                //var lID = tempMarker._leaflet_id; // Getting Leaflet ID of this marker

                // To remove marker on click of delete
                $('.marker-delete-button:visible').click(function () {
                    console.log("Yoo Im inside the button s click function now")
                    lensesLayer.removeLayer(tempMarker.areaQuery);
                    markerGroup.removeLayer(tempMarker.id);
                    });
                  
                }) ; 
                lensesLayer.bringToFront();
            });  
            
            
        });




