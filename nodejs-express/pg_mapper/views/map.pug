extends layout
block content

    #map
    script.
        //Array that will save all the layers
        var layerArray = [];
        
        
        
        var map = L.map('map',{preferCanvas: true, center: [39.96964,116.33251], zoom: 10});
        
        var popup = L.popup();
        var popup2 = L.popup();

        var minValueVel;
        var maxValueVel;
        var minValueLength;
        var maxValueLength;
        var minValueTime;
        var maxValueTime;
        var minValueTimeDuration;
        var maxValueTimeDuration;

        //create array with all layers?

        var markerGroup  = L.layerGroup().addTo(map);
        var markerGroup1 = L.layerGroup();
        var markerGroup2 = L.layerGroup();
        var markerGroup3 = L.layerGroup();

        var lensesLayer = L.geoJSON().addTo(map);

        var lensPreCreationLayer = L.layerGroup().addTo(map);
        
        var lastMarkerGroupID = null ;
        var lastMarkerGroupID1 = null ;
        var lastMarkerGroupID2 = null ;
        var lastMarkerGroupID3 = null ;

        var createQueryLensesFlag = false;

        //black and white, when it is a greyish color its hard to see
        /*L.tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/toner-lite/{z}/{x}/{y}{r}.{ext}', {
            attribution: 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
            subdomains: 'abcd',
            minZoom: 2,
            maxZoom: 25,
            ext: 'png'
        }).addTo(map);*/

        //Terrain is coloured, colors sometimes hard to see
       /* L.tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}{r}.{ext}', {
            attribution: 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
            subdomains: 'abcd',
            minZoom: 0,
            maxZoom: 18,
            ext: 'png'
        }).addTo(map);*/

        //ALL black and dark grey
        L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_nolabels/{z}/{x}/{y}{r}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',
            subdomains: 'abcd',
            maxZoom: 19
        }).addTo(map);

        //var myData = jsonData;
        var myData = !{JSON.stringify(jsonData)};

        // Create variable to hold map element, give initial settings to map
        var customControl =  L.Control.extend({

        options: {
            position: 'topleft'
        },

        onAdd: function (map) {
            var container = L.DomUtil.create('div', 'leaflet-bar leaflet-control leaflet-control-custom');

            container.style.backgroundColor = 'white';     
            container.style.backgroundImage = "url(images/636051.svg)";
            container.style.backgroundSize = "30px 30px";
            container.style.width = '30px';
            container.style.height = '30px';

            container.onclick = function(e){
                L.DomEvent.stopPropagation(e); 
                createQueryLensesFlag = !createQueryLensesFlag;
                if (createQueryLensesFlag){
                    container.style.backgroundColor = 'grey';
                }
                else{
                    container.style.backgroundColor = 'white';   
                }
            }

            return container;
        }
        });

        map.addControl(new customControl());
            

                

        
        var defaultLayer = L.geoJSON().addTo(map);
        var firstStyle = {
            "color": 'tomato',
            "weight": 2,
            "opacity": 0.5
        };
        /*var color2;
            var r = Math.min(Math.max(Math.floor(Math.random() * 255), 55), 200);
            var g = Math.min(Math.max(Math.floor(Math.random() * 255), 75), 255);
            var b = Math.min(Math.max(Math.floor(Math.random() * 255), 100), 225);
            color2= "rgb("+r+" ,"+g+","+ b+")"; 

            

            var individualStyle = {
                "color": color2,
                "weight": 2,
                "opacity": 0.5
            };*/

     
        // Add JSON to map
        
        L.geoJson(myData,firstStyle).addTo(defaultLayer);
    
        map.on('zoomend', function() {
            console.log(map.getZoom())
            if (map.getZoom() >= 18){
                    map.addLayer(markerGroup3);
            }
            else {
                if (map.hasLayer(markerGroup3)) {
                    map.removeLayer(markerGroup3);
                } else {
                    console.log("MarkerGroup3 not active");
                }
                if (map.getZoom() >= 15){
                    map.addLayer(markerGroup2);
                }
                else {
                    if (map.hasLayer(markerGroup2)) {
                        map.removeLayer(markerGroup2);
                    } else {
                        console.log("MarkerGroup2 not active");
                    }
                    if (map.getZoom() >= 12){
                        map.addLayer(markerGroup1);
                    }
                    else {
                        if (map.hasLayer(markerGroup1)) {
                            map.removeLayer(markerGroup1);
                        } else {
                            console.log("MarkerGroup1 not active");
                        }
                
                    }
                }
            }
            lensesLayer.bringToFront();
        });   
            

        function onMapClick(e) {// + "<input id='radiusBox' type='text' size='20'/>"
                if(createQueryLensesFlag){   
                    lensPreCreationLayer.clearLayers();
                    var previewCircle = L.circle(e.latlng, {
                            color: 'red',
                            fillColor: '#f03',
                            fillOpacity: 0.5,
                            radius: 5000
                        });
                    previewCircle.addTo(lensPreCreationLayer);
                    popup
                        .setLatLng(e.latlng)
                        .setContent("You clicked the map at " + e.latlng.toString() + "<input id='radiusBox' type='range' min='1' max='10000' val='5000' />" + 
                        "<input type='text' id='amountVel' readonly style=' border:0; color:#f6f31f1; font-weight:bold;'>" + 
                        "<div id='maxMinBoundsVel'></div>" + 
                        "<input type='text' id='amountLength' readonly style='width:250px; border:0; color:#669911; font-weight:bold;'>" + 
                        "<div id='maxMinBoundsLength'></div>" +
                        "<input type='text' id='amountTimeInterval' readonly style='width:310px; border:0; color:#f6931f; font-weight:bold;'>" + 
                        "<div id='maxMinBoundsTimeInterval'></div>" + 
                        "<input type='text' id='amountTimeDuration' readonly style='width:310px; border:0; color:#23339f; font-weight:bold;'>" + 
                        "<div id='maxMinBoundsTimeDuration'></div>" + 
                        "<input type='button' value='Create Pass by Lens' class='marker-create-button'/>" + 
                        "<input type='button' value='Create Start point Lens' class='marker-create-Start-button'/>" + 
                        "<input type='button' value='Create End point Lens' class='marker-create-End-button'/>" + 
                        "<input type='button' value='Create average Velocity Lens' class='marker-create-VelocityAVG-button'/>" + 
                        "<input type='button' value='Create Length Lens' class='marker-create-length-button'/>" + 
                        "<input type='button' value='Create Time Interval Lens' class='marker-create-timeInterval-button'/>" +
                        "<input type='button' value='Create Time Duration Lens' class='marker-create-timeDuration-button'/>").openOn(map);
                    map.on('popupclose', function(e) {
                            lensPreCreationLayer.clearLayers();
                        })
                    var location= e.latlng;
                    $('.marker-create-button').click(function () {
                        console.log ($('#radiusBox').val() );
                        if ($('#radiusBox').val() == "" || $('#radiusBox').val() <= 0 || $('#radiusBox').val() > 10000) {
                            popup2
                                .setLatLng(e.latlng)
                                .setContent("Fill with a value of 1 until 10000" )
                                .openOn(map);
                        }
                        else {
                            createQuery(location.lng, location.lat, $('#radiusBox').val(),"Default",0,0);
                        }
                    });
                    $('.marker-create-Start-button').click(function () {
                        console.log ($('#radiusBox').val() );
                        if ($('#radiusBox').val() == "" || $('#radiusBox').val() <= 0 || $('#radiusBox').val() > 10000) {
                            popup2
                                .setLatLng(e.latlng)
                                .setContent("Fill with a value of 1 until 10000" )
                                .openOn(map);
                        }
                        else {
                            createQuery(location.lng, location.lat, $('#radiusBox').val(),"Start",0,0);
                        }
                    });
                    $('.marker-create-End-button').click(function () {
                        console.log ($('#radiusBox').val() );
                        if ($('#radiusBox').val() == "" || $('#radiusBox').val() <= 0 || $('#radiusBox').val() > 10000) {
                            popup2
                                .setLatLng(e.latlng)
                                .setContent("Fill with a value of 1 until 10000" )
                                .openOn(map);
                        }
                        else {
                            createQuery(location.lng, location.lat, $('#radiusBox').val(),"End",0,0);
                        }
                    });
                    $('.marker-create-VelocityAVG-button').click(function () {
                        console.log ($('#radiusBox').val() );
                        if ($('#radiusBox').val() == "" || $('#radiusBox').val() <= 0 || $('#radiusBox').val() > 10000) {
                            popup2
                                .setLatLng(e.latlng)
                                .setContent("Fill with a value of 1 until 10000" )
                                .openOn(map);
                        }
                        else {
                            createQuery(location.lng, location.lat, $('#radiusBox').val(),"Vel_avg",minValueVel,maxValueVel);
                        }
                    });
                    $('.marker-create-length-button').click(function () {
                        console.log ($('#radiusBox').val() );
                        if ($('#radiusBox').val() == "" || $('#radiusBox').val() <= 0 || $('#radiusBox').val() > 10000) {
                            popup2
                                .setLatLng(e.latlng)
                                .setContent("Fill with a value of 1 until 10000" )
                                .openOn(map);
                        }
                        else {
                            createQuery(location.lng, location.lat, $('#radiusBox').val(),"Length",minValueLength,maxValueLength);
                        }
                    });
                    $('.marker-create-timeInterval-button').click(function () {
                        console.log ($('#radiusBox').val() );
                        if ($('#radiusBox').val() == "" || $('#radiusBox').val() <= 0 || $('#radiusBox').val() > 10000) {
                            popup2
                                .setLatLng(e.latlng)
                                .setContent("Fill with a value of 1 until 10000" )
                                .openOn(map);
                        }
                        else {
                            createQuery(location.lng, location.lat, $('#radiusBox').val(),"Time_Interval",minValueTime,maxValueTime);
                        }
                    });
                    $('.marker-create-timeDuration-button').click(function () {
                        console.log ($('#radiusBox').val() );
                        if ($('#radiusBox').val() == "" || $('#radiusBox').val() <= 0 || $('#radiusBox').val() > 10000) {
                            popup2
                                .setLatLng(e.latlng)
                                .setContent("Fill with a value of 1 until 10000" )
                                .openOn(map);
                        }
                        else {
                            createQuery(location.lng, location.lat, $('#radiusBox').val(),"Time_Duration",minValueTimeDuration,maxValueTimeDuration);
                        }
                    });
                    
                    $( function() {
                        $( "#radiusValue" ).slider({
                        range: true,
                        min: 0,
                        max: 500,
                        values: [ 0, 500 ],
                        slide: function( event, ui ) {
                            minValueVel =ui.values[ 0 ];
                            maxValueVel =ui.values[ 1 ];
                            $( "#amountVel" ).val( "Km/h " + ui.values[ 0 ] + " - Km/h " + ui.values[ 1 ] );
                        }
                        });
                        $( "#amountVel" ).val( "Km/h" + $( "#slider-range" ).slider( "values", 0 ) +
                        " - Km/h" + $( "#slider-range" ).slider( "values", 1 ) );
                    } );

                    $( function() {
                        $( "#maxMinBoundsVel" ).slider({
                        range: true,
                        min: 0,
                        max: 500,
                        values: [ 0, 500 ],
                        slide: function( event, ui ) {
                            minValueVel =ui.values[ 0 ];
                            maxValueVel =ui.values[ 1 ];
                            $( "#amountVel" ).val( "Km/h " + ui.values[ 0 ] + " - Km/h " + ui.values[ 1 ] );
                        }
                        });
                        $( "#amountVel" ).val( "Km/h" + $( "#slider-range" ).slider( "values", 0 ) +
                        " - Km/h" + $( "#slider-range" ).slider( "values", 1 ) );
                    } );

                    $( function() {
                        $( "#maxMinBoundsLength" ).slider({
                        range: true,
                        min: 1,
                        max: 500000,
                        values: [ 1, 300000 ],
                        slide: function( event, ui ) {
                            minValueLength =ui.values[ 0 ];
                            maxValueLength =ui.values[ 1 ];
                            $( "#amountLength" ).val( "Meters" + ui.values[ 0 ] + " - Meters" + ui.values[ 1 ] );
                        }
                        });
                        $( "#amountLength" ).val( "Meters " + $( "#slider-range" ).slider( "values", 0 ) +
                        " - Meters " + $( "#slider-range" ).slider( "values", 1 ) );
                    } );

                    function Unix_timestamp(t){
                        var dt = new Date(t);
                        var stringDate = dt.toUTCString();
                        /*var year = dt.getFullYear();
                        var month = dt.getMonth();
                        var day = dt.getDay();
                        var hour = dt.getHours();
                        var minute = dt.getMinutes();
                        var seconds = dt.getSeconds();*/

                        return stringDate;
                    }

                    

                    $( function() {
                        $( "#maxMinBoundsTimeInterval" ).slider({
                        range: true,
                        min: 1201959044 , // 2008-02-02 13:30:44
                        max: 1202492358 , // 2008-02-08 17:39:18
                        values: [ 1201959044 , 1202492358  ],
                        slide: function( event, ui ) {
                            minValueTime =ui.values[ 0 ];
                            maxValueTime =ui.values[ 1 ];
                            $( "#amountTimeInterval" ).val(Unix_timestamp(minValueTime * 1000) + " - " + Unix_timestamp(maxValueTime * 1000) );
                        }
                        });
                        $( "#amountTimeInterval" ).val($( "#slider-range" ).slider( "values", 0 ) +
                        " - " + $( "#slider-range" ).slider( "values", 1 ) );
                    } );

                    $( function() {
                        $( "#maxMinBoundsTimeDuration" ).slider({
                        range: true,
                        min: 0, // 2008-02-02 13:30:44
                        max: 85839, // 2008-02-08 17:39:18
                        values: [ 0, 85839 ],
                        slide: function( event, ui ) {
                            minValueTimeDuration =ui.values[ 0 ];
                            maxValueTimeDuration =ui.values[ 1 ];
                            $( "#amountTimeDuration" ).val(minValueTimeDuration + " - " + maxValueTimeDuration);
                        }
                        });
                        $( "#amountTimeDuration" ).val( "Min duration " + $( "#slider-range" ).slider( "values", 0 ) +
                        " - Max time " + $( "#slider-range" ).slider( "values", 1 ) );
                    } );

                    $('#radiusBox').on('input',function(){
                        var myVar = $(this).val();
                        previewCircle.setRadius( myVar);
                        
                    });
            }
        }

        map.on('click', onMapClick);

       

        function createQuery(lng, lat, radiusQuery, typeLens, minVal, maxVal){
            lensPreCreationLayer.clearLayers();
            console.log("Im removing the map now and adding new ones afterwards")
            map.removeLayer(defaultLayer);

            if(lastMarkerGroupID !=null){
                markerGroup.removeLayer(lastMarkerGroupID);
                lastMarkerGroupID = null;
            }
            if(lastMarkerGroupID1 !=null){
                markerGroup1.removeLayer(lastMarkerGroupID1);
                lastMarkerGroupID1 = null;
            }
            if(lastMarkerGroupID2 !=null){
                markerGroup2.removeLayer(lastMarkerGroupID2);
                lastMarkerGroupID2 = null;
            }
            if(lastMarkerGroupID3 !=null){
                markerGroup3.removeLayer(lastMarkerGroupID3);
                lastMarkerGroupID3 = null;
            }

                // Create URL
            var urlString3 = "query/trajectory_lines/"  + lng + "/" + lat + "/" + radiusQuery + "/" + typeLens + "/" + minVal + "/" + maxVal;
            var urlString2 = "query/trajectory_lines1/" + lng + "/" + lat + "/" + radiusQuery + "/" + typeLens + "/" + minVal + "/" + maxVal;
            var urlString1 = "query/trajectory_lines2/" + lng + "/" + lat + "/" + radiusQuery + "/" + typeLens + "/" + minVal + "/" + maxVal;
            var urlString  = "query/trajectory_lines3/" + lng + "/" + lat + "/" + radiusQuery + "/" + typeLens + "/" + minVal + "/" + maxVal;
            
            var lensesVar = createLens(lng, lat, radiusQuery, typeLens, minVal, maxVal);
            
            var newData = $.ajax({
                url: urlString,
                type: 'GET',
                dataType:'json',
                success: console.log("Data successfully loaded!"),
                error: function (xhr) {
                    alert(xhr.statusText)
                }
                
            }) 
            $.when(newData).done(function() {
                
                if(newData.responseJSON.features != null){
                    var tracksToDraw = L.geoJson(newData.responseJSON,firstStyle);
                    tracksToDraw.addTo(markerGroup);
                    lastMarkerGroupID = tracksToDraw._leaflet_id;
                    lensesVar.colorSuccess();
                }
                lensesLayer.bringToFront();
            }); 
            var newData1 = $.ajax({
                url: urlString1,
                type: 'GET',
                dataType:'json',
                success: console.log("Data successfully loaded!"),
                error: function (xhr) {
                    alert(xhr.statusText)
                }
                
            }) 
            $.when(newData1).done(function() {
                if(newData1.responseJSON.features != null){
                    var tracksToDraw = L.geoJson(newData1.responseJSON,firstStyle);
                    tracksToDraw.addTo(markerGroup1);
                    lastMarkerGroupID1 = tracksToDraw._leaflet_id;
                    lensesVar.colorSuccess();
                }
                lensesLayer.bringToFront();
            });
            var newData2 = $.ajax({
                url: urlString2,
                type: 'GET',
                dataType:'json',
                success: console.log("Data successfully loaded!"),
                error: function (xhr) {
                    alert(xhr.statusText)
                }
                
            }) 
            $.when(newData2).done(function() {
                if(newData2.responseJSON.features != null){
                    var tracksToDraw = L.geoJson(newData2.responseJSON,firstStyle);
                    tracksToDraw.addTo(markerGroup2);
                    lastMarkerGroupID2 = tracksToDraw._leaflet_id;
                    lensesVar.colorSuccess();
                }
                lensesLayer.bringToFront();
            });
            var newData3 = $.ajax({
                url: urlString3,
                type: 'GET',
                dataType:'json',
                success: console.log("Data successfully loaded!"),
                error: function (xhr) {
                    alert(xhr.statusText)
                }
                
            }) 
            $.when(newData3).done(function() {
                if(newData3.responseJSON.features != null){
                    var tracksToDraw = L.geoJson(newData3.responseJSON,firstStyle);
                    tracksToDraw.addTo(markerGroup3);
                    lastMarkerGroupID3 = tracksToDraw._leaflet_id;
                    lensesVar.colorSuccess();
                }
                lensesLayer.bringToFront();
            });
            
            
        }

        function deleteQuery(lng, lat, radius, type, minVal, maxVal){
            var urlString3 = "queryRemoval/trajectory_lines/"  + lng + "/" + lat + "/" + radius + "/" + type + "/" + minVal + "/" + maxVal;
            var urlString2 = "queryRemoval/trajectory_lines1/" + lng + "/" + lat + "/" + radius + "/" + type + "/" + minVal + "/" + maxVal;
            var urlString1 = "queryRemoval/trajectory_lines2/" + lng + "/" + lat + "/" + radius + "/" + type + "/" + minVal + "/" + maxVal;
            var urlString  = "queryRemoval/trajectory_lines3/" + lng + "/" + lat + "/" + radius + "/" + type + "/" + minVal + "/" + maxVal;

            var newData = $.ajax({
                url: urlString,
                type: 'GET',
                dataType:'json',
                success: console.log("1 successfully loaded!"),
                error: function (xhr) {
                    alert(xhr.statusText)
                }
                
            })
            $.when(newData).done(function() {
                
                console.log("Im removing the map now and adding new ones afterwards")
                
                if(newData.responseJSON.features != null){
                    var tracksToDraw = L.geoJson(newData.responseJSON,firstStyle);
                    tracksToDraw.addTo(markerGroup);
                    var idTracks = tracksToDraw._leaflet_id;
                    lastMarkerGroupID = tracksToDraw._leaflet_id;
                    
                }
                lensesLayer.bringToFront();
                
            });
            var newData1 = $.ajax({
                url: urlString1,
                type: 'GET',
                dataType:'json',
                success: console.log("2 successfully loaded!"),
                error: function (xhr) {
                    alert(xhr.statusText)
                }
                
            })
            $.when(newData1).done(function() {
                
                console.log("Im removing the map now and adding new ones afterwards")
                
                if(newData1.responseJSON.features != null){
                    var tracksToDraw = L.geoJson(newData1.responseJSON,firstStyle);
                    tracksToDraw.addTo(markerGroup1);
                    lastMarkerGroupID1 = tracksToDraw._leaflet_id;
                    
                }
                lensesLayer.bringToFront();
            });
            var newData2 = $.ajax({
                url: urlString2,
                type: 'GET',
                dataType:'json',
                success: console.log("3 successfully loaded!"),
                error: function (xhr) {
                    alert(xhr.statusText)
                }
                
            })
            $.when(newData2).done(function() {
                
                console.log("Im removing the map now and adding new ones afterwards")
                
                if(newData2.responseJSON.features != null){
                    var tracksToDraw = L.geoJson(newData2.responseJSON,firstStyle);
                    tracksToDraw.addTo(markerGroup2);
                    lastMarkerGroupID2 = tracksToDraw._leaflet_id;
                     
                }
                lensesLayer.bringToFront();
            });
            var newData3 = $.ajax({
                url: urlString3,
                type: 'GET',
                dataType:'json',
                success: console.log("4 successfully loaded!"),
                error: function (xhr) {
                    alert(xhr.statusText)
                }
                
            })
            $.when(newData3).done(function() {
                
                console.log("Im removing the map now and adding new ones afterwards")
                
                if(newData3.responseJSON.features != null){
                    var tracksToDraw = L.geoJson(newData3.responseJSON,firstStyle);
                    tracksToDraw.addTo(markerGroup3);
                    lastMarkerGroupID3 = tracksToDraw._leaflet_id;
                     
                }
                lensesLayer.bringToFront();
            });
            
        }

        function createLens(lng, lat, radiusQuery, _type, minVal, maxVal){
            var lens = { type: _type, 
                areaQuery : L.circle([lat, lng], {
                    color: 'DarkRed',
                    fillColor: 'red',
                    fillOpacity: 0.6,
                    radius: radiusQuery
                }).addTo(lensesLayer),
                colorSuccess : function() {
                    if(_type == "Default"){
                        console.log("I will now paint the Pass by circle again ....")
                        lens.areaQuery.setStyle({color: 'DodgerBlue', fillColor: 'DodgerBlue', fillOpacity: 0.2});
                    }
                    else if(_type == "Start"){
                        console.log("I will now paint the Start circle again ....")
                        lens.areaQuery.setStyle({color: 'MediumSeaGreen', fillColor: 'MediumSeaGreen', fillOpacity: 0.2});
                    }
                    else if(_type == "End"){
                        console.log("I will now paint the End circle again ....")
                        lens.areaQuery.setStyle({color: 'Violet', fillColor: 'Violet', fillOpacity: 0.2});
                    }
                    else if(_type == "Vel_avg"){
                        console.log("I will now paint the End circle again ....")
                        lens.areaQuery.setStyle({color: 'orange', fillColor: 'orange', fillOpacity: 0.2});
                    }
                    else if(_type == "Length"){
                        console.log("I will now paint the End circle again ....")
                        lens.areaQuery.setStyle({color: 'SlateBlue', fillColor: 'SlateBlue', fillOpacity: 0.2});
                    }
                    else if(_type == "Time_Interval"){
                        console.log("I will now paint the End circle again ....")
                        lens.areaQuery.setStyle({color: 'purple', fillColor: 'purple', fillOpacity: 0.2});
                    }
                    else if(_type == "Time_Duration"){
                        console.log("I will now paint the End circle again ....")
                        lens.areaQuery.setStyle({color: 'DarkTurquoise ', fillColor: 'DarkTurquoise ', fillOpacity: 0.2});
                    }
                }
            };
            
            
            lens.areaQuery.bindPopup("<input type='button' value='Delete this lens' class='marker-delete-button'/>")
            lens.areaQuery.on("popupopen", function() {
            var tempMarker = lens;

            //var tempMarkerGeoJSON = this.toGeoJSON();

            //var lID = tempMarker._leaflet_id; // Getting Leaflet ID of this marker

            // To remove marker on click of delete
            $('.marker-delete-button:visible').click(function () {
                lensesLayer.removeLayer(tempMarker.areaQuery);
                
                if(lastMarkerGroupID !=null){
                    markerGroup.removeLayer(lastMarkerGroupID);
                    lastMarkerGroupID = null;
                }
                if(lastMarkerGroupID1 !=null){
                    markerGroup1.removeLayer(lastMarkerGroupID1);
                    lastMarkerGroupID1 = null;
                }
                if(lastMarkerGroupID2 !=null){
                    markerGroup2.removeLayer(lastMarkerGroupID2);
                    lastMarkerGroupID2 = null;
                }
                if(lastMarkerGroupID3 !=null){
                    markerGroup3.removeLayer(lastMarkerGroupID3);
                    lastMarkerGroupID3 = null;
                }
                deleteQuery(lng, lat, radiusQuery, _type, minVal, maxVal);
                });
                
            }) ; 
            return lens
        }
        


