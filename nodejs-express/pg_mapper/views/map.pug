extends layout
block content
   
    <div style="position: absolute; bottom: 1%;">
        <label for="track">Choose the files you want to upload (must be in gpx format):</label>
        <form id='myform' action="/fileUpload" method="post" enctype="multipart/form-data">
            <input type="file" name="track" multiple />
            <button> Submit </button>
        </form>
    </div>
    #map
    
    script.

        //Array that will save all the layers
        let layerArray = [];

        let map = L.map('map',{preferCanvas: true,renderer: L.canvas({}), center: [38.736946,-9.142685], zoom: 10,worldCopyJump: true});
        map.createPane('lensPane');
        map.createPane('outtterLensPane');
        map.createPane('outtterLensDeletePane');
        map.createPane('velPane');
        map.createPane('areaPane');
        map.createPane('attLensPane');
        map.createPane('queryLensPane');
        map.createPane('queryLensPane1');
        map.createPane('queryLensPane2');
        map.createPane('queryLensPane3');
        map.getPane('lensPane').style.zIndex = 600;
        map.getPane('outtterLensPane').style.zIndex = 650;
        map.getPane('outtterLensDeletePane').style.zIndex = 700;
        map.getPane('attLensPane').style.zIndex = 450;
        map.getPane('queryLensPane').style.zIndex = 400;
        map.getPane('queryLensPane1').style.zIndex = 401;
        map.getPane('queryLensPane2').style.zIndex = 402;
        map.getPane('queryLensPane3').style.zIndex = 403;
        map.getPane('velPane').style.zIndex = 400;

        map.getPane('areaPane').style.zIndex = 900;
        let popup = L.popup();
        let popup2 = L.popup();

        let minValueVel;
        let maxValueVel;
        let minValueLength;
        let maxValueLength;
        let minValueTime;
        let maxValueTime;
        let minValueTimeDuration;
        let maxValueTimeDuration;

        //create array with all layers?

        let markerGroup  = L.featureGroup({pane: 'queryLensPane'}).addTo(map);
        let markerGroup1 = L.featureGroup({pane: 'queryLensPane1'}).addTo(map);
        let markerGroup2 = L.featureGroup({pane: 'queryLensPane2'}).addTo(map);
        let markerGroup3 = L.featureGroup({pane: 'queryLensPane3'}).addTo(map);
        
        let attLenResults = L.featureGroup({pane: 'attLensPane'}).addTo(map);

        let outterLensesLayer = L.featureGroup({pane: 'outtterLensPane'}).addTo(map);
        let lensesLayer = L.featureGroup({pane: 'lensPane'}).addTo(map);
        let areasLayer = L.featureGroup({pane: 'areaPane'}).addTo(map);
        

        let lensPreCreationLayer = L.layerGroup().addTo(map);
        
        let lastMarkerGroupID = null ;
        let lastMarkerGroupID1 = null ;
        let lastMarkerGroupID2 = null ;
        let lastMarkerGroupID3 = null ;
        let defaultLayerFlag = true;

        let createQueryLensesFlag = false;
        let createAttributeLensesFlag = false;

        let moved = false;
        let lensCanMove = false;


        let attributeFuncVar = "length";
        let encodingFuncVar = "color";

        let attLensesArray = [];
        //opacityLensArray
        let attOPACITYLensesArray = [];


        var minTimeValue = 0;
        var maxTimeValue = 0;
        getMinTimeVal()
        getMaxTimeVal()



        //ALL black and dark grey
        L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_nolabels/{z}/{x}/{y}{r}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',
            subdomains: 'abcd',
            maxZoom: 19
        }).addTo(map);

        //let myData = jsonData;
        let myData = !{JSON.stringify(jsonData)};
        // Create variable to hold map element, give initial settings to map
        let container1 = L.DomUtil.create('div', 'leaflet-bar leaflet-control leaflet-control-custom');
        let container2 = L.DomUtil.create('div', 'leaflet-bar leaflet-control leaflet-control-custom');
        let customControlQ =  L.Control.extend({
            options: {
                position: 'topleft'
            },
            onAdd: function (map) {
                container1.style.backgroundColor = 'white';     
                container1.style.backgroundImage = "url(images/636051.svg)";
                container1.style.backgroundSize = "30px 30px";
                container1.style.width = '30px';
                container1.style.height = '30px';

                container1.onclick = function(e){
                    L.DomEvent.stopPropagation(e); 
                    if(!clicked) {
                        createAttributeLensesFlag = false;
                        container2.style.backgroundColor = 'white'; 
                        createQueryLensesFlag = !createQueryLensesFlag;
                        if (createQueryLensesFlag){
                            container1.style.backgroundColor = 'grey';
                        }
                        else{
                            container1.style.backgroundColor = 'white';   
                        }
                    } 
                };
                container1.ondbclick = function(e){
                    L.DomEvent.stopPropagation(e); 
                    e.originalEvent.preventDefault();
                }

                return container1;
            }
        });
        let customControlA =  L.Control.extend({
            options: {
                position: 'topleft'
            },
            onAdd: function (map) {
                container2.style.backgroundColor = 'white';     
                container2.style.backgroundImage = "url(images/queryAtt.png)";
                container2.style.backgroundSize = "30px 30px";
                container2.style.width = '30px';
                container2.style.height = '30px';

                container2.onclick = function(e){
                    L.DomEvent.stopPropagation(e);
                    if(!clicked) {
                        createQueryLensesFlag = false;
                        container1.style.backgroundColor = 'white'; 
                        createAttributeLensesFlag = !createAttributeLensesFlag;
                        if (createAttributeLensesFlag){
                            container2.style.backgroundColor = 'grey';
                        }
                        else{
                            container2.style.backgroundColor = 'white';   
                        }
                    }  
                };
                container2.ondbclick = function(e){
                    L.DomEvent.stopPropagation(e);
                    e.originalEvent.preventDefault();
                }
                return container2;
            }
        });

        map.addControl(new customControlQ());
        map.addControl(new customControlA());
            
        let container = document.getElementsByClassName("leaflet-zoom-animated");
        container[0].onclick = function(e){
                L.DomEvent.stopPropagation(e);
        }
                

        
        //let defaultLayer = new L.GeoJSON().addTo(map);
        let firstStyle = {
            "color": '#43A7DE',
            "opacity": 1,
            "weight": 1.5,
            "interactive": false    
        };
        let firstStyleATT = {
            "color": '#43A7DE',
            "opacity": 1,
            "weight": 1.5,
            "pane": "attLensPane"
            
        };
        let defaultLayer = null;
        // Add JSON to map
        if(myData.features != null){
            defaultLayer = new L.geoJson(myData,firstStyle).addTo(map);
            map.panTo(defaultLayer.getBounds().getCenter());
        }

    
        map.on('zoomend', function() {
            console.log(map.getZoom())
            if (map.getZoom() >= 19){
                    markerGroup3.addTo(map);
            }
            else {
                if (map.hasLayer(markerGroup3)) {
                    map.removeLayer(markerGroup3);
                } else {
                    console.log("MarkerGroup3 not active");
                }
                if (map.getZoom() >= 17){
                    markerGroup2.addTo(map);
                }
                else {
                    if (map.hasLayer(markerGroup2)) {
                        map.removeLayer(markerGroup2);
                    } else {
                        console.log("MarkerGroup2 not active");
                    }
                    if (map.getZoom() >= 15){
                        markerGroup1.addTo(map);
                    }
                    else {
                        if (map.hasLayer(markerGroup1)) {
                            map.removeLayer(markerGroup1);
                        } else {
                            console.log("MarkerGroup1 not active");
                        }
                
                    }
                }
            }
            lensesLayer.bringToFront();
        });
        let movedCreateLens = false;
        let radiusValue = 0;
        let locationCreation;
        let createdAlreadyFlag = false;
        let sizeBellow25k = false;
        let mapPressForCreation = false;
        let notClickedLens = false;
        let clicked = false;
        let changeRadius = false;
        let correctSizelet = false;
        map.on({
            click:function(e){
                map.removeEventListener('mousemove');
                if(!changeRadius){    
                    outterLensesLayer.clearLayers();
                    moved = false;
                    lensCanMove = false;
                    clicked = false;
                }
            },
            mousedown: function (e) {
                L.DomEvent.stopPropagation(e);
                if(createQueryLensesFlag || createAttributeLensesFlag){
                    locationCreation = e.latlng;

                    let from = turf.point([locationCreation.lat, locationCreation.lng]);
                    let optionsCreateCirc = {units: 'kilometers'};
                    let circleBeforeCreating;
                    let mapPressForCreation = true;
                    notClickedLens = true;
                    map.on('mousemove', function (event) {
                        L.DomEvent.stopPropagation(event);
                        if(mapPressForCreation && notClickedLens && !clicked && (createQueryLensesFlag || createAttributeLensesFlag)){
                            
                            map.dragging.disable();
                            movedCreateLens = true;

                            let to = turf.point([event.latlng.lat, event.latlng.lng]);


                            let distance = turf.distance(from, to, optionsCreateCirc);
                            radiusValue = distance * 1000;
                            if(radiusValue >= 50){
                                if(!createdAlreadyFlag){    
                                    circleBeforeCreating =  L.circle([locationCreation.lat, locationCreation.lng], {
                                        color: 'white',
                                        fillColor: 'white',
                                        fillOpacity: 0.5,
                                        radius: radiusValue,
                                        pane: 'lensPane'
                                    }).addTo(lensPreCreationLayer);
                                    createdAlreadyFlag = true;
                                    sizeBellow25k = true;
                                }
                                else{
                                    if(25000 < radiusValue){
                                        circleBeforeCreating.setStyle({color:'DarkRed',fillColor: 'red'});
                                        sizeBellow25k = false;
                                    }
                                    else{
                                        circleBeforeCreating.setStyle({color:'white',fillColor: 'white'});
                                        sizeBellow25k = true;
                                    }
                                    circleBeforeCreating.setRadius(radiusValue);
                                }
                            }
                            else{
                                if(createdAlreadyFlag){
                                    lensPreCreationLayer.clearLayers();
                                    createdAlreadyFlag = false;
                                }
                            }
                        }
                            
                        
                        
                    });
                }
            },
            mouseup: function (e) {
                L.DomEvent.stopPropagation(e);
                map.removeEventListener('mousemove');
                lensPreCreationLayer.clearLayers();
                if (movedCreateLens && createdAlreadyFlag && sizeBellow25k) {
                    map.dragging.enable();
                    onMapClick(locationCreation, radiusValue);
                    createQueryLensesFlag = false;
                    createAttributeLensesFlag = false;
                    container1.style.backgroundColor = 'white'; 
                    container2.style.backgroundColor = 'white';
                }
                createdAlreadyFlag = false;
                movedCreateLens = false;
                sizeBellow25k = false;
                map.dragging.enable();
            }
        });

        function onMapClick(location,radiusValue) {
            console.log(location);
            console.log(radiusValue);
            if(createQueryLensesFlag){   
                queryLensMenu(location,radiusValue);
            }
            else if(createAttributeLensesFlag){
                attributeLensMenu(location,radiusValue);
            }
        }


        /////
        /////
        /////

        
        /////
        ///// Menus for lens creation
        /////

        function queryLensMenu(locationLatLng,radius){
            let location= locationLatLng;
            createLens(location.lng, location.lat, radius,"Default",0,0).createLayers();
            
        }
        async function attributeLensMenu(locationLatLng,radius){
            //lensPreCreationLayer.clearLayers();
            let holder = createALens(locationLatLng, radius,'time','color')
            holder = await holder.createAreas();
            
            //holder.createLayers();
        }

        /////
        /////
        /////

        /////
        ///// Create Lens' circle (lens it self)
        /////

        function createLens(lng, lat, radiusQuery, _type, minVal, maxVal){
            let lens = { areaQuery : L.circle([lat, lng], {
                    color: 'DarkRed',
                    fillColor: 'red',
                    fillOpacity: 0.6,
                    radius: radiusQuery,
                    pane: 'lensPane'
                }).addTo(lensesLayer),
                outsideCircle : null,
                lngLat : [lat,lng],
                radiusQuery : radiusQuery,
                type : _type,
                minV : minVal,
                maxV : maxVal,
                lngLatOLD : [lat,lng],
                radiusQueryOLD : radiusQuery,
                typeOLD : _type,
                minVOLD : minVal,
                maxVOLD : maxVal,
                lID : null,
                bounds : null,
                radiusChangeFlag: false,
                getRadiusFlag(){
                    return this.radiusChangeFlag;
                },
                setRadiusFlag(value){
                    if(value == true || value == false)
                        this.radiusChangeFlag = value;
                },
                getMinV: function (){
                    return this.minV;
                },
                getMaxV: function (){
                    return this.maxV;
                },
                getType: function (){
                    return this.type;
                },
                setMinV: function (value){
                    this.minV = value;
                },
                setMaxV: function (value){
                    this.maxV = value;
                },
                setType: function (value){
                    this.type = value;
                },
                setLngLat : function (value){
                    this.lngLat = value;
                },
                getMinVOLD: function (){
                    return this.minVOLD;
                },
                getMaxVOLD: function (){
                    return this.maxVOLD;
                },
                getTypeOLD: function (){
                    return this.typeOLD;
                },
                setMinVOLD: function (value){
                    this.minVOLD = value;
                },
                setMaxVOLD: function (value){
                    this.maxVOLD = value;
                },
                setTypeOLD: function (value){
                    this.typeOLD = value;
                },
                setLngLatOLD : function (value){
                    this.lngLatOLD = value;
                },
                setBounds : function (value){
                    this.bounds = value;
                },
                setlID : function (value){
                    this.lID = value;
                },
                getLngLat : function (){
                    return this.lngLat;
                },
                getLngLatOLD : function (){
                    return this.lngLatOLD;
                },
                getBound : function (){
                    return this.bounds;
                },
                getlID : function (){
                    return this.lID;
                },
                setOutsideCircle: function(circle){
                    this.outsideCircle = circle;
                },
                setRadius : function (value){
                    this.areaQuery.setRadius(value);
                    this.radiusQuery = value;
                },
                getRadius : function (){
                    return this.radiusQuery;
                },
                setRadiusOLD : function (value){
                    this.radiusQueryOLD = value;
                },
                getRadiusOLD : function (){
                    return this.radiusQueryOLD;
                },
                colorSuccess : function() {
                    if(_type == "Default"){
                        console.log("I will now paint the Pass by circle again ....")
                        lens.areaQuery.setStyle({color: 'DodgerBlue', fillColor: 'DodgerBlue', fillOpacity: 0});
                    }
                    else if(_type == "Start"){
                        console.log("I will now paint the Start circle again ....")
                        lens.areaQuery.setStyle({color: 'MediumSeaGreen', fillColor: 'MediumSeaGreen', fillOpacity: 0});
                    }
                    else if(_type == "End"){
                        console.log("I will now paint the End circle again ....")
                        lens.areaQuery.setStyle({color: 'Violet', fillColor: 'Violet', fillOpacity: 0});
                    }
                    else if(_type == "Vel_avg"){
                        console.log("I will now paint the End circle again ....")
                        lens.areaQuery.setStyle({color: 'orange', fillColor: 'orange', fillOpacity: 0});
                    }
                    else if(_type == "Length"){
                        console.log("I will now paint the End circle again ....")
                        lens.areaQuery.setStyle({color: 'SlateBlue', fillColor: 'SlateBlue', fillOpacity: 0});
                    }
                    else if(_type == "Time_Interval"){
                        console.log("I will now paint the End circle again ....")
                        lens.areaQuery.setStyle({color: 'purple', fillColor: 'purple', fillOpacity: 0});
                    }
                    else if(_type == "Time_Duration"){
                        console.log("I will now paint the End circle again ....")
                        lens.areaQuery.setStyle({color: 'DarkTurquoise ', fillColor: 'DarkTurquoise ', fillOpacity: 0.2});
                    }
                },
                createLayers: function(){
                    //lensPreCreationLayer.clearLayers();
                    console.log("Im removing the map now and adding new ones afterwards")
                    if(defaultLayerFlag){
                        if(defaultLayer != null){
                            defaultLayerFlag = false;
                            map.removeLayer(defaultLayer);
                        }

                    }

                    if(lastMarkerGroupID !=null){
                        markerGroup.removeLayer(lastMarkerGroupID);
                        lastMarkerGroupID = null;
                    }
                    if(lastMarkerGroupID1 !=null){
                        markerGroup1.removeLayer(lastMarkerGroupID1);
                        lastMarkerGroupID1 = null;
                    }
                    if(lastMarkerGroupID2 !=null){
                        markerGroup2.removeLayer(lastMarkerGroupID2);
                        lastMarkerGroupID2 = null;
                    }
                    if(lastMarkerGroupID3 !=null){
                        markerGroup3.removeLayer(lastMarkerGroupID3);
                        lastMarkerGroupID3 = null;
                    }

                        // Create URL
                    let urlString3 = "query/trajectory_lines/"  + this.getLngLat()[1] + "/" + this.getLngLat()[0] + "/" + this.getRadius() + "/" + this.getType() + "/" + this.getMinV() + "/" + this.getMaxV();
                    let urlString2 = "query/trajectory_lines1/" + this.getLngLat()[1] + "/" + this.getLngLat()[0] + "/" + this.getRadius() + "/" + this.getType() + "/" + this.getMinV() + "/" + this.getMaxV();
                    let urlString1 = "query/trajectory_lines2/" + this.getLngLat()[1] + "/" + this.getLngLat()[0] + "/" + this.getRadius() + "/" + this.getType() + "/" + this.getMinV() + "/" + this.getMaxV();
                    let urlString  = "query/trajectory_lines3/" + this.getLngLat()[1] + "/" + this.getLngLat()[0] + "/" + this.getRadius() + "/" + this.getType() + "/" + this.getMinV() + "/" + this.getMaxV();
                    

                    let thisVar = this;

                    let newData = $.ajax({
                        url: urlString,
                        type: 'GET',
                        dataType:'json',
                        success: console.log("Data successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    }) 
                    $.when(newData).done(function() {
                        if(newData.responseJSON.features != null){
                            let tracksToDraw = L.geoJson(newData.responseJSON,firstStyle);
                            tracksToDraw.addTo(markerGroup);
                            lastMarkerGroupID = tracksToDraw._leaflet_id;
                            thisVar.colorSuccess();
                        }
                        lensesLayer.bringToFront();
                    }); 
                    let newData1 = $.ajax({
                        url: urlString1,
                        type: 'GET',
                        dataType:'json',
                        success: console.log("Data successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    }) 
                    $.when(newData1).done(function() {
                        if(newData1.responseJSON.features != null){
                            let tracksToDraw = L.geoJson(newData1.responseJSON,firstStyle);
                            tracksToDraw.addTo(markerGroup1);
                            lastMarkerGroupID1 = tracksToDraw._leaflet_id;
                            thisVar.colorSuccess();
                        }
                        lensesLayer.bringToFront();
                    });
                    let newData2 = $.ajax({
                        url: urlString2,
                        type: 'GET',
                        dataType:'json',
                        success: console.log("Data successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    }) 
                    $.when(newData2).done(function() {
                        if(newData2.responseJSON.features != null){
                            let tracksToDraw = L.geoJson(newData2.responseJSON,firstStyle);
                            tracksToDraw.addTo(markerGroup2);
                            lastMarkerGroupID2 = tracksToDraw._leaflet_id;
                            thisVar.colorSuccess();
                        }
                        lensesLayer.bringToFront();
                    });
                    let newData3 = $.ajax({
                        url: urlString3,
                        type: 'GET',
                        dataType:'json',
                        success: console.log("Data successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    }) 
                    $.when(newData3).done(function() {
                        if(newData3.responseJSON.features != null){
                            let tracksToDraw = L.geoJson(newData3.responseJSON,firstStyle);
                            tracksToDraw.addTo(markerGroup3);
                            lastMarkerGroupID3 = tracksToDraw._leaflet_id;
                            thisVar.colorSuccess();
                        }
                        lensesLayer.bringToFront();
                    });
                    
                    for(i = 0; i < attLensesArray.length; i++){
                        attLensesArray[i].updateALL();
                    };
                },
                deleteLayers: function(){
                    lensesLayer.removeLayer(lens.areaQuery);
                    if(lastMarkerGroupID !=null){
                        markerGroup.removeLayer(lastMarkerGroupID);
                        lastMarkerGroupID = null;
                    }
                    if(lastMarkerGroupID1 !=null){
                        markerGroup1.removeLayer(lastMarkerGroupID1);
                        lastMarkerGroupID1 = null;
                    }
                    if(lastMarkerGroupID2 !=null){
                        markerGroup2.removeLayer(lastMarkerGroupID2);
                        lastMarkerGroupID2 = null;
                    }
                    if(lastMarkerGroupID3 !=null){
                        markerGroup3.removeLayer(lastMarkerGroupID3);
                        lastMarkerGroupID3 = null;
                    }
                    let urlString3 = "queryRemoval/trajectory_lines/"  + this.getLngLat()[1] + "/" + this.getLngLat()[0] + "/" + this.getRadius() + "/" + this.getType()  + "/" + this.getMinV() + "/" + this.getMaxV();
                    let urlString2 = "queryRemoval/trajectory_lines1/" + this.getLngLat()[1] + "/" + this.getLngLat()[0] + "/" + this.getRadius() + "/" + this.getType()  + "/" + this.getMinV() + "/" + this.getMaxV();
                    let urlString1 = "queryRemoval/trajectory_lines2/" + this.getLngLat()[1] + "/" + this.getLngLat()[0] + "/" + this.getRadius() + "/" + this.getType()  + "/" + this.getMinV() + "/" + this.getMaxV();
                    let urlString  = "queryRemoval/trajectory_lines3/" + this.getLngLat()[1] + "/" + this.getLngLat()[0] + "/" + this.getRadius() + "/" + this.getType()  + "/" + this.getMinV() + "/" + this.getMaxV();
  
                    let newData = $.ajax({
                        url: urlString,
                        type: 'GET',
                        dataType:'json',
                        success: console.log("1 successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    })
                    $.when(newData).done(function() {
                        
                        console.log("Im removing the map now and adding new ones afterwards")
                        
                        if(newData.responseJSON.features != null){
                            let tracksToDraw = L.geoJson(newData.responseJSON,firstStyle);
                            tracksToDraw.addTo(markerGroup);
                            let idTracks = tracksToDraw._leaflet_id;
                            lastMarkerGroupID = tracksToDraw._leaflet_id;
                            
                        }
                        lensesLayer.bringToFront();
                        
                    });
                    let newData1 = $.ajax({
                        url: urlString1,
                        type: 'GET',
                        dataType:'json',
                        success: console.log("2 successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    })
                    $.when(newData1).done(function() {
                        
                        console.log("Im removing the map now and adding new ones afterwards")
                        
                        if(newData1.responseJSON.features != null){
                            let tracksToDraw = L.geoJson(newData1.responseJSON,firstStyle);
                            tracksToDraw.addTo(markerGroup1);
                            lastMarkerGroupID1 = tracksToDraw._leaflet_id;
                            
                        }
                        lensesLayer.bringToFront();
                    });
                    let newData2 = $.ajax({
                        url: urlString2,
                        type: 'GET',
                        dataType:'json',
                        success: console.log("3 successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    })
                    $.when(newData2).done(function() {
                        
                        console.log("Im removing the map now and adding new ones afterwards")
                        
                        if(newData2.responseJSON.features != null){
                            let tracksToDraw = L.geoJson(newData2.responseJSON,firstStyle);
                            tracksToDraw.addTo(markerGroup2);
                            lastMarkerGroupID2 = tracksToDraw._leaflet_id;
                            
                        }
                        lensesLayer.bringToFront();
                    });
                    let newData3 = $.ajax({
                        url: urlString3,
                        type: 'GET',
                        dataType:'json',
                        success: console.log("4 successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    })
                    $.when(newData3).done(function() {
                        
                        console.log("Im removing the map now and adding new ones afterwards")
                        
                        if(newData3.responseJSON.features != null){
                            let tracksToDraw = L.geoJson(newData3.responseJSON,firstStyle);
                            tracksToDraw.addTo(markerGroup3);
                            lastMarkerGroupID3 = tracksToDraw._leaflet_id;
                            
                        }
                        lensesLayer.bringToFront();
                    });

                    for(i = 0; i < attLensesArray.length; i++){
                        attLensesArray[i].updateALL();
                    };
                    
                },
                updateLENS: function(){
                    this.areaQuery.setStyle({color: 'DarkRed',fillColor: 'red',fillOpacity: 0.6});
                    let thisVar= this;
                    if(lastMarkerGroupID !=null){
                        markerGroup.removeLayer(lastMarkerGroupID);
                        lastMarkerGroupID = null;
                    }
                    if(lastMarkerGroupID1 !=null){
                        markerGroup1.removeLayer(lastMarkerGroupID1);
                        lastMarkerGroupID1 = null;
                    }
                    if(lastMarkerGroupID2 !=null){
                        markerGroup2.removeLayer(lastMarkerGroupID2);
                        lastMarkerGroupID2 = null;
                    }
                    if(lastMarkerGroupID3 !=null){
                        markerGroup3.removeLayer(lastMarkerGroupID3);
                        lastMarkerGroupID3 = null;
                    }
                    let urlString3 = "queryMoved/trajectory_lines/"  + this.getLngLatOLD()[1] + "/" + this.getLngLatOLD()[0] + "/" + this.getRadiusOLD() + "/" + this.getTypeOLD() + "/" + this.getMinVOLD() + "/" + this.getMaxVOLD()+"/"  + 
                    this.getLngLat()[1] + "/" + this.getLngLat()[0] + "/" + this.getRadius() + "/" + this.getType() + "/" + this.getMinV() + "/" + this.getMaxV();
                    let urlString2 = "queryMoved/trajectory_lines1/" + this.getLngLatOLD()[1] + "/" + this.getLngLatOLD()[0] + "/" + this.getRadiusOLD() + "/" + this.getTypeOLD() + "/" + this.getMinVOLD() + "/" + this.getMaxVOLD()+"/"  + 
                    this.getLngLat()[1] + "/" + this.getLngLat()[0] + "/" + this.getRadius() + "/" + this.getType() + "/" + this.getMinV() + "/" + this.getMaxV();
                    let urlString1 = "queryMoved/trajectory_lines2/" + this.getLngLatOLD()[1] + "/" + this.getLngLatOLD()[0] + "/" + this.getRadiusOLD() + "/" + this.getTypeOLD() + "/" + this.getMinVOLD() + "/" + this.getMaxVOLD()+"/"  + 
                    this.getLngLat()[1] + "/" + this.getLngLat()[0] + "/" + this.getRadius() + "/" + this.getType() + "/" + this.getMinV() + "/" + this.getMaxV();
                    let urlString  = "queryMoved/trajectory_lines3/" + this.getLngLatOLD()[1] + "/" + this.getLngLatOLD()[0] + "/" + this.getRadiusOLD() + "/" + this.getTypeOLD() + "/" + this.getMinVOLD() + "/" + this.getMaxVOLD()+"/"  + 
                    this.getLngLat()[1] + "/" + this.getLngLat()[0] + "/" + this.getRadius() + "/" + this.getType() + "/" + this.getMinV() + "/" + this.getMaxV();
                    
                    let newData = $.ajax({
                        url: urlString,
                        type: 'GET',
                        dataType:'json',
                        success: console.log("1 successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    })
                    $.when(newData).done(function() {
                        
                        console.log("Im removing the map now and adding new ones afterwards")
                        
                        if(newData.responseJSON.features != null){
                            let tracksToDraw = L.geoJson(newData.responseJSON,firstStyle);
                            tracksToDraw.addTo(markerGroup);
                            let idTracks = tracksToDraw._leaflet_id;
                            lastMarkerGroupID = tracksToDraw._leaflet_id;
                            thisVar.colorSuccess();
                        }
                        
                        lensesLayer.bringToFront();
                        
                    });
                    let newData1 = $.ajax({
                        url: urlString1,
                        type: 'GET',
                        dataType:'json',
                        success: console.log("2 successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    })
                    $.when(newData1).done(function() {
                        
                        console.log("Im removing the map now and adding new ones afterwards")
                        
                        if(newData1.responseJSON.features != null){
                            let tracksToDraw = L.geoJson(newData1.responseJSON,firstStyle);
                            tracksToDraw.addTo(markerGroup1);
                            lastMarkerGroupID1 = tracksToDraw._leaflet_id;
                            thisVar.colorSuccess();
                        }
                        lensesLayer.bringToFront();
                    });
                    let newData2 = $.ajax({
                        url: urlString2,
                        type: 'GET',
                        dataType:'json',
                        success: console.log("3 successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    })
                    $.when(newData2).done(function() {
                        
                        console.log("Im removing the map now and adding new ones afterwards")
                        
                        if(newData2.responseJSON.features != null){
                            let tracksToDraw = L.geoJson(newData2.responseJSON,firstStyle);
                            tracksToDraw.addTo(markerGroup2);
                            lastMarkerGroupID2 = tracksToDraw._leaflet_id;
                            thisVar.colorSuccess();
                        }
                        lensesLayer.bringToFront();
                    });
                    let newData3 = $.ajax({
                        url: urlString3,
                        type: 'GET',
                        dataType:'json',
                        success: console.log("4 successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    })
                    $.when(newData3).done(function() {
                        
                        console.log("Im removing the map now and adding new ones afterwards")
                        
                        if(newData3.responseJSON.features != null){
                            let tracksToDraw = L.geoJson(newData3.responseJSON,firstStyle);
                            tracksToDraw.addTo(markerGroup3);
                            lastMarkerGroupID3 = tracksToDraw._leaflet_id;
                            thisVar.colorSuccess();
                        }
                        lensesLayer.bringToFront();
                    });

                    for(i = 0; i < attLensesArray.length; i++){
                        attLensesArray[i].updateALL();
                    };

                }
            };
            
            lens.setBounds(lens.areaQuery.getBounds());

            /*CALCULATE THE DISTANCE FROM ONE POINT TO ANOTHER IN PIXELS
            let northVar = map.latLngToLayerPoint(lens.areaQuery.getBounds().getNorthWest());
            let southVar = map.latLngToLayerPoint(lens.areaQuery.getBounds().getSouthWest());
            let numOfPixl = northVar.distanceTo(southVar);*/
            //className: 'outside-Circle'
            
                 
            let movedPos = false;
            let movedRadius = false;
            let movedOthers = false;

            lens.areaQuery.on({
                dbclick:function(e){
                    L.DomEvent.stopPropagation(e);
                },
                click: function(event1){
                    L.DomEvent.stopPropagation(event1);
                    createQueryLensesFlag = false;
                    createAttributeLensesFlag = false;
                    container1.style.backgroundColor = 'white'; 
                    container2.style.backgroundColor = 'white';
                    outterLensesLayer.clearLayers();
                    clicked = true;
                    let once = true;
                    map.fitBounds(lens.getBound());
                    map.on('moveend', function(event) {
                        L.DomEvent.stopPropagation(event);
                        if(clicked && once){
                            once = false;
                            console.log("Im on the move event again...");
                            
                            
                            // code stuff
                            let northVar = map.latLngToLayerPoint(lens.areaQuery.getBounds().getNorthWest());
                            let southVar = map.latLngToLayerPoint(lens.areaQuery.getBounds().getSouthWest());
                            let numOfPixl = northVar.distanceTo(southVar);
                            let myOutsideCircle =  L.divIcon({className: 'outside-Circle', iconSize: [numOfPixl,numOfPixl], html: 
                                "<button class='myDeleteButton' style='z-index: 1000;position: fixed;margin-top: 2%;margin-left: 12.5%;'><img src='images/trash.png' style='width: 85%; height: 80%;'></button>"+
                                "<div class='dropdown' style='z-index: 1019; position:fixed;margin-left: 76.5%;margin-top: 2%;'><button class='dropbtn'><img src='images/type.png' style='width: 150%;height: 150%;margin: -25%;''></button><div class='dropdown-content'>" + 
                                "<button class='dropbtnOpt-default'>Pass by</button>"+
                                "<button class='dropbtnOpt-start'>Start point</button>"+
                                "<button class='dropbtnOpt-end'>End point</button>"+
                                "<button class='dropbtnOpt-duration'>Duration</button>"+
                                "<button class='dropbtnOpt-time'>Time</button>"+
                                "<button class='dropbtnOpt-length'>Length</button>"+
                                "<button class='dropbtnOpt-velocity'>Average velocity</button>"+
                                "</div></div>" +
                                "<button class='myIntervalsButton' style='z-index: 1019; position:fixed;margin-left: 96%;margin-top: 24%;'><img src='images/intervals.png' style='z-index: 999;width: 20px;height: 20px;    margin: inherit;margin-left: -1px;margin-top: -1px;'></button>"+
                                "<button class='myRadiusButton' style='margin-left: 89%;margin-top: 82.5%;position: static;'><img src='images/radius.png' style='z-index: 999;width: 150%;height: 150%;margin: inherit;margin-left: -3px;margin-top: -4px;'><span class='explanation' style='color:white;margin: -50%;'> \n"+lens.getRadius().toFixed(0)+"meters</span></button>"+
                                "<button class='myMoveButton' style='margin-left: 77%;margin-top: 5%;position: static;'><img src='images/move.png' style='    z-index: 999; width: 190%; height: 190%; margin: inherit; margin-left: -48%;margin-top: -43%;'></button>"+
                                "<div id='sliderRadius' align='center' style='z-index:1018;    position: absolute;    top: 50%;left: 50%;transform: translate(-50%, -50%);display:none;'></div>"+
                                "<div id='sliderIntervalVel' align='center' style='z-index:1018;    position: absolute;    top: 50%;left: 50%;transform: translate(-50%, -50%);display:none;'></div>"+
                                "<div id='sliderIntervalLength' align='center' style='z-index:1018;    position: absolute;    top: 50%;left: 50%;transform: translate(-50%, -50%);display:none;'></div>"+
                                "<div id='sliderIntervalDuration' align='center' style='z-index:1018;    position: absolute;    top: 50%;left: 50%;transform: translate(-50%, -50%);display:none;'></div>"+
                                "<div id='sliderIntervalTime' align='center' style='z-index:1018;    position: absolute;        top: 50%;left: 50%;transform: translate(-50%, -50%);display:none;'></div>"
                              });
                      

                            console.log(myOutsideCircle.options);
                            let outsideCircVar = L.marker(lens.getLngLat(), {icon: myOutsideCircle, pane: 'outtterLensPane'});
                            lens.setOutsideCircle(outsideCircVar);
                  
                            outterLensesLayer.addLayer(lens.outsideCircle);

                            if (lens.getType() == "Default" || lens.getType() == "Start" || lens.getType() == "End") {
                                document.getElementsByClassName('myIntervalsButton')[0].style.backgroundColor = "grey";
                                if(lens.getType() == "Default")
                                    document.getElementsByClassName('dropbtnOpt-default')[0].style.backgroundColor = "#ff1144";
                                else if (lens.getType() == "Start")
                                    document.getElementsByClassName('dropbtnOpt-start')[0].style.backgroundColor = "#ff1144";
                                else
                                    document.getElementsByClassName('dropbtnOpt-end')[0].style.backgroundColor = "#ff1144";
                            } 
                            else {
                                document.getElementsByClassName('myIntervalsButton')[0].style.backgroundColor = "#ff8400";
                                if (lens.getType() == "Time_Duration")
                                    document.getElementsByClassName('dropbtnOpt-duration')[0].style.backgroundColor = "#ff1144";
                                else if (lens.getType() == "Time_Interval")
                                    document.getElementsByClassName('dropbtnOpt-time')[0].style.backgroundColor = "#ff1144";
                                else if (lens.getType() == "Vel_avg")
                                    document.getElementsByClassName('dropbtnOpt-velocity')[0].style.backgroundColor = "#ff1144";
                                else
                                    document.getElementsByClassName('dropbtnOpt-length')[0].style.backgroundColor = "#ff1144";
                            }

                            $('.myDeleteButton').click(function (e) {
                                outterLensesLayer.clearLayers();
                                lens.deleteLayers();
                                for(i = 0; i < attLensesArray.length; i++){
                                    attLensesArray[i].updateALL();
                                };
                            });  
                            $('.myMoveButton').click(function (e) {
                                L.DomEvent.stopPropagation(e); 
                                lensCanMove = !lensCanMove;
                                if(lensCanMove){
                                    document.getElementsByClassName('myRadiusButton')[0].style.visibility = "hidden";
                                    document.getElementsByClassName('dropdown')[0].style.visibility = "hidden";
                                    document.getElementsByClassName('myIntervalsButton')[0].style.visibility = "hidden";
                                    document.getElementsByClassName('myDeleteButton')[0].style.visibility = "hidden";
                                    map.zoomOut(1,true);
                                    
                                   

                                    document.getElementsByClassName('myMoveButton')[0].style.backgroundColor = "#ff0000";
                                }
                                else{
                                    map.zoomIn(1,true);
                                    map.fitBounds(lens.getBound());

                                    document.getElementsByClassName('myRadiusButton')[0].style.visibility = "visible";
                                    document.getElementsByClassName('dropdown')[0].style.visibility = "visible";
                                    document.getElementsByClassName('myIntervalsButton')[0].style.visibility = "visible";
                                    document.getElementsByClassName('myDeleteButton')[0].style.visibility = "visible";

                                    document.getElementsByClassName('myMoveButton')[0].style.backgroundColor = "#ff8400";
                                }
                                let mouseDown = false;
                                lens.outsideCircle.on({
                                    dbclick:function(e){
                                        L.DomEvent.stopPropagation(e);
                                    },
                                    click : function(e){
                                        L.DomEvent.stopPropagation(e);
                                    },
                                    mousedown: function (event) {
                                        L.DomEvent.stopPropagation(event);
                                        mouseDown = true;
                                        notClickedLens = false;
                                        
                                        map.on('mousemove', function (e) {
                                            createQueryLensesFlag = false;
                                            createAttributeLensesFlag = false;
                                            container1.style.backgroundColor = 'white'; 
                                            container2.style.backgroundColor = 'white';
                                            L.DomEvent.stopPropagation(e);
                                            console.log(lensCanMove);
                                            console.log(mouseDown);
                                            if(lensCanMove && mouseDown){
                                                
                                                if(!(moved)){
                                                    document.getElementsByClassName('myMoveButton')[0].style.visibility = "hidden";
                                                }
                                                
                                                map.dragging.disable();
                                                moved = true;
                                                lens.areaQuery.setLatLng(e.latlng);
                                                lens.outsideCircle.setLatLng(e.latlng);
                                                lens.lngLat = e.latlng;
                                                lens.setBounds(lens.areaQuery.getBounds());
                                                map.panInside(lens.getLngLat(),{padding:[200,200],duration:0.35});
                                                
                                            }
                                        });
                                    },
                                    mouseup: function(e){
                                        mouseDown = false;
                                        L.DomEvent.stopPropagation(e); 
                                        map.removeEventListener('mousemove');
                                        if(lensCanMove){
                                            
                                            if(moved){ 
                                                document.getElementsByClassName('myMoveButton')[0].style.visibility = "visible";
                                                moved = false;   
                                                map.dragging.enable();
                                                
                                                lens.setLngLat([e.latlng.lat,e.latlng.lng]);
                                                lens.updateLENS();
                                                lens.setLngLatOLD([e.latlng.lat,e.latlng.lng]);
                                                lens.setBounds(lens.areaQuery.getBounds());
                                                
                                                for(i = 0; i < attLensesArray.length; i++){
                                                    attLensesArray[i].updateALL();
                                                };
                                            }
                                        }
                                    },
                                    mouseout:function(){
                                        console.log("Bellow is the attLensesArray");
                                        console.log(attLensesArray);
                                        //outterLensesLayer.removeLayer(lens.outsideCircle);
                                        
                                    }
                                });
                            });
                            $('.myIntervalsButton').click(function(e){
                                L.DomEvent.stopPropagation(e);

                                if(document.getElementById("sliderRadius").style.display=='none'){
                                    if(lens.getType() == "Vel_avg") {

                                        if(document.getElementById("sliderIntervalVel").style.display=='none'){
                                            document.getElementsByClassName('myIntervalsButton')[0].style.backgroundColor = "#ff0000";
                                            document.getElementById("sliderIntervalVel").style.display="block";

                                            let $sliderIntervalVel = $('#sliderIntervalVel');
                                            $sliderIntervalVel.mousedown( function (e){
                                                //TODO VELOCITY REMOVING BADLY??
                                                L.DomEvent.stopPropagation(e);
                                                map.dragging.disable();
                                                e.originalEvent.preventDefault();
                                            });
                                        }
                                        else {
                                            document.getElementById("sliderIntervalVel").style.display="none";
                                            document.getElementsByClassName('myIntervalsButton')[0].style.backgroundColor = "#ff8400";
                                        }
                                    }
                                    else if(lens.getType() == "Length") {
                                        if(document.getElementById("sliderIntervalLength").style.display=='none'){
                                            document.getElementsByClassName('myIntervalsButton')[0].style.backgroundColor = "#ff0000";
                                            document.getElementById("sliderIntervalLength").style.display="block";

                                            let $sliderIntervalLength = $('#sliderIntervalLength');
                                            $sliderIntervalLength.mousedown( function (e){
                                                //TODO VELOCITY REMOVING BADLY??
                                                L.DomEvent.stopPropagation(e);
                                                map.dragging.disable();
                                                e.originalEvent.preventDefault();
                                            });
                                        }
                                        else {
                                            document.getElementById("sliderIntervalLength").style.display="none";
                                            document.getElementsByClassName('myIntervalsButton')[0].style.backgroundColor = "#ff8400";
                                        }
                                    }
                                    else if(lens.getType() == "Time_Duration") {
                                        if(document.getElementById("sliderIntervalDuration").style.display=='none'){
                                            document.getElementsByClassName('myIntervalsButton')[0].style.backgroundColor = "#ff0000";
                                            document.getElementById("sliderIntervalDuration").style.display="block";

                                            let $sliderIntervalDuration = $('#sliderIntervalDuration');
                                            $sliderIntervalDuration.mousedown( function (e){
                                                //TODO VELOCITY REMOVING BADLY??
                                                L.DomEvent.stopPropagation(e);
                                                map.dragging.disable();
                                                e.originalEvent.preventDefault();
                                            });
                                        }
                                        else {
                                            document.getElementById("sliderIntervalDuration").style.display="none";
                                            document.getElementsByClassName('myIntervalsButton')[0].style.backgroundColor = "#ff8400";
                                        }
                                    }
                                    else if(lens.getType() == "Time_Interval") {
                                        if(document.getElementById("sliderIntervalTime").style.display=='none'){
                                            document.getElementsByClassName('myIntervalsButton')[0].style.backgroundColor = "#ff0000";
                                            document.getElementById("sliderIntervalTime").style.display="block";

                                            let $sliderIntervalTime = $('#sliderIntervalTime');
                                            $sliderIntervalTime.mousedown( function (e){
                                                //TODO VELOCITY REMOVING BADLY??
                                                L.DomEvent.stopPropagation(e);
                                                map.dragging.disable();
                                                e.originalEvent.preventDefault();
                                            });
                                        }
                                        else {
                                            document.getElementById("sliderIntervalTime").style.display="none";
                                            document.getElementsByClassName('myIntervalsButton')[0].style.backgroundColor = "#ff8400";
                                        }
                                    }
                                    else{
                                        console.log("Lens not of the type that allows for intervals");
                                    }
                                } 
                            
                                $(function(){
                                    $("#sliderIntervalVel").roundSlider({
                                        sliderType: "range",
                                        radius: "130px",
                                        value: lens.getMinV() + "," + lens.getMaxV(),
                                        min: 0,
                                        max: 250,
                                        
                                        //lineCap: "round",
                                        width: 5,
                                        handleSize: "+10",
                                        handleShape: "dot",
                                        tooltipFormat: function (e) {
                                            return e.value + "Km/h";
                                        },
                                        drag: function (e) {
                                            L.DomEvent.stopPropagation(e);
                                            
                                            let index = e.value.indexOf(",");  // Gets the first index where a , occours
                                            let firstPart = e.value.substr(0, index); // Gets the first part
                                            let secondPart = e.value.substr(index + 1);  // Gets the text part
                                            lens.setMinV(firstPart);
                                            lens.setMaxV(secondPart);
                                            console.log(lens.getMinV());
                                            console.log(lens.getMaxV());
                                        },
                                        start: function(e) {
                                            
                                        },
                                        stop: function (e) {
                                            L.DomEvent.stopPropagation(e);
                                            map.dragging.enable();
                                            lens.updateLENS();
                                            lens.setMinVOLD(lens.getMinV());
                                            lens.setMaxVOLD(lens.getMaxV());
                                        }
                                    });
                                    
                                    $("#sliderIntervalLength").roundSlider({
                                        sliderType: "range",
                                        radius: "130px",
                                        value: lens.getMinV() + "," + lens.getMaxV(),
                                        min: 1,
                                        max: 500000,
                                        //lineCap: "round",
                                        width: 5,
                                        handleSize: "+10",
                                        handleShape: "dot",
                                        tooltipFormat: function (e) {
                                            return e.value/1000 + "Km";
                                        },
                                        drag: function (e) {
                                            L.DomEvent.stopPropagation(e);
                                            
                                            let index = e.value.indexOf(",");  // Gets the first index where a , occours
                                            let firstPart = e.value.substr(0, index); // Gets the first part
                                            let secondPart = e.value.substr(index + 1);  // Gets the text part
                                            lens.setMinV(firstPart);
                                            lens.setMaxV(secondPart);
                                            console.log(lens.getMinV());
                                            console.log(lens.getMaxV());
                                        },
                                        start: function(e) {
                                            
                                        },
                                        stop: function (e) {
                                            L.DomEvent.stopPropagation(e);
                                            map.dragging.enable();
                                            lens.updateLENS();
                                            lens.setMinVOLD(lens.getMinV());
                                            lens.setMaxVOLD(lens.getMaxV());
                                        }
                                    });
                                    
                                    $("#sliderIntervalDuration").roundSlider({
                                        sliderType: "range",
                                        radius: "130px",
                                        value: lens.getMinV() + "," + lens.getMaxV(),
                                        min: 0, // 2008-02-02 13:30:44
                                        max: 85839, // 2008-02-08 17:39:18
                                        //lineCap: "round",
                                        width: 5,
                                        handleSize: "+10",
                                        handleShape: "dot",
                                        tooltipFormat: function (e) {
                                            let delta = e.value;
                                            let days = Math.floor(delta / 86400);
                                            delta -= days * 86400;

                                            // calculate (and subtract) whole hours
                                            let hours = Math.floor(delta / 3600) % 24;
                                            delta -= hours * 3600;

                                            // calculate (and subtract) whole minutes
                                            let minutes = Math.floor(delta / 60) % 60;
                                            delta -= minutes * 60;

                                            // what's left is seconds
                                            let seconds = delta % 60;  // in theory the modulus is not required
                                            return hours + 'h ' + minutes + 'm ' + seconds + 's';
                                        },
                                        drag: function (e) {
                                            L.DomEvent.stopPropagation(e);
                                            
                                            let index = e.value.indexOf(",");  // Gets the first index where a , occours
                                            let firstPart = e.value.substr(0, index); // Gets the first part
                                            let secondPart = e.value.substr(index + 1);  // Gets the text part
                                            lens.setMinV(firstPart);
                                            lens.setMaxV(secondPart);
                                            console.log(lens.getMinV());
                                            console.log(lens.getMaxV());
                                        },
                                        start: function(e) {
                                            
                                        },
                                        stop: function (e) {
                                            L.DomEvent.stopPropagation(e);
                                            map.dragging.enable();
                                            lens.updateLENS();
                                            lens.setMinVOLD(lens.getMinV());
                                            lens.setMaxVOLD(lens.getMaxV());
                                        }
                                    });
                                    
                                    $("#sliderIntervalTime").roundSlider({
                                        sliderType: "range",
                                        radius: "130px",
                                        value: lens.getMinV() + "," + lens.getMaxV(),
                                        min: minTimeValue , // 2008-02-02 13:30:44
                                        max: maxTimeValue , // 2008-02-08 17:39:18
                                        //lineCap: "round",
                                        width: 5,
                                        handleSize: "+10",
                                        handleShape: "dot",
                                        tooltipFormat: function (e) {
                                            // Unixtimestamp
                                            let unixtimestamp = e.value;
                                            // Convert timestamp to milliseconds
                                            let date = new Date(unixtimestamp*1000);
                                            // Year
                                            let year = date.getFullYear();
                                            // Month
                                            let month = date.getMonth();
                                            // Day
                                            let day = date.getDate();
                                            // Hours
                                            let hours = date.getHours();
                                            // Minutes
                                            let minutes = "0" + date.getMinutes();
                                            // Seconds
                                            let seconds = "0" + date.getSeconds();
                                            // Display date time in MM-dd-yyyy h:m:s format
                                            let convdataTime = month+'-'+day+'-'+year+' '+hours + ':' + minutes.substr(-2);
                                            
                                            return convdataTime;
                                        },
                                        drag: function (e) {
                                            L.DomEvent.stopPropagation(e);
                                            
                                            let index = e.value.indexOf(",");  // Gets the first index where a , occours
                                            let firstPart = e.value.substr(0, index); // Gets the first part
                                            let secondPart = e.value.substr(index + 1);  // Gets the text part
                                            lens.setMinV(firstPart);
                                            lens.setMaxV(secondPart);
                                            console.log(lens.getMinV());
                                            console.log(lens.getMaxV());
                                        },
                                        start: function(e) {
                                            
                                        },
                                        stop: function (e) {
                                            L.DomEvent.stopPropagation(e);
                                            map.dragging.enable();
                                            lens.updateLENS();
                                            lens.setMinVOLD(lens.getMinV());
                                            lens.setMaxVOLD(lens.getMaxV());
                                        }
                                    });
                                });
                            });
                            
                            $('.myRadiusButton').click(function (ev) {
                                L.DomEvent.stopPropagation(ev);
                                changeRadius = !changeRadius;
                                
                                if(changeRadius){
                                    lens.setRadiusFlag(true);
                                    map.zoomOut(1, true);
                                    document.getElementsByClassName('myMoveButton')[0].style.visibility = "hidden";
                                    document.getElementsByClassName('dropdown')[0].style.visibility = "hidden";
                                    document.getElementsByClassName('myIntervalsButton')[0].style.visibility = "hidden";
                                    document.getElementsByClassName('myDeleteButton')[0].style.visibility = "hidden";

                                    document.getElementsByClassName('myRadiusButton')[0].style.backgroundColor = "#ff0000";
                                    map.on({
                                        click: function(e){
                                            L.DomEvent.stopPropagation(e);
                                            mapPressForCreation = false;
                                            correctSizelet = false;
                                        },
                                        mousedown: function (e) {
                                            L.DomEvent.stopPropagation(e);

                                            if(changeRadius){    
                                                let from = turf.point(lens.getLngLat());
                                                let optionsCreateCirc = {units: 'kilometers'};

                                                mapPressForCreation = true;
                                                map.on('mousemove', function (event) {
                                                    if(lens.getRadiusFlag()){
                                                        L.DomEvent.stopPropagation(event);

                                                        if (mapPressForCreation && changeRadius) {

                                                            map.dragging.disable();

                                                            let to = turf.point([event.latlng.lat, event.latlng.lng]);

                                                            let distance = turf.distance(from, to, optionsCreateCirc);
                                                            radiusValue = distance * 1000;
                                                            if (radiusValue >= 50 && radiusValue <= 25000) {
                                                                correctSizelet = true;
                                                                lens.colorSuccess();
                                                                lens.setRadius(radiusValue);
                                                            } else {
                                                                correctSizelet = false;
                                                                lens.areaQuery.setStyle({fillColor: 'DarkRed',color:'red'});
                                                            }
                                                        }
                                                        else
                                                            console.log("Mouse down but flags are false :S");
                                                    }
                                                });
                                            }
                                        },
                                        mouseup: function (e) {
                                            L.DomEvent.stopPropagation(e);
                                            map.removeEventListener('mousemove');
                                            map.dragging.enable();
                                            if(changeRadius && lens.getRadiusFlag()){
                                                
                                                console.log(correctSizeVar);
                                                if (mapPressForCreation,correctSizeVar) {

                                                    lens.updateLENS();
                                                    lens.setBounds(lens.areaQuery.getBounds());
                                                    
                                                    for (i = 0; i < attLensesArray.length; i++) {
                                                        attLensesArray[i].updateALL();
                                                    }
                                                    lens.setRadiusOLD(lens.getRadius());
                                                }
                                                else{
                                                    lens.setRadius(lens.getRadiusOLD());
                                                }

                                                map.fitBounds(lens.getBound());
                                                mapPressForCreation = false;
                                                correctSizelet = false;
                                            }

                                        }
                                    });
                                } else {
                                    lens.setRadiusFlag(false);
                                    map.fitBounds(lens.getBound());
                                    document.getElementsByClassName('myMoveButton')[0].style.visibility = "visible";
                                    document.getElementsByClassName('dropdown')[0].style.visibility = "visible";
                                    document.getElementsByClassName('myIntervalsButton')[0].style.visibility = "visible";
                                    document.getElementsByClassName('myDeleteButton')[0].style.visibility = "visible";
                                    document.getElementsByClassName('myRadiusButton')[0].style.backgroundColor = "#ff8400";
                                }
                                /*if(document.getElementById("sliderRadius").style.display=='none'){
                                    document.getElementsByClassName('myRadiusButton')[0].style.backgroundColor = "#ff0000";

                                    document.getElementById("sliderRadius").style.display="block";
                                    let $sliderRadius = $('#sliderRadius');
                                    $sliderRadius.mousedown( function (e){
                                        //TODO VELOCITY REMOVING BADLY??
                                        L.DomEvent.stopPropagation(e);
                                        map.dragging.disable();
                                        e.originalEvent.preventDefault();
                                    });
                                    $(function(){
                                        $("#sliderRadius").roundSlider({
                                            sliderType: "min-range",
                                            radius: "130px",
                                            value: lens.getRadius(),
                                            min: 50,
                                            max: 25000,
                                            //lineCap: "round",
                                            width: 5,
                                            handleSize: "+10",
                                            handleShape: "dot",
                                            tooltipFormat: function (e) {
                                                return e.value + "m";
                                            },
                                            drag: function (e) {
                                                L.DomEvent.stopPropagation(e);
                                                lens.setRadius(e.value); 
                                            },
                                            start: function(e) {
                                            },
                                            stop: function (e) {
                                                L.DomEvent.stopPropagation(e);
                                                map.dragging.enable();
                                                lens.updateLENS();
                                                lens.setBounds(lens.areaQuery.getBounds());
                                                for(i = 0; i < attLensesArray.length; i++){
                                                    attLensesArray[i].updateALL();
                                                };
                                                lens.setRadiusOLD(lens.getRadius());
                                            }
                                        });
                                    });
                                    
                                }
                                else{
                                    document.getElementById("sliderRadius").style.display="none";
                                    document.getElementsByClassName('myRadiusButton')[0].style.backgroundColor = "#ff8400";
                                }*/
                            }); 
                            $('.dropbtnOpt-default').click(function (e) {
                                L.DomEvent.stopPropagation(e);
                                lens.setType("Default");
                                document.getElementsByClassName('myIntervalsButton')[0].style.backgroundColor = "grey";
                                document.getElementsByClassName('dropbtnOpt-default')[0].style.backgroundColor = "#ff1144";
                                document.getElementsByClassName('dropbtnOpt-start')[0].style.backgroundColor = "buttonface";
                                document.getElementsByClassName('dropbtnOpt-end')[0].style.backgroundColor = "buttonface";
                                document.getElementsByClassName('dropbtnOpt-duration')[0].style.backgroundColor = "buttonface";
                                document.getElementsByClassName('dropbtnOpt-time')[0].style.backgroundColor = "buttonface";
                                document.getElementsByClassName('dropbtnOpt-length')[0].style.backgroundColor = "buttonface";
                                document.getElementsByClassName('dropbtnOpt-velocity')[0].style.backgroundColor = "buttonface";

                                lens.setMinV(0);
                                lens.setMaxV(0);
                                lens.updateLENS();
                                lens.setTypeOLD("Default");
                                lens.setMinVOLD(0);
                                lens.setMaxVOLD(0);
                            });
                            $('.dropbtnOpt-start').click(function (e) {
                                L.DomEvent.stopPropagation(e);
                                lens.setType("Start");
                                document.getElementsByClassName('myIntervalsButton')[0].style.backgroundColor = "grey";
                                document.getElementsByClassName('dropbtnOpt-default')[0].style.backgroundColor = "buttonface";
                                document.getElementsByClassName('dropbtnOpt-start')[0].style.backgroundColor = "#ff1144";
                                document.getElementsByClassName('dropbtnOpt-end')[0].style.backgroundColor = "buttonface";
                                document.getElementsByClassName('dropbtnOpt-duration')[0].style.backgroundColor = "buttonface";
                                document.getElementsByClassName('dropbtnOpt-time')[0].style.backgroundColor = "buttonface";
                                document.getElementsByClassName('dropbtnOpt-length')[0].style.backgroundColor = "buttonface";
                                document.getElementsByClassName('dropbtnOpt-velocity')[0].style.backgroundColor = "buttonface";
                                lens.setMinV(0);
                                lens.setMaxV(0);
                                lens.updateLENS();
                                lens.setTypeOLD("Start");
                                lens.setMinVOLD(0);
                                lens.setMaxVOLD(0);
                            });
                            $('.dropbtnOpt-end').click(function (e) {
                                L.DomEvent.stopPropagation(e);
                                lens.setType("End");
                                document.getElementsByClassName('myIntervalsButton')[0].style.backgroundColor = "grey";
                                document.getElementsByClassName('dropbtnOpt-default')[0].style.backgroundColor = "buttonface";
                                document.getElementsByClassName('dropbtnOpt-start')[0].style.backgroundColor = "buttonface";
                                document.getElementsByClassName('dropbtnOpt-end')[0].style.backgroundColor = "#ff1144";
                                document.getElementsByClassName('dropbtnOpt-duration')[0].style.backgroundColor = "buttonface";
                                document.getElementsByClassName('dropbtnOpt-time')[0].style.backgroundColor = "buttonface";
                                document.getElementsByClassName('dropbtnOpt-length')[0].style.backgroundColor = "buttonface";
                                document.getElementsByClassName('dropbtnOpt-velocity')[0].style.backgroundColor = "buttonface";
                                lens.setMinV(0);
                                lens.setMaxV(0);
                                lens.updateLENS();
                                lens.setTypeOLD("End");
                                lens.setMinVOLD(0);
                                lens.setMaxVOLD(0);
                            });
                            $('.dropbtnOpt-length').click(function (e) {
                                L.DomEvent.stopPropagation(e);
                                lens.setType("Length");
                                document.getElementsByClassName('myIntervalsButton')[0].style.backgroundColor = "#ff8400";
                                document.getElementsByClassName('dropbtnOpt-default')[0].style.backgroundColor = "buttonface";
                                document.getElementsByClassName('dropbtnOpt-start')[0].style.backgroundColor = "buttonface";
                                document.getElementsByClassName('dropbtnOpt-end')[0].style.backgroundColor = "buttonface";
                                document.getElementsByClassName('dropbtnOpt-duration')[0].style.backgroundColor = "buttonface";
                                document.getElementsByClassName('dropbtnOpt-time')[0].style.backgroundColor = "buttonface";
                                document.getElementsByClassName('dropbtnOpt-length')[0].style.backgroundColor = "#ff1144";
                                document.getElementsByClassName('dropbtnOpt-velocity')[0].style.backgroundColor = "buttonface";
                                lens.setMinV(1);
                                lens.setMaxV(500000);
                                lens.updateLENS();
                                lens.setTypeOLD("Length");
                                lens.setMinVOLD(1);
                                lens.setMaxVOLD(500000);
                            });
                            $('.dropbtnOpt-velocity').click(function (e) {
                                L.DomEvent.stopPropagation(e);
                                lens.setType("Vel_avg");
                                document.getElementsByClassName('myIntervalsButton')[0].style.backgroundColor = "#ff8400";
                                document.getElementsByClassName('dropbtnOpt-default')[0].style.backgroundColor = "buttonface";
                                document.getElementsByClassName('dropbtnOpt-start')[0].style.backgroundColor = "buttonface";
                                document.getElementsByClassName('dropbtnOpt-end')[0].style.backgroundColor = "buttonface";
                                document.getElementsByClassName('dropbtnOpt-duration')[0].style.backgroundColor = "buttonface";
                                document.getElementsByClassName('dropbtnOpt-time')[0].style.backgroundColor = "buttonface";
                                document.getElementsByClassName('dropbtnOpt-length')[0].style.backgroundColor = "buttonface";
                                document.getElementsByClassName('dropbtnOpt-velocity')[0].style.backgroundColor = "#ff1144";
                                lens.setMinV(0);
                                lens.setMaxV(250);
                                lens.updateLENS();
                                lens.setTypeOLD("Vel_avg");
                                lens.setMinVOLD(0);
                                lens.setMaxVOLD(250);
                            });
                            $('.dropbtnOpt-time').click(function (e) {
                                L.DomEvent.stopPropagation(e);
                                lens.setType("Time_Interval");
                                document.getElementsByClassName('myIntervalsButton')[0].style.backgroundColor = "#ff8400";
                                document.getElementsByClassName('dropbtnOpt-default')[0].style.backgroundColor = "buttonface";
                                document.getElementsByClassName('dropbtnOpt-start')[0].style.backgroundColor = "buttonface";
                                document.getElementsByClassName('dropbtnOpt-end')[0].style.backgroundColor = "buttonface";
                                document.getElementsByClassName('dropbtnOpt-duration')[0].style.backgroundColor = "buttonface";
                                document.getElementsByClassName('dropbtnOpt-time')[0].style.backgroundColor = "#ff1144";
                                document.getElementsByClassName('dropbtnOpt-length')[0].style.backgroundColor = "buttonface";
                                document.getElementsByClassName('dropbtnOpt-velocity')[0].style.backgroundColor = "buttonface";
                                lens.setMinV(1201959044);
                                lens.setMaxV(1202492358);
                                lens.updateLENS();
                                lens.setTypeOLD("Time_Interval");
                                lens.setMinVOLD(1201959044);
                                lens.setMaxVOLD(1202492358);
                            });
                            $('.dropbtnOpt-duration').click(function (e) {
                                L.DomEvent.stopPropagation(e);
                                lens.setType("Time_Duration");
                                document.getElementsByClassName('myIntervalsButton')[0].style.backgroundColor = "#ff8400";
                                document.getElementsByClassName('dropbtnOpt-default')[0].style.backgroundColor = "buttonface";
                                document.getElementsByClassName('dropbtnOpt-start')[0].style.backgroundColor = "buttonface";
                                document.getElementsByClassName('dropbtnOpt-end')[0].style.backgroundColor = "buttonface";
                                document.getElementsByClassName('dropbtnOpt-duration')[0].style.backgroundColor = "#ff1144";
                                document.getElementsByClassName('dropbtnOpt-time')[0].style.backgroundColor = "buttonface";
                                document.getElementsByClassName('dropbtnOpt-length')[0].style.backgroundColor = "buttonface";
                                document.getElementsByClassName('dropbtnOpt-velocity')[0].style.backgroundColor = "buttonface";
                                lens.setMinV(0);
                                lens.setMaxV(85839);
                                lens.updateLENS();
                                lens.setTypeOLD("Time_Duration");
                                lens.setMinVOLD(0);
                                lens.setMaxVOLD(85839);
                            });  
         
                        }
                    }); 
                  
                }
            });
            return lens;
        }
        
        function createALens(lngLat, radiusQuery, _attribute, _encoding){
            let lens = { 
                areaQuery : L.circle([lngLat.lat, lngLat.lng], {
                    color: 'DarkRed',
                    fillColor: 'red',
                    fillOpacity: 0.6,
                    radius: radiusQuery,
                    pane: 'lensPane'
                }).addTo(lensesLayer),
                outsideCircle : null,
                lngLat : lngLat,
                radiusQuery : radiusQuery,
                radiusQueryOLD : radiusQuery,
                lID : null,
                att : _attribute,
                enc : _encoding,
                intersections: [],
                overallArea : null,
                hasBeenOpacity: false,
                areas: [],
                opacityLensArray: [],
                bounds : null,
                radiusChangeFlag: false,
                getRadiusFlag(){
                    return this.radiusChangeFlag;
                },
                setRadiusFlag(value){
                    if(value == true || value == false)
                        this.radiusChangeFlag = value;
                },
                setRadiusOLD : function (value){
                    this.radiusQueryOLD = value;
                },
                getRadiusOLD : function (){
                    return this.radiusQueryOLD;
                },
                addIntersection: function (obj){
                    this.intersections.push(obj);
                },
                removeIntersection: function (obj){
                    for(let i = this.intersections.length - 1; i >= 0; i--) {
                        if(this.intersections[i] === obj) {
                            this.intersections.splice(i, 1);
                            return true;
                        }
                    }
                    return false;
                },
                addArea: function (obj){
                    this.areas.push(obj);
                },
                removeArea: function (obj){
                    for(let i = this.areas.length - 1; i >= 0; i--) {
                        if(this.areas[i] === obj) {
                            this.areas.splice(i, 1);
                            return true;
                        }
                    }
                    return false;
                },
                setLngLat : function (value){
                    this.lngLat = value;
                },
                setBounds : function (value){
                    this.bounds = value;
                },
                setlID : function (value){
                    this.lID = value;
                },
                getLngLat : function (){
                    return this.lngLat;
                },
                getBound : function (){
                    return this.bounds;
                },
                getlID : function (){
                    return this.lID;
                },
                setOutsideCircle: function(circle){
                    this.outsideCircle = circle;
                },
                setRadius : function (value){
                    this.areaQuery.setRadius(value);
                    this.radiusQuery = value;
                },
                getRadius : function (){
                    return this.radiusQuery;
                },
                addOpacityLens : function(opacLens){
                    this.opacityLensArray.push(opacLens);
                    for(let i = this.areas.length - 1; i >= 0; i--) {
                        this.areas[i].opacityLensArray = Array.from(this.opacityLensArray);
                    }
                },
                removeOpacityLens : function(opacLens){
                    for(let i = this.opacityLensArray.length - 1; i >= 0; i--) {
                        if(this.opacityLensArray[i] === opacLens) {
                            this.opacityLensArray.splice(i, 1);
                        }
                    }
                    for(let j = this.areas.length - 1; j >= 0; j--) {
                        this.areas[j].opacityLensArray = Array.from(this.opacityLensArray);
                    }
                },
                colorSuccess : function() {
                    //if(_attribute == "length"){
                    console.log("I will now paint the Pass by circle again ....")
                    this.areaQuery.setStyle({color: '#FFFFFF', fillColor: '#FFFFFF', fillOpacity: 0.01});
                    
                },
                updateLayer : function(layer, value){
                    //let layersActive = layersWithin(map, layer, lngLat, pixelsInRadius)
                    //TODO
                    switch(this.att) {
                        case "length":
                            lengthAtt(layer, value,this.enc);
                            break;
                        case "duration":
                            durationAtt(layer,value, this.enc);
                            break;
                        case "velocity":
                            velocityAtt(layer,value,this.enc);
                            break;
                        case "time":
                            timeAtt(layer,value, this.enc);
                            break;
                    }   
                },
                addIntersections : function(){
                    for(i=0; i< attLensesArray.length;i++){
                        if(this.areaQuery.getBounds().intersects(attLensesArray[i].areaQuery.getBounds())){
                            this.addIntersection(attLensesArray[i]);
                        }
                    }
                    attLensesArray.push(this);
                },
                createAreas : function(){
                    this.overallArea = null;
                    this.intersections.splice(0,this.intersections.length);
                    this.addIntersections();
                    let radius = this.getRadius()/1000;
                    let options = {steps: 32,units: 'kilometers'};
                    let circle = turf.circle([this.getLngLat().lng, this.getLngLat().lat], radius, options);
                    this.overallArea = circle;
                    let firstArea = creaAttAreas(circle);
                    firstArea.addLens(this);
                    this.addArea(firstArea);
                    let areaCounnt =1;
                    let numberOfAreasVisited = 0;
                    let thisVar = this;
                    recursiveArea(thisVar, this.intersections.length - 1, 0);
                    
                   
                    return thisVar;
                },
                createLayers : function(){
                    this.areas.forEach(function(eachArea, index, array) {
                        eachArea.createLayers();
                    });
                    this.colorSuccess();
                },
                updateALL : function (){
                    //TODO CHAMAR ARRAY DE TRAS PARA A FRENTE PARA NAO TER DE FAZER VERIFICACOES  
                    this.deleteLayers();
                    /*this.updateOthersV2(false);
                    this.createAreas();*/
                    this.createLayers();
                },
                updateLENS : function(attORenc , value){
                    //Will check if any of the lenses if any of the intersections has an area wich recieves the styling from it
                    //True for attriute
                    if(attORenc){
                        this.att = value;
                    }
                    //False for encoding
                    else{
                        this.enc = value;
                    }
                    this.areas.forEach( function(item,index,array){
                        console.log(item.getlID());
                        if(item.getlID() != null){
                            item.updateLayer();
                        }
                    });
                    let foundMyself = false;
                    console.log(attLensesArray);
                    for(let i = 0;i<attLensesArray.length ;i++) {
                        console.log("I entered the array");
                        console.log(attLensesArray[i]);
                        if(attLensesArray[i] === this) {
                            console.log("Found the lens");
                            foundMyself = true;
                        }
                        else if(foundMyself){
                            for(let j = 0; j < attLensesArray[i].intersections.length; j++) {
                                if(attLensesArray[i].intersections[j] === this){
                                    if(attORenc){
                                        attLensesArray[i].intersections[j].att = value;
                                    }
                                    //False for encoding
                                    else{
                                        attLensesArray[i].intersections[j].enc = value;
                                    }
                                    attLensesArray[i].areas.forEach( function(item,index,array){
                                        console.log(item)
                                        console.log(item.getlID())
                                        item.updateLayer();
                                    });
                                }
                            }
                        }

                    }
                    
                },
                delete: function(){
                    for(let areaIndex = this.areas.length - 1;areaIndex>=0; areaIndex--){
                        this.areas[areaIndex].delete();  
                    }
                    this.areas.splice(0,this.areas.length);
                    console.log(this.areas.length);
                },
                deleteLayers: function(){
                    for(let areaIndex = this.areas.length - 1;areaIndex>=0; areaIndex--){
                        this.areas[areaIndex].delete();
                    }
                },
                removeOpacityArray: function(){
                    for(let i = attOPACITYLensesArray.length - 1; i >= 0; i--) {
                            if(attOPACITYLensesArray[i] === this) {
                                attOPACITYLensesArray.splice(i, 1);
                                console.log(attOPACITYLensesArray);
                                break;
                            }
                    }
                },
                removeFromAttLen : function(){
                    for(let i = attLensesArray.length - 1; i >= 0; i--) {
                        if(attLensesArray[i] === this) {
                            attLensesArray.splice(i, 1);
                            console.log(attLensesArray);
                            break;
                        }
                    }    
                },
                updateOthersV2 : function( onlyRemoveInter ){
                    //true if areas need to e updated
                    this.removeFromAttLen();
                    if(this.enc == "opacity"){
                        this.removeOpacityArray();
                    }
                    for(i = 0; i<attLensesArray.length; i++){
                        console.log(attLensesArray[i]);
                        if(attLensesArray[i].removeIntersection(this)) {
                            if(onlyRemoveInter){
                                for(let areaIndex = 1;areaIndex < attLensesArray[i].areas.length; areaIndex++){
                                    let flag = attLensesArray[i].areas[areaIndex].removeLens(this);
                                    console.log(flag);
                                }
                                for(let areaIndex = 1;areaIndex < attLensesArray[i].areas.length; areaIndex++){
                                    if(attLensesArray[i].areas[areaIndex].getLensArray().length == 1){
                                        //IF ERROR APPEArS WHERE SOME PARTS ARE somewhat forgotten it might mean that splice allows for a jump?
                                        console.log("AGORA VOU MOSTRAR Os ARRAYs a JUNTAR");
                                        console.log(attLensesArray[i].areas[0].area);
                                        console.log(attLensesArray[i].areas[areaIndex].area);
                                        console.log("Before union");
                                        let unionlet = turf.union(attLensesArray[i].areas[0].area, attLensesArray[i].areas[areaIndex].area);
                                        console.log("After union");
                                        attLensesArray[i].areas[0].setArea(unionVar);
                                        attLensesArray[i].areas[areaIndex].delete();
                                        attLensesArray[i].areas[0].delete();
                                        attLensesArray[i].areas.splice(areaIndex, 1);
                                        attLensesArray[i].areas[0].createLayers();
                                    }
                                    else{
                                        for(let ind = 1;ind < attLensesArray[i].areas.length; ind++){
                                            if(areaIndex != ind) {  

                                                if(isEqual(attLensesArray[i].areas[areaIndex].getLensArray(),attLensesArray[i].areas[ind].getLensArray())){
                                                    console.log("isEQUAL ALRIGHTY");
                                                    console.log(attLensesArray[i].areas[ind].getLensArray());
                                                    console.log(attLensesArray[i].areas[areaIndex].getLensArray());
                                                    console.log("Before union");
                                                    let unionlet = turf.union(attLensesArray[i].areas[ind].area, attLensesArray[i].areas[areaIndex].area);
                                                    console.log("After union");
                                                    attLensesArray[i].areas[ind].setArea(unionVar);
                                                    attLensesArray[i].areas[areaIndex].delete();
                                                    attLensesArray[i].areas[ind].delete();
                                                    attLensesArray[i].areas.splice(areaIndex, 1);
                                                    attLensesArray[i].areas[ind].createLayers();
                                                }
                                            }
                                        }
                                        
                                    }
                                    
                                }
                            }
                        }
                    }
                }
            };

            lens.setBounds(lens.areaQuery.getBounds());
           
            //CALCULATE THE DISTANCE FROM ONE POINT TO ANOTHER IN PIXELS
            
            
            lens.areaQuery.on({
                dbclick:function(e){
                    L.DomEvent.stopPropagation(e);
                },
                click: function(clickEven){
                    L.DomEvent.stopPropagation(clickEven);
                    createQueryLensesFlag = false;
                    createAttributeLensesFlag = false;
                    container1.style.backgroundColor = 'white'; 
                    container2.style.backgroundColor = 'white';
                    outterLensesLayer.clearLayers();
                    clicked = true;
                    let once = true;
                    map.fitBounds(lens.getBound());
                    
                    
                    map.on('moveend', function(ev) {
                        
                        if(clicked && once){
                            once = false;
                            console.log("Im on the move event again...");
                            L.DomEvent.stopPropagation(ev);
                            
                                // code stuff
                            let northVar = map.latLngToLayerPoint(lens.areaQuery.getBounds().getNorthWest());
                            let southVar = map.latLngToLayerPoint(lens.areaQuery.getBounds().getSouthWest());
                            let numOfPixl = northVar.distanceTo(southVar);
                            let myOutsideCircle = L.divIcon({className: 'outside-Circle', iconSize: [numOfPixl,numOfPixl], html: 
                                "<button class='myDeleteButton' style='z-index: 1000;position: fixed;margin-top: 2%;margin-left: 12.5%;'><img src='images/trash.png' style='width: 85%; height: 80%;'></button>"+
                                "<div class='dropdown' style='z-index: 1019; position:fixed;margin-left: 76.5%;margin-top: 2%;'><button class='dropbtn'><img src='images/attribute.png' style='width: 150%;height: 150%;margin: -25%;'></button><div class='dropdown-content'>" + //<span class='explanation' style='color:white;margin: 30%;'> "+capitalizeFirstLetter(lens.att)+"</span>
                                "<button class='dropbtnOpt-length'>Length</button>"+
                                "<button class='dropbtnOpt-velocity'>Velocity</button>"+
                                "<button class='dropbtnOpt-time'>Time</button>"+
                                "<button class='dropbtnOpt-duration'>Duration</button>"+
                                "</div></div>" +
                                "<div class='dropdown'style='z-index: 1019; position:fixed;margin-left: 96%;margin-top: 24%;'><button class='dropbtn'><img src='images/encoding.png' style='width: 150%;height: 150%;margin: -25%;'></button><div class='dropdown-content'>" + //<span class='explanation' style='color:white;margin: 28%;'> "+capitalizeFirstLetter(lens.enc)+"</span>
                                "<button class='dropbtnOpt-color'>Color</button>"+
                                "<button class='dropbtnOpt-width'>Width</button>"+
                                "<button class='dropbtnOpt-brightness'>Brightness</button>"+
                                "<button class='dropbtnOpt-opacity'>Opacity</button>"+
                                "</div></div>" +
                                "<button class='myRadiusButton' style='margin-left: 89%;margin-top: 82.5%;position: static;'><img src='images/radius.png' style='z-index: 999;width: 150%;height: 150%;margin: inherit;margin-left: -3px;margin-top: -4px;'><span class='explanation' style='color:white;margin: -50%;'> \n"+lens.getRadius().toFixed(0)+"meters</span></button>"+
                                "<button class='myMoveButton' style='margin-left: 77%;margin-top: 5%;position: static;'><img src='images/move.png' style='    z-index: 999; width: 190%; height: 190%; margin: inherit; margin-left: -48%;margin-top: -43%;'></button>"+
                                "<div id='sliderRadius' align='center' style='z-index:1018;    position: absolute;    top: 32%;left: 32%;transform: translate(-50%, -50%)display:none;'></div>"
                                //"<div class='dropdown'style='margin-left: 102.5%; margin-top: 75%;'><button class='dropbtn'><img src='images/encoding.png' style='width: 15px; height: 17px;'></button><div class='dropdown-content'>"
                            });
                            let outsideCircVar = L.marker(lens.getLngLat(), {icon: myOutsideCircle, pane: 'outtterLensPane'});
                            lens.setOutsideCircle(outsideCircVar);
                            
                            outterLensesLayer.addLayer(lens.outsideCircle);
                            
                            if(lens.att == "length")
                                document.getElementsByClassName('dropbtnOpt-length')[0].style.backgroundColor = "#ff1144";
                            else if(lens.att == "velocity")
                                document.getElementsByClassName('dropbtnOpt-velocity')[0].style.backgroundColor = "#ff1144";
                            else if(lens.att == "time")
                                document.getElementsByClassName('dropbtnOpt-time')[0].style.backgroundColor = "#ff1144";
                            else
                                document.getElementsByClassName('dropbtnOpt-duration')[0].style.backgroundColor = "#ff1144";
                            
                            if (lens.enc == "color")
                                document.getElementsByClassName('dropbtnOpt-color')[0].style.backgroundColor = "#ff1144";
                            else if (lens.enc == "width")
                                document.getElementsByClassName('dropbtnOpt-width')[0].style.backgroundColor = "#ff1144";
                            else if (lens.enc == "brightness")
                                document.getElementsByClassName('dropbtnOpt-brightness')[0].style.backgroundColor = "#ff1144";
                            else
                                document.getElementsByClassName('dropbtnOpt-opacity')[0].style.backgroundColor = "#ff1144";
                            
                            $('.myDeleteButton').click(function (e) {
                                L.DomEvent.stopPropagation(e); 
                                clicked= false;
                                outterLensesLayer.removeLayer(lens.outsideCircle);
                                lensesLayer.removeLayer(lens.areaQuery);
                                
                                lens.delete();
                                lens.updateOthersV2(true);
                                if(lens.hasBeenOpacity){
                                    attLensArrayToServer();
                                    for(let j = 0; j < lens.intersections.length; j++){
                                        lens.intersections[j].removeOpacityLens(lens);
                                        for(let i = 0; i < lens.intersections[j].areas.length; i++){
                                            lens.intersections[j].areas[i].delete();
                                            lens.intersections[j].areas[i].createLayers();
                                        }
                                    }
                                    
                                }
                                
                            });
                            $('.myMoveButton').click(function (e) {
                                L.DomEvent.stopPropagation(e); 
                                lensCanMove = !lensCanMove;
                                if(lensCanMove){
                                    map.zoomOut(1,true);
                                    document.getElementsByClassName('myMoveButton')[0].style.backgroundColor = "#ff0000";
                                    document.getElementsByClassName('myRadiusButton')[0].style.visibility = "hidden";
                                    document.getElementsByClassName('dropdown')[0].style.visibility = "hidden";
                                    document.getElementsByClassName('dropdown')[1].style.visibility = "hidden";
                                    document.getElementsByClassName('myDeleteButton')[0].style.visibility = "hidden";
                                }
                                else{
                                    map.fitBounds(lens.getBound());
                                    document.getElementsByClassName('myMoveButton')[0].style.backgroundColor = "#ff8400";
                                    document.getElementsByClassName('myRadiusButton')[0].style.visibility = "visible";
                                    document.getElementsByClassName('dropdown')[0].style.visibility = "visible";
                                    document.getElementsByClassName('dropdown')[1].style.visibility = "visible";
                                    document.getElementsByClassName('myDeleteButton')[0].style.visibility = "visible";
                                }
                                let mouseDown = false;
                                lens.outsideCircle.on({
                                    dbclick:function(e){
                                        L.DomEvent.stopPropagation(e);
                                    },
                                    click : function(e){
                                        L.DomEvent.stopPropagation(e);
                                    },
                                    mousedown: function (event) {
                                        L.DomEvent.stopPropagation(event);
                                        mouseDown = true;
                                        notClickedLens = false;
                                         
                                        
                                        map.on('mousemove', function (e) {
                                            document.getElementsByClassName('myMoveButton')[0].style.visibility = "hidden";
                                            createQueryLensesFlag = false;
                                            createAttributeLensesFlag = false;
                                            container1.style.backgroundColor = 'white'; 
                                            container2.style.backgroundColor = 'white';
                                            L.DomEvent.stopPropagation(e);
                                            if(lensCanMove && mouseDown){
                                                
                                                if(!(moved)){
                                                    
                                                    lens.delete();
                                                    lens.updateOthersV2(true);
                                                    if(lens.hasBeenOpacity){
                                                        for(let j = 0; j < lens.intersections.length; j++){
                                                            lens.intersections[j].removeOpacityLens(lens);
                                                            for(let i = 0; i < lens.intersections[j].areas.length; i++){
                                                                lens.intersections[j].areas[i].delete();
                                                                lens.intersections[j].areas[i].createLayers();
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                map.dragging.disable();
                                                moved = true;
                                                lens.areaQuery.setLatLng(e.latlng);
                                                lens.outsideCircle.setLatLng(e.latlng);
                                                lens.lngLat = e.latlng;
                                                lens.setBounds(lens.areaQuery.getBounds());
                                                map.panInside(lens.getLngLat(),{padding:[200,200],duration:0.3});
                                            }
                                        });
                                    },
                                    mouseup: function(e){
                                        mouseDown = false;
                                        L.DomEvent.stopPropagation(e);
                                        
                                        document.getElementsByClassName('myMoveButton')[0].style.visibility = "visible"; 
                                        if(lensCanMove){
                                            map.removeEventListener('mousemove');
                                            if(moved){ 
                                                moved = false;   
                                                map.dragging.enable();
                                                
                                                //lens.delete();

                                
                                                lens.createAreas();
                                                console.log(lens.hasBeenOpacity)
                                                if(lens.hasBeenOpacity){
                                                    console.log(attOPACITYLensesArray);
                                                    if(lens.enc != "opacity"){
                                                        lens.hasBeenOpacity = false;
                                                    }
                                                    else{
                                                        attOPACITYLensesArray.push(lens);
                                                        for(let j = 0; j < lens.intersections.length; j++){
                                                            lens.intersections[j].addOpacityLens(lens);
                                                            for(let i = 0; i < lens.intersections[j].areas.length; i++){
                                                                lens.intersections[j].areas[i].delete();
                                                                lens.intersections[j].areas[i].createLayers();
                                                            }
                                                        }
                                                    }
                                                    
                                                    attLensArrayToServer();
                                                }
                                                //lens.createLayers();
                                                lens.setBounds(lens.areaQuery.getBounds());

                                            }
                                        }
                                    },
                                    mouseout:function(){
                                        console.log("Bellow is the attLensesArray");
                                        console.log(attLensesArray);
                                        //outterLensesLayer.removeLayer(lens.outsideCircle);
                                        
                                    }
                                });
                            });
                            $('.myRadiusButton').click(function (ev) {
                                L.DomEvent.stopPropagation(ev);
                                changeRadius = !changeRadius;
                                
                                if(changeRadius){
                                    lens.setRadiusFlag(true);
                                    map.zoomOut(1, true);
                                    document.getElementsByClassName('myMoveButton')[0].style.visibility = "hidden";
                                    document.getElementsByClassName('dropdown')[0].style.visibility = "hidden";
                                    document.getElementsByClassName('dropdown')[1].style.visibility = "hidden";
                                    document.getElementsByClassName('myDeleteButton')[0].style.visibility = "hidden";

                                    document.getElementsByClassName('myRadiusButton')[0].style.backgroundColor = "#ff0000";
                                    map.on({
                                        click: function(e){
                                            L.DomEvent.stopPropagation(e);
                                            mapPressForCreation = false;
                                            correctSizelet = false;
                                        },
                                        mousedown: function (e) {
                                            L.DomEvent.stopPropagation(e);

                                            if(changeRadius){    
                                                let from = turf.point([lens.getLngLat().lat,lens.getLngLat().lng]);
                                                let optionsCreateCirc = {units: 'kilometers'};
                                                let once = true;
                                                mapPressForCreation = true;
                                                map.on('mousemove', function (event) {
                                                    if(lens.getRadiusFlag()){

                                                        L.DomEvent.stopPropagation(event);
                                                        if(once){
                                                            lens.delete();
                                                            lens.updateOthersV2(true);
                                                            if(lens.hasBeenOpacity){
                                                                for(let j = 0; j < lens.intersections.length; j++){
                                                                    lens.intersections[j].removeOpacityLens(lens);
                                                                    for(let i = 0; i < lens.intersections[j].areas.length; i++){
                                                                        lens.intersections[j].areas[i].delete();
                                                                        lens.intersections[j].areas[i].createLayers();
                                                                    }
                                                                }
                                                            }
                                                            once = false;
                                                        }
                                                        if (mapPressForCreation && changeRadius) {

                                                            map.dragging.disable();

                                                            let to = turf.point([event.latlng.lat, event.latlng.lng]);

                                                            let distance = turf.distance(from, to, optionsCreateCirc);
                                                            radiusValue = distance * 1000;
                                                            if (radiusValue >= 50 && radiusValue <= 25000) {
                                                                correctSizelet = true;
                                                                lens.colorSuccess();
                                                                lens.setRadius(radiusValue);
                                                            } else {
                                                                correctSizelet = false;
                                                                lens.areaQuery.setStyle({fillColor: 'DarkRed',color:'red'});
                                                            }
                                                        }
                                                        else
                                                            console.log("Mouse down but flags are false :S");
                                                    }
                                                });
                                            }
                                        },
                                        mouseup: function (e) {
                                            L.DomEvent.stopPropagation(e);
                                            map.removeEventListener('mousemove');
                                            map.dragging.enable();
                                            if(changeRadius && lens.getRadiusFlag()){
                                                
                                                console.log(correctSizeVar);
                                                if (mapPressForCreation,correctSizeVar) {
                                                    

                                                    lens.createAreas();
                                                    if(lens.hasBeenOpacity){
                                                        console.log("EPA FDS FUNCIONA CARALHO")
                                                        if(lens.enc != "opacity"){
                                                            lens.hasBeenOpacity = false;
                                                        }
                                                        else{
                                                            attOPACITYLensesArray.push(lens);
                                                            for(let j = 0; j < lens.intersections.length; j++){
                                                                lens.intersections[j].addOpacityLens(lens);
                                                                for(let i = 0; i < lens.intersections[j].areas.length; i++){
                                                                    lens.intersections[j].areas[i].delete();
                                                                    lens.intersections[j].areas[i].createLayers();
                                                                }
                                                            }
                                                        }
                                                        attLensArrayToServer();
                                                    }
                                                    lens.setBounds(lens.areaQuery.getBounds());
                                                    
                                                    lens.setRadiusOLD(lens.getRadius());
                                                }
                                                else{
                                                    lens.setRadius(lens.getRadiusOLD());
                                                }

                                                map.fitBounds(lens.getBound());
                                                mapPressForCreation = false;
                                                correctSizelet = false;
                                            }

                                        }
                                    });
                                } else {
                                    lens.setRadiusFlag(false);
                                    map.fitBounds(lens.getBound());
                                    document.getElementsByClassName('myMoveButton')[0].style.visibility = "visible";
                                    document.getElementsByClassName('dropdown')[0].style.visibility = "visible";
                                    document.getElementsByClassName('dropdown')[1].style.visibility = "visible";
                                    document.getElementsByClassName('myDeleteButton')[0].style.visibility = "visible";
                                    document.getElementsByClassName('myRadiusButton')[0].style.backgroundColor = "#ff8400";
                                }
                            }); 
                            $('.dropbtnOpt-length').click(function (e) {
                                L.DomEvent.stopPropagation(e);
                                //lens.updateOthers();
                                lens.updateLENS(true,"length");
                                //document.getElementsByClassName('explanation')[0].innerText=capitalizeFirstLetter(lens.att);
                                document.getElementsByClassName('dropbtnOpt-length')[0].style.backgroundColor = "#ff1144";                        
                                document.getElementsByClassName('dropbtnOpt-velocity')[0].style.backgroundColor = "buttonface";                                
                                document.getElementsByClassName('dropbtnOpt-time')[0].style.backgroundColor = "buttonface";                            
                                document.getElementsByClassName('dropbtnOpt-duration')[0].style.backgroundColor = "buttonface";
                            });
                            $('.dropbtnOpt-velocity').click(function (e) {
                                L.DomEvent.stopPropagation(e);
                                //lens.updateOthers();
                                lens.updateLENS(true,"velocity");
                                //document.getElementsByClassName('explanation')[0].innerText=capitalizeFirstLetter(lens.att);
                                document.getElementsByClassName('dropbtnOpt-length')[0].style.backgroundColor = "buttonface";                        
                                document.getElementsByClassName('dropbtnOpt-velocity')[0].style.backgroundColor = "#ff1144";                                
                                document.getElementsByClassName('dropbtnOpt-time')[0].style.backgroundColor = "buttonface";                            
                                document.getElementsByClassName('dropbtnOpt-duration')[0].style.backgroundColor = "buttonface";
                            });
                            $('.dropbtnOpt-time').click(function (e) {
                                L.DomEvent.stopPropagation(e);
                                //lens.updateOthers();
                                //lens.att = "time"
                                lens.updateLENS(true,"time");
                                //document.getElementsByClassName('explanation')[0].innerText=capitalizeFirstLetter(lens.att);
                                document.getElementsByClassName('dropbtnOpt-length')[0].style.backgroundColor = "buttonface";                        
                                document.getElementsByClassName('dropbtnOpt-velocity')[0].style.backgroundColor = "buttonface";                                
                                document.getElementsByClassName('dropbtnOpt-time')[0].style.backgroundColor = "#ff1144";                            
                                document.getElementsByClassName('dropbtnOpt-duration')[0].style.backgroundColor = "buttonface";
                            });
                            $('.dropbtnOpt-duration').click(function (e) {
                                L.DomEvent.stopPropagation(e);
                                //lens.updateOthers();
                                //lens.att = "duration"
                                lens.updateLENS(true,"duration");
                                //document.getElementsByClassName('explanation')[0].innerText=capitalizeFirstLetter(lens.att);
                                document.getElementsByClassName('dropbtnOpt-length')[0].style.backgroundColor = "buttonface";                        
                                document.getElementsByClassName('dropbtnOpt-velocity')[0].style.backgroundColor = "buttonface";                                
                                document.getElementsByClassName('dropbtnOpt-time')[0].style.backgroundColor = "buttonface";                            
                                document.getElementsByClassName('dropbtnOpt-duration')[0].style.backgroundColor = "#ff1144";
                            });
                            $('.dropbtnOpt-color').click(function (e) {
                                L.DomEvent.stopPropagation(e);
                                //lens.updateOthers();
                                //lens.enc = "color"
                                if(lens.enc == "opacity"){
                                    lens.removeOpacityArray();
                                    for(let j = 0; j < lens.intersections.length; j++){
                                        lens.intersections[j].removeOpacityLens(lens);  
                                    }
                                }
                                lens.updateLENS(false,"color");
                                //document.getElementsByClassName('explanation')[1].innerText=capitalizeFirstLetter(lens.enc);
                                document.getElementsByClassName('dropbtnOpt-color')[0].style.backgroundColor = "#ff1144";             
                                document.getElementsByClassName('dropbtnOpt-width')[0].style.backgroundColor = "buttonface";                              
                                document.getElementsByClassName('dropbtnOpt-brightness')[0].style.backgroundColor = "buttonface";                              
                                document.getElementsByClassName('dropbtnOpt-opacity')[0].style.backgroundColor = "buttonface";
                            });
                            $('.dropbtnOpt-width').click(function (e) {
                                L.DomEvent.stopPropagation(e);
                                //lens.updateOthers();
                                //lens.enc = "width"
                                if(lens.enc == "opacity"){
                                    lens.removeOpacityArray();
                                    for(let j = 0; j < lens.intersections.length; j++){
                                        lens.intersections[j].removeOpacityLens(lens);  
                                    }
                                }
                                lens.updateLENS(false,"width");
                                //document.getElementsByClassName('explanation')[1].innerText=capitalizeFirstLetter(lens.enc);
                                document.getElementsByClassName('dropbtnOpt-color')[0].style.backgroundColor = "buttonface";             
                                document.getElementsByClassName('dropbtnOpt-width')[0].style.backgroundColor = "#ff1144";                              
                                document.getElementsByClassName('dropbtnOpt-brightness')[0].style.backgroundColor = "buttonface";                              
                                document.getElementsByClassName('dropbtnOpt-opacity')[0].style.backgroundColor = "buttonface";
                            });
                            $('.dropbtnOpt-brightness').click(function (e) {
                                L.DomEvent.stopPropagation(e);
                                //lens.updateOthers();
                                //lens.enc = "brightness"
                                if(lens.enc == "opacity"){
                                    for(let j = 0; j < lens.intersections.length; j++){
                                        lens.intersections[j].removeOpacityLens(lens);  
                                    }
                                    lens.removeOpacityArray();
                                }
                                lens.updateLENS(false,"brightness");
                                //document.getElementsByClassName('explanation')[1].innerText=capitalizeFirstLetter(lens.enc);
                                document.getElementsByClassName('dropbtnOpt-color')[0].style.backgroundColor = "buttonface";             
                                document.getElementsByClassName('dropbtnOpt-width')[0].style.backgroundColor = "buttonface";                              
                                document.getElementsByClassName('dropbtnOpt-brightness')[0].style.backgroundColor = "#ff1144";                              
                                document.getElementsByClassName('dropbtnOpt-opacity')[0].style.backgroundColor = "buttonface";
                            });
                            $('.dropbtnOpt-opacity').click(async function (e) {
                                L.DomEvent.stopPropagation(e);
                                //lens.updateOthers();
                                //lens.enc = "opacity"
                                
                                //document.getElementsByClassName('explanation')[1].innerText=capitalizeFirstLetter(lens.enc);
                                document.getElementsByClassName('dropbtnOpt-color')[0].style.backgroundColor = "buttonface";             
                                document.getElementsByClassName('dropbtnOpt-width')[0].style.backgroundColor = "buttonface";                              
                                document.getElementsByClassName('dropbtnOpt-brightness')[0].style.backgroundColor = "buttonface";                              
                                document.getElementsByClassName('dropbtnOpt-opacity')[0].style.backgroundColor = "#ff1144";
                                console.log(attLensesArray)
                                console.log(lens.hasBeenOpacity);
                                attOPACITYLensesArray.push(lens);
                                if(!lens.hasBeenOpacity){
                                    lens.hasBeenOpacity = true;

                                    console.log("Here is opc Array")
                                    console.log(attOPACITYLensesArray);
                                    attLensArrayToServer();
                                    
                                    
                                    for(let j = 0; j < lens.intersections.length; j++){
                                        lens.intersections[j].addOpacityLens(lens);
                                        for(let i = 0; i < lens.intersections[j].areas.length; i++){
                                            lens.intersections[j].areas[i].delete();
                                            lens.intersections[j].areas[i].createLayers();
                                        }
                                    }
                                }
                                
                                lens.updateLENS(false,"opacity");
                                
                            }); 
                            
                        }     
                    });
                   
                }
                 
            }); 
            console.log(attLensesArray);
            return lens
        }

        function creaAttAreas(areaOfQuery){
            let attLayer = L.featureGroup({pane: 'attLensPane'}).addTo(attLenResults);
                    
                   
            let areaObj = {
                area:areaOfQuery,
                lensArray: [],
                lID:attLayer._leaflet_id,
                opacityLensArray: [],
                setArea: function(newValue){

                    //this.area = turf.clone(newValue);
                    this.area = newValue;
                },
                addLens: function (obj){
                    this.lensArray.push(obj);
                },
                removeLens: function (obj){
                    for(let i = this.lensArray.length - 1; i >= 0; i--) {
                        if(this.lensArray[i] === obj) {
                            this.lensArray.splice(i, 1);
                            return true;
                        }
                    }
                    return false;
                },
                setlID : function(value){
                    this.lID = value;
                },
                getlID : function(){
                    return this.lID;
                },
                getLensArray : function(){
                    return this.lensArray;
                },
                createLayers : function(){
                    let areasArrayIntersections = [];
                    this.opacityLensArray.forEach(function(arrayElement){
                        arrayElement.areas.forEach(function (areasElement){
                            areasArrayIntersections.push(areasElement.area.geometry);
                        })
                        
                    })
                    let _attLayer = L.featureGroup({pane: 'attLensPane'}).addTo(attLayer);
                    let _attLayer1 = L.featureGroup({pane: 'attLensPane'}).addTo(attLayer);
                    let _attLayer2 = L.featureGroup({pane: 'attLensPane'}).addTo(attLayer);
                    let _attLayer3 = L.featureGroup({pane: 'attLensPane'}).addTo(attLayer);
                    

                        // Create URL
                    let urlString3 = "attQueryNEW/trajectory_lines/"  + JSON.stringify(this.area.geometry);
                    let urlString2 = "attQueryNEW/trajectory_lines1/" + JSON.stringify(this.area.geometry);
                    let urlString1 = "attQueryNEW/trajectory_lines2/" + JSON.stringify(this.area.geometry);
                    let urlString  = "attQueryNEW/trajectory_lines3/" + JSON.stringify(this.area.geometry);
                    
                    
                    let thisVar = this;
                    let newData = $.ajax({
                        url: urlString,
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({areasArrayIntersections}),
                        success: console.log("Data successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    }) 
                    $.when(newData).done(function() {
                        
                        if(newData.responseJSON.features != null){
                            newData.responseJSON.features.forEach(function(item, index, array) {
                                let tracksToDraw = L.geoJson(item,firstStyleATT);
                                thisVar.getLensArray().forEach(function(lens,index,array){
                                    lens.updateLayer(tracksToDraw,item.properties);
                                });
                                tracksToDraw.addTo(_attLayer);
                            });
                            
                        }
                    }); 
                    let newData1 = $.ajax({
                        url: urlString1,
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({areasArrayIntersections}),
                        success: console.log("Data successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    }) 
                    $.when(newData1).done(function() {
                        if(newData1.responseJSON.features != null){
                            newData1.responseJSON.features.forEach(function(item, index, array) {
                                let tracksToDraw = L.geoJson(item,firstStyleATT);
                                thisVar.getLensArray().forEach(function(lens,index,array){
                                    lens.updateLayer(tracksToDraw,item.properties);
                                });
                                tracksToDraw.addTo(_attLayer1);
                            });
                            
                        }
                    });
                    let newData2 = $.ajax({
                        url: urlString2,
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({areasArrayIntersections}),
                        success: console.log("Data successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    }) 
                    $.when(newData2).done(function() {
                        if(newData2.responseJSON.features != null){
                            newData2.responseJSON.features.forEach(function(item, index, array) {
                                let tracksToDraw = L.geoJson(item,firstStyleATT);
                                thisVar.getLensArray().forEach(function(lens,index,array){
                                    lens.updateLayer(tracksToDraw,item.properties); 
                                });
                                tracksToDraw.addTo(_attLayer2);
                            });
                            
                        }
                    });
                    let newData3 = $.ajax({
                        url: urlString3,
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({areasArrayIntersections}),
                        success: console.log("Data successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    }) 
                    $.when(newData3).done(function() {
                        if(newData3.responseJSON.features != null){
                            newData3.responseJSON.features.forEach(function(item, index, array) {
                                let tracksToDraw = L.geoJson(item,firstStyleATT);
                                thisVar.getLensArray().forEach(function(lens,index,array){
                                    lens.updateLayer(tracksToDraw,item.properties); 
                                });
                                tracksToDraw.addTo(_attLayer3);
                            });
                            
                            
                        }
                    });
                    
                },
                updateLayer : function(){
                    let thisVar = this;
                    //if(this.getlID() != null){
                    attLenResults.getLayer(this.getlID()).eachLayer(function(oneOfFourATTLayers){
                        oneOfFourATTLayers.eachLayer(function(oneOfSmallLayerContainer){
                            oneOfSmallLayerContainer.eachLayer(function(oneOfSmallLayers) {
                                oneOfSmallLayers.setStyle(firstStyleATT);
                                thisVar.getLensArray().forEach(function(lens,index,array){
                                    lens.updateLayer(oneOfSmallLayers,oneOfSmallLayers.feature.properties);
                                });
                            });
                        });
                    });
                    /*}
                    else{
                        console.log("This area has no lID");
                    }*/
                },
                delete : function(){
                    attLenResults.getLayer(this.getlID()).clearLayers();
                    //this.setlID(null);
                }


            };
            return areaObj;
        }

        /////
        /////
        /////

        /////
        /////  Functions per attribute
        /////

        function velocityAtt(layer, properties, encoding){
             // code block
            let velAtt = properties.f4;
            switch(encoding){
                case "color":
                    /*layer.setStyle({opacity:0});
                    let pointsArray = layer.feature.geometry.coordinates;
                    
                    let velArray =  layer.feature.properties.f5;

                    let finalArray = [];
                    
                    for(let i = 0;i < velArray.length;i++ ){
                        finalArray.push([pointsArray[i][1],pointsArray[i][0],velArray[i]]);    
                    }
                    console.log(pointsArray);
                    let hotlineLayer = L.hotline(finalArray, {
                        min: 0,
                        max: 60,
                        palette: {
                            0.0: '#ff0000',
                            0.3: '#ffff00',
                            1.0: '#008800'
                        },
                        weight: 1,
                        outlineColor: '#FFFFFF',
                        outlineWidth: 0
                    });
                    
                    delete finalArray;
                    delete pointsArray;
                    delete velArray;
                    

                    console.log(hotlineLayer);
                    hotlineLayer.addTo(layerToPaint);
                    */

                    if(velAtt <= 10)          {
                            layer.setStyle({color :'#ff3232'});
                    }
                    else if(velAtt <= 20)     {
                            layer.setStyle({color :'#ff6928'});
                    }
                    else if(velAtt <= 30)    {
                            layer.setStyle({color :'#fcb42f'});
                    }
                    else if(velAtt <= 40)    {
                            layer.setStyle({color :'#fcce28'});
                    }
                    else if(velAtt <= 50)    {
                            layer.setStyle({color :'#fcd62f'});
                    }
                    else if(velAtt <= 60)    {
                            layer.setStyle({color :'#fcf528'});
                    }
                    else if(velAtt <=  70)   {
                            layer.setStyle({color :'#d5fc28'});
                    }
                    else if(velAtt <=  80)   {
                            layer.setStyle({color :'#b9fc28'});
                    }
                    else if(velAtt <=  90)   {
                            layer.setStyle({color :'#80fc28'});
                    }
                    else    layer.setStyle({color :'#00ff00'});
                    break;
                    
                case "brightness":
                    if(velAtt <= 10)          {
                        let colr = ColorLuminance(layer.options.color,-0.95);
                        layer.setStyle({"color":colr});
                    }
                    else if(velAtt <= 20)     {
                        let colr = ColorLuminance(layer.options.color,-0.9);
                        layer.setStyle({"color":colr});
                    }
                    else if(velAtt <= 30)    {
                        let colr = ColorLuminance(layer.options.color,-0.8);
                        layer.setStyle({"color":colr});
                    }
                    else if(velAtt <= 40)    {
                        let colr = ColorLuminance(layer.options.color,-0.65);
                        layer.setStyle({"color":colr});
                    }
                    else if(velAtt <= 50)    {
                        let colr = ColorLuminance(layer.options.color,-0.5);
                        layer.setStyle({"color":colr});
                    }
                    else if(velAtt <= 60)    {
                        let colr = ColorLuminance(layer.options.color,-0.35);
                        layer.setStyle({"color":colr});
                    }
                    else if(velAtt <=  70)   {
                        let colr = ColorLuminance(layer.options.color,-0.2);
                        layer.setStyle({"color":colr});
                    }
                    else if(velAtt <=  80)   {
                        let colr = ColorLuminance(layer.options.color,-0.1);
                        layer.setStyle({"color":colr});
                    }
                    else if(velAtt <=  90)   {
                        let colr = ColorLuminance(layer.options.color,-0.05);
                        layer.setStyle({"color":colr});
                    }
                    else                    console.log("brightness already at 1")
                    break;
                case "opacity":
                    if(velAtt <= 10)          {
                            layer.setStyle({opacity : 0.1});
                    }
                    else if(velAtt <= 20)     {
                            layer.setStyle({opacity : 0.2});
                    }
                    else if(velAtt <= 30)    {
                            layer.setStyle({opacity : 0.3});
                    }
                    else if(velAtt <= 40)    {
                            layer.setStyle({opacity : 0.4});
                    }
                    else if(velAtt <= 50)    {
                            layer.setStyle({opacity : 0.5});
                    }
                    else if(velAtt <= 60)    {
                            layer.setStyle({opacity : 0.6});
                    }
                    else if(velAtt <=  70)   {
                            layer.setStyle({opacity : 0.7});
                    }
                    else if(velAtt <=  80)   {
                            layer.setStyle({opacity : 0.8});
                    }
                    else if(velAtt <=  90)   {
                            layer.setStyle({opacity : 0.9});
                    }
                    else    layer.setStyle({opacity : 1});
                    break;
                case "width":
                    if(velAtt <= 10)        layer.setStyle({"weight": 1});
                    else if(velAtt <= 20)   layer.setStyle({"weight": 1.5});
                    else if(velAtt <= 30)   layer.setStyle({"weight": 2});
                    else if(velAtt <= 40)   layer.setStyle({"weight": 2.5});
                    else if(velAtt <= 50)   layer.setStyle({"weight": 3});
                    else if(velAtt <= 60)   layer.setStyle({"weight": 3.5});
                    else if(velAtt <= 70)   layer.setStyle({"weight": 4});
                    else if(velAtt <= 80)   layer.setStyle({"weight": 4.5});
                    else if(velAtt <= 90)   layer.setStyle({"weight": 5});
                    else                    layer.setStyle({"weight": 6});
                    break;
            }
        }

        function lengthAtt(layer,properties, encoding){
             // code block
            let len = properties.f1;
            switch(encoding){
                case "color":
                    if(len <= 250)          layer.setStyle({color :'#ff3232'}) 
                    else if(len <= 500)     layer.setStyle({color :'#ff6928'})
                    else if(len <= 1000)    layer.setStyle({color :'#fcb42f'}) 
                    else if(len <= 2000)    layer.setStyle({color :'#fcce28'})
                    else if(len <= 4000)    layer.setStyle({color :'#fcd62f'}) 
                    else if(len <= 8000)    layer.setStyle({color :'#fcf528'}) 
                    else if(len <= 16000)   layer.setStyle({color :'#d5fc28'})
                    else if(len <= 32000)   layer.setStyle({color :'#b9fc28'})
                    else if (len <= 128000) layer.setStyle({color :'#80fc28'})
                    else                    layer.setStyle({color :'#00ff00'})
                    break;
                case "brightness":
                    if(len <= 250)          {
                        let colr = ColorLuminance(layer.options.color,-0.95);
                        layer.setStyle({"color":colr});
                    }
                    else if(len <= 500)     {
                        let colr = ColorLuminance(layer.options.color,-0.9);
                        layer.setStyle({"color":colr});
                    }
                    else if(len <= 1000)    {
                        let colr = ColorLuminance(layer.options.color,-0.8);
                        layer.setStyle({"color":colr});
                    }
                    else if(len <= 2000)    {
                        let colr = ColorLuminance(layer.options.color,-0.65);
                        layer.setStyle({"color":colr});
                    }
                    else if(len <= 4000)    {
                        let colr = ColorLuminance(layer.options.color,-0.5);
                        layer.setStyle({"color":colr});
                    }
                    else if(len <= 8000)    {
                        let colr = ColorLuminance(layer.options.color,-0.35);
                        layer.setStyle({"color":colr});
                    }
                    else if(len <=  16000)   {
                        let colr = ColorLuminance(layer.options.color,-0.2);
                        layer.setStyle({"color":colr});
                    }
                    else if(len <=  32000)   {
                        let colr = ColorLuminance(layer.options.color,-0.1);
                        layer.setStyle({"color":colr});
                    }
                    else if(len <=  128000)   {
                        let colr = ColorLuminance(layer.options.color,-0.05);
                        layer.setStyle({"color":colr});
                    }
                    else                    console.log("brightness already at 1")
                    break;
                case "opacity":
                    if(len <= 250)          layer.setStyle({opacity:0.05});
                    else if(len <= 500)     layer.setStyle({opacity:0.10});
                    else if(len <= 1000)    layer.setStyle({opacity:0.20}); 
                    else if(len <= 2000)    layer.setStyle({opacity:0.35});
                    else if(len <= 4000)    layer.setStyle({opacity:0.5});
                    else if(len <= 8000)    layer.setStyle({opacity:0.65});
                    else if(len <= 16000)   layer.setStyle({opacity:0.8});
                    else if(len <= 32000)   layer.setStyle({opacity:0.9});
                    else if(len <= 128000)  layer.setStyle({opacity:0.95});
                    else                    console.log("Opcacity already at 1")
                    break;
                case "width":
                if(len <= 250)              layer.setStyle({"weight": 1});
                    else if(len <= 500)     layer.setStyle({"weight": 1.5});
                    else if(len <= 1000)    layer.setStyle({"weight": 2});
                    else if(len <= 2000)    layer.setStyle({"weight": 2.5});
                    else if(len <= 4000)    layer.setStyle({"weight": 3});
                    else if(len <= 8000)    layer.setStyle({"weight": 3.5});
                    else if(len <= 16000)   layer.setStyle({"weight": 4});
                    else if(len <= 32000)   layer.setStyle({"weight": 4.5});
                    else if(len <= 128000)  layer.setStyle({"weight": 5});
                    else                    layer.setStyle({"weight": 6});
                    break;
            }
        }
        
        function durationAtt(layer, properties, encoding){
             // code block
            let dur = properties.f2;
            switch(encoding){
                case "color":
                    if(dur <= "00:01:00")           layer.setStyle({color :'#ff3232'})
                    else if(dur <= "00:02:00")      layer.setStyle({color :'#fcb42f'})
                    else if(dur <= "00:05:00")      layer.setStyle({color :'#fcd62f'})
                    else if(dur <= "00:010:00")     layer.setStyle({color :'#fcf528'})
                    else if(dur <=  "00:30:00")     layer.setStyle({color :'#b9fc28'})
                    else                            layer.setStyle({color :'#00ff00'})
                    break;
                case "brightness":
                    if(dur <= "00:01:00")          {
                        let colr = ColorLuminance(layer.options.color,-0.95);
                        layer.setStyle({"color":colr});
                    }
                    else if(dur <= "00:02:00")     {
                        let colr = ColorLuminance(layer.options.color,-0.9);
                        layer.setStyle({"color":colr});
                    }
                    else if(dur <= "00:05:00")    {
                        let colr = ColorLuminance(layer.options.color,-0.8);
                        layer.setStyle({"color":colr});
                    }
                    else if(dur <= "00:10:00")    {
                        let colr = ColorLuminance(layer.options.color,-0.5);
                        layer.setStyle({"color":colr});
                    }
                    else if(dur <=  "00:30:00")   {
                        let colr = ColorLuminance(layer.options.color,-0.2);
                        layer.setStyle({"color":colr});
                    }
                    else                    console.log("brightness already at 1")
                    break;
                case "opacity":
                    if(dur <= "00:01:00")           layer.setStyle({opacity:0.05});
                    else if(dur <= "00:02:00")      layer.setStyle({opacity:0.15}); 
                    else if(dur <= "00:05:00")      layer.setStyle({opacity:0.3});
                    else if(dur <= "00:10:00")      layer.setStyle({opacity:0.55});
                    else if(dur <=  "00:30:00")     layer.setStyle({opacity:0.8});
                    else                            console.log("Opcacity already at 1")
                    break;
                case "width":
                    if(dur <= "00:01:00")           layer.setStyle({"weight": 1});
                    else if(dur <= "00:02:00")      layer.setStyle({"weight": 2});
                    else if(dur <= "00:05:00")      layer.setStyle({"weight": 3});
                    else if(dur <= "00:10:00")      layer.setStyle({"weight": 4});
                    else if(dur <=  "00:30:00")     layer.setStyle({"weight": 5});
                    else                            layer.setStyle({"weight": 6});
                    break;
            }
        }

         function timeAtt(layer, properties, encoding){
            // 2008-02-02 13:30:44
            // 2008-02-08 17:39:18
            // code block
            let tim = properties.f3;
            switch(encoding){
                case "color":
                    if(tim <= "2008-02-03 13:30:44")            layer.setStyle({color :'#ff3232'})
                    else if(tim <= "2008-02-04 13:30:44")       layer.setStyle({color :'#fcb42f'})
                    else if(tim <= "2008-02-05 13:30:44")       layer.setStyle({color :'#fcd62f'})
                    else if(tim <= "2008-02-06 13:30:44")       layer.setStyle({color :'#fcf528'})
                    else if(tim <=  "2008-02-07 13:30:44")      layer.setStyle({color :'#b9fc28'})
                    else                                        layer.setStyle({color :'#00ff00'})
                    break;
                case "brightness":
                    if(tim <= "2008-02-03 13:30:44")          {
                        let colr = ColorLuminance(layer.options.color,-0.95);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= "2008-02-04 13:30:44")     {
                        let colr = ColorLuminance(layer.options.color,-0.9);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= "2008-02-05 13:30:44")    {
                        let colr = ColorLuminance(layer.options.color,-0.8);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= "2008-02-06 13:30:44")    {
                        let colr = ColorLuminance(layer.options.color,-0.5);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= "2008-02-07 13:30:44")   {
                        let colr = ColorLuminance(layer.options.color,-0.2);
                        layer.setStyle({"color":colr});
                    }
                    else                    console.log("brightness already at 1")
                    break;
                case "opacity":
                    if(tim <= "2008-02-03 13:30:44")            layer.setStyle({opacity:0.05});
                    else if(tim <= "2008-02-04 13:30:44")       layer.setStyle({opacity:0.15}); 
                    else if(tim <= "2008-02-05 13:30:44")       layer.setStyle({opacity:0.3});
                    else if(tim <= "2008-02-06 13:30:44")       layer.setStyle({opacity:0.55});
                    else if(tim <= "2008-02-07 13:30:44")       layer.setStyle({opacity:0.8});
                    else                                        console.log("Opcacity already at 1")
                    break;
                case "width":
                    if(tim <= "2008-02-03 13:30:44")            layer.setStyle({"weight": 1});
                    else if(tim <= "2008-02-04 13:30:44")       layer.setStyle({"weight": 2});
                    else if(tim <= "2008-02-05 13:30:44")       layer.setStyle({"weight": 3});
                    else if(tim <= "2008-02-06 13:30:44")       layer.setStyle({"weight": 4});
                    else if(tim <= "2008-02-07 13:30:44")       layer.setStyle({"weight": 5});
                    else                                        layer.setStyle({"weight": 6});
                    break;
            }
        }
        /////
        ///// Area calculation
        /////

        function recursiveArea(thisVar, indexI, j){ 
            console.log([indexI, j]);
            console.log("Look alive");
            if(indexI >= 0){

                console.log("Before intersection and difference");
                //let optionsTruncate = {coordinates: 2};
                let urlIntersectDifference = "interdif/"  + JSON.stringify(thisVar.areas[0].area) + "/" +  JSON.stringify(thisVar.intersections[indexI].areas[j].area);
                console.log(thisVar.areas[0].area);
                //let thisVar = this;
                //let thisAreasZero = this.areas[0];
                //let oneOfAreasFromIntersection = this.intersections[indexI].areas[j];
                let interDifPromise = intersectionServer(urlIntersectDifference);
                interDifPromise.then(function(responseInter) {
                    console.log("After intersection and difference");
                    //let urlDifference = "difference/"  + JSON.stringify(thisVar.areas[0].area) + "/" +  JSON.stringify(thisVar.intersections[indexI].areas[j].area);
                    
                    if(responseInter[0] != null){
                        
                        //let differencePromise =  differenceServer(urlDifference);
                        //differencePromise.then(function(responseDiff) {
                        //let difference = turf.difference(turf.truncate(this.areas[0].area, optionsTruncate),turf.truncate(this.intersections[i].areas[j].area, optionsTruncate));
                        console.log("Intersection not null");
                        //let difference1 = turf.cleanCoords(difference)
                        //let intersection1 = turf.cleanCoords(intersection)
                        //console.log(thisAreasZero);
                        //console.log(responseDiff);
                        //thisAreasZero.setArea(responseDiff);
                        thisVar.areas[0].setArea(responseInter[1]);

                        let lensArrOfArea = thisVar.intersections[indexI].areas[j].getLensArray();
                        let newArea = creaAttAreas(responseInter[0]);
                        for(k = 0; k < lensArrOfArea.length;k++){
                            newArea.addLens(lensArrOfArea[k]);
                        }
                        newArea.addLens(thisVar);
                        thisVar.addArea(newArea);
                        /*let color2;
                        let r = Math.min(Math.max(Math.floor(Math.random() * 255), 55), 200);
                        let g = Math.min(Math.max(Math.floor(Math.random() * 255), 75), 255);
                        let b = Math.min(Math.max(Math.floor(Math.random() * 255), 100), 225);
                        
                        color2= "rgb("+r+" ,"+g+","+ b+")"; 
                        let randomColor = Math.floor(Math.random()*16777215).toString(16);
                        let cona = L.geoJson(responseInter[0], {
                            color: '#ff3636',
                            fillColor: color2,
                            fillOpacity:1
                        });
                        cona.addTo(areasLayer);*/
                        //})
                        
                        j++;
                        if(j==thisVar.intersections[indexI].areas.length){
                            return recursiveArea(thisVar,indexI - 1, 0);
                        }
                        else{
                            return recursiveArea(thisVar,indexI, j);
                        }
                    }
                    else{
                        console.log(responseInter);
                        console.log("There was no intersection");
                        
                        j++;
                        if(j==thisVar.intersections[indexI].areas.length){
                            return recursiveArea(thisVar,indexI - 1, 0);
                        }
                        else{
                            return recursiveArea(thisVar,indexI, j);
                        }
                    }
                }).catch(function(jqXHR) {
                    if (jqXHR instanceof ReferenceError) {
                        console.log('wow!');
                    }
                });
            } 
            else{
                return thisVar.createLayers();
            }     
        }
                

        /////
        /////
        /////

        /////
        ///// support
        /////
        
        function Unix_timestamp(t){
            let dt = new Date(t);
            let stringDate = dt.toUTCString();
            /*let year = dt.getFullYear();
            let month = dt.getMonth();
            let day = dt.getDay();
            let hour = dt.getHours();
            let minute = dt.getMinutes();
            let seconds = dt.getSeconds();*/

            return stringDate;
        }

        function isEqual(a, b) { 
            // if length is not equal 
            if(a.length!=b.length) 
                return false; 
            else{ 
            // comapring each element of array 
                for(let i=0;i<a.length;i++){
                    if(a[i]!=b[i]) return false; 
                } 
                return true; 
            } 
        } 

        function ColorLuminance(hex, lum) {

            // validate hex string
            hex = String(hex).replace(/[^0-9a-f]/gi, '');
            if (hex.length < 6) {
                hex = hex[0]+hex[0]+hex[1]+hex[1]+hex[2]+hex[2];
            }
            lum = lum || 0;

            // convert to decimal and change luminosity
            let rgb = "#", c, i;
            for (i = 0; i < 3; i++) {
                c = parseInt(hex.substr(i*2,2), 16);
                c = Math.round(Math.min(Math.max(0, c + (c * lum)), 255)).toString(16);
                rgb += ("00"+c).substr(c.length);
            }

            return rgb;
        }

        function intersectionServer(urlIntersect){
            return new Promise((resolve, reject) => {
                $.ajax({
                    url: urlIntersect,
                    type: 'GET',
                    dataType:'json',
                    success: function(data){
                        resolve(data)
                    },
                    error: function(jqXHR, textStatus, errorThrown) {
                        alert('An error occurred... Look at the console (F12 or Ctrl+Shift+I, Console tab) for more information!');

                        $('#result').html('<p>status code: '+jqXHR.status+'</p><p>errorThrown: ' + errorThrown + '</p><p>jqXHR.responseText:</p><div>'+jqXHR.responseText + '</div>');
                        console.log('jqXHR:');
                        console.log(jqXHR);
                        console.log('textStatus:');
                        console.log(textStatus);
                        console.log('errorThrown:');
                        console.log(errorThrown);
                    }
                }) 
            });
        }

        function differenceServer(urlDifference){
            return new Promise((resolve, reject) => {
                $.ajax({
                    url: urlDifference,
                    type: 'GET',
                    dataType:'json',
                    success: function(data){
                        resolve(data)
                    },
                    error: function (req, status, err) {
                        reject(err);
                    } 
                }) 
            });
        }

        function capitalizeFirstLetter(string) {
            return string.charAt(0).toUpperCase() + string.slice(1);
        }

        function attLensArrayToServer(){
            console.log("Im in arraytoserver");
            console.log("Here is opc Array")
            console.log(attOPACITYLensesArray);
            let areasArray = [];
            attOPACITYLensesArray.forEach(function(lensInOpacArray){
                areasArray.push(lensInOpacArray.overallArea.geometry);
            })
            console.log("Here come the areasd in the array to pass to server")
            console.log(areasArray)
            if(defaultLayerFlag){
                if (defaultLayer != null) {
                    defaultLayerFlag = false;
                    map.removeLayer(defaultLayer);
                }
            }

            if(lastMarkerGroupID !=null){
                markerGroup.removeLayer(lastMarkerGroupID);
                lastMarkerGroupID = null;
            }
            if(lastMarkerGroupID1 !=null){
                markerGroup1.removeLayer(lastMarkerGroupID1);
                lastMarkerGroupID1 = null;
            }
            if(lastMarkerGroupID2 !=null){
                markerGroup2.removeLayer(lastMarkerGroupID2);
                lastMarkerGroupID2 = null;
            }
            if(lastMarkerGroupID3 !=null){
                markerGroup3.removeLayer(lastMarkerGroupID3);
                lastMarkerGroupID3 = null;
            }
            let object = $.ajax({
                type: 'POST',
                url: '/updateBaseLayer/trajectory_lines3',
                contentType: 'application/json',
                data: JSON.stringify({areasArray}),
                success: function(){
                    console.log("fcking work ffs");
                }
            })
            $.when(object).done(function() {
                if(object.responseJSON.features != null){
                    let tracksToDraw = L.geoJson(object.responseJSON,firstStyle);
                    tracksToDraw.addTo(markerGroup);
                    lastMarkerGroupID = tracksToDraw._leaflet_id;
                }
                lensesLayer.bringToFront();
            }); 
            let object1 = $.ajax({
                type: 'POST',
                url: '/updateBaseLayer/trajectory_lines2',
                contentType: 'application/json',
                data: JSON.stringify({areasArray}),
                success: function(){
                    console.log("fcking work ffs");
                }
            })
            $.when(object1).done(function() {
                if(object1.responseJSON.features != null){
                    let tracksToDraw = L.geoJson(object1.responseJSON,firstStyle);
                    tracksToDraw.addTo(markerGroup1);
                    lastMarkerGroupID1 = tracksToDraw._leaflet_id;
                }
                lensesLayer.bringToFront();
            }); 
            let object2 = $.ajax({
                type: 'POST',
                url: '/updateBaseLayer/trajectory_lines1',
                contentType: 'application/json',
                data: JSON.stringify({areasArray}),
                success: function(){
                    console.log("fcking work ffs");
                }
            })
            $.when(object2).done(function() {
                if(object2.responseJSON.features != null){
                    let tracksToDraw = L.geoJson(object2.responseJSON,firstStyle);
                    tracksToDraw.addTo(markerGroup2);
                    lastMarkerGroupID2 = tracksToDraw._leaflet_id;
                }
                lensesLayer.bringToFront();
            }); 
            let object3 = $.ajax({
                type: 'POST',
                url: '/updateBaseLayer/trajectory_lines',
                contentType: 'application/json',
                data: JSON.stringify({areasArray}),
                success: function(){
                    console.log("fcking work ffs");
                }
            })
            $.when(object3).done(function() {
                if(object3.responseJSON.features != null){
                    let tracksToDraw = L.geoJson(object3.responseJSON3,firstStyle);
                    tracksToDraw.addTo(markerGroup3);
                    lastMarkerGroupID3 = tracksToDraw._leaflet_id;
                }
                lensesLayer.bringToFront();
            }); 

           
        }

        $('#myform').submit(function() {
            $(this).ajaxSubmit({

                error: function(xhr) {
            
                },

                success: function(response) {
                    console.log(response);

                }

            });

            return false
        });

        function getMinTimeVal() {
            let urlString = "/minTimeVarValue";


            let newData = $.ajax({
                url: urlString,
                type: 'GET',
                success: console.log("Minimum data value fetched"),
                error: function (xhr) {
                    alert(xhr.statusText)
                }

            })
            $.when(newData).done(function () {
                console.log(newData)
            });
        }

        function getMaxTimeVal() {
            let urlString = "/maxTimeVarValue";


            let newData = $.ajax({
                url: urlString,
                type: 'GET',
                success: console.log("Maximum data value fetched"),
                error: function (xhr) {
                    alert(xhr.statusText)
                }

            })
            $.when(newData).done(function () {
                console.log(newData)
            });
        }

        /*if(!lens.hasBeenOpacity){
                                    if(lens.intersections.length != 0){
                                        let middleArray = Array.from(lens.intersections);
                                        lens.delete();
                                        lens.updateOthersV2(false);
                                        
                                        
                                        for(let j = middleArray.length-1; j>=0;j--){
                                            middleArray[j].delete();
                                            middleArray[j].updateOthersV2(false);
                                        }
                                        
                                        
                                        lens.intersections = [];
                                        let holder = await lens.createAreas();
                                        
                                        for(let x = 0; x < middleArray.length;x++){
                                            let otherHolder = await middleArray[x].createAreas();
                                        }
                                        for(let k = 0;k < lens.areas.length;k++){
                                            attLenResults.getLayer(lens.areas[k].getlID()).bringToBack()
                                            /*eachLayer(function(oneOfFourATTLayers){
                                                oneOfFourATTLayers.eachLayer(function(oneOfSmallLayerContainer){
                                                    oneOfSmallLayerContainer.eachLayer(function(oneOfSmallLayers) {
                                                        oneOfSmallLayers.bringToBack();
                                                    })
                                                })
                                            })*/
                                         

        
