extends layout
block content
    
    <div id="sidebar" class="sidebar collapsed" style="color:white">
        <!-- Nav tabs -->
        <div class="sidebar-tabs" style="background-color:  #8babb9cc">
            <ul role="tablist">
                <li><a href="#home" role="tab"  >BG<i class="fa fa-bars"></i></a></li>
                <li     class="disabled"><a role="tab"  >----<i class="fa fa-bars"></i></a></li>
                <li class = "not-tabZoom"><a id="zoomBut" role="tab" class="zoomBut"><img src="images/zoomIcon.png" alt="" style="wdith:100%; height:100%"/><i class="fa fa-info"></i></a></li>
                <div ></div>
                <li     class="disabled"><a role="tab"  >----<i class="fa fa-bars"></i></a></li>
                <div ></div>
                <li class = "not-tabFilter"><a id="filterLensBut" role="tab" class="filterLensBut"><img src="images/636051.svg" alt="" style="wdith:100%; height:100%"/><i class="fa fa-info"></i></a></li>
                <div ></div>
                <li     class="disabled"><a role="tab"  style="height:10%">----<i class="fa fa-bars"></i></a></li>
                <div ></div>
                <li class = "not-tabAttr"><a id="attributeLensBut" role="tab" class="attributeLensBut"><img src="images/queryAtt.png" alt="" style="wdith:100%; height:100%"/><i class="fa fa-info"></i></a></li>
                <div ></div>
                <li     class="disabled"><a role="tab"  >----<i class="fa fa-bars"></i></a></li>
                <div ></div>
                <li><a href="#statistics" role="tab" id="statisticsBut" ><img src="images/statistics.png" alt="" style="wdith:100%; height:100%"/><i class="fa fa-user"></i></a></li>
                
            </ul>

            <ul role="tablist">
                <li><a href="#upload" role="tab" ><img src="images/uploadIcon.png" alt="" style="wdith:100%; height:100%"/><i class="fa fa-user"></i></a></li>
                <li     class="disabled"><a role="tab"  >----<i class="fa fa-bars"></i></a></li>
                <li><a href="#settings" role="tab"><img src="images/settings.png" alt="" style="wdith:100%; height:100%"/><i class="fa fa-gear"></i></a></li>
            </ul>
        </div>
        <!-- Tab panes -->
        <div class="sidebar-content" style="background-color:  rgb(65, 65, 65)">
            <div class="sidebar-pane" id="home" >
                <h1 class="sidebar-header">
                    sidebar-v2
                    <span class="sidebar-close"><i class="fa fa-caret-left"></i></span>
                </h1>

                <p>Welcome to BigGeo</a>.</p>
                <p>This is an interactive application for big trajectory data visualization</a>.</p>

                <p class="lorem">Here you can create lenses to filter the trajectories you pretend and after you can analyse their attributes through visual encodings on each trajectory. Our goal was to study and develop an effecive way of visualizing and interacting with big trajectory dataset. </p>
                <p class="lorem">Developped by master's student Frederico Santos and supervised by prof. Daniel Gon√ßalves From Instituto Superior Tecnico, Portugal. </p>

            </div>

            <div class="sidebar-pane" id="statistics" >
            
                <h1 class="sidebar-header">Active trajectories statistics
                    sidebar-v2
                    <span class="sidebar-close"><i class="fa fa-caret-left"></i></span>
                </h1>

                <p class="lorem" style="font-size: 150%;">Total number of trajectories:</p>
                <p class="lorem" id="totalNumTracks" style="font-size: 120%;"></p>
                <h1 style="font-size: 150%">-------------------------</h1>
                <p class="lorem" style="font-size: 150%;">Velocity</p>
                <p class="lorem">Average velocity:</p>
                <p class="lorem" id="averageVelocityValue" style="font-size: 120%;"></p>
                <div id="my_dataviz"></div>
                <h1 style="font-size: 150%">-------------------------</h1>
                <p class="lorem" style="font-size: 150%;">Length</p>
                <p class="lorem">Average:</p>
                <p class="lorem" id="averageLengthValue" style="font-size: 120%;"></p>
                <div id="my_datavizLENGTH"></div>
                <h1 style="font-size: 150%">-------------------------</h1>
                <p class="lorem" style="font-size: 150%;">Time of creation</p>
                <p class="lorem" id="averageTimeValue" style="font-size: 120%;"></p>
                <div id="my_datavizTIME"></div>
                <h1 style="font-size: 150%">-------------------------</h1>
                <p class="lorem" style="font-size: 150%;">Duration</p>
                <p class="lorem">Average:</p>
                <p class="lorem" id="averageDurationValue" style="font-size: 120%;"></p>
                <div id="my_datavizDURATION"></div>

                
                <p>This is the statistics panel</a>.</p>
                <p>The data here being displayed is related to the trajectories currently selected</a>.</p>
                <p>In the following histograms the Y-axis represents the number of trajectories inside each bin. Here the scales change according to the data selected by the filtering lenses</a>.</p>


            </div>

            <div class="sidebar-pane" id="upload" >
                <h1 class="sidebar-header">Upload trajectories<span class="sidebar-close"><i class="fa fa-caret-left"></i></span></h1>
                <p></a></p>
                
                <p>Here you can upload your own trajectories. You can select up to 1500 .gpx files at a time and simply drag them into the uplaod zone. At the end the page will be refreshed so your session will be lost</a>.</p>
                <form id='myform' action="/fileUpload" method="POST" enctype="multipart/form-data">
                    <input type="file" name = "track" multiple>
                    <p>Drag your files here or click in this area.</p>
                    <button type="submit">Upload</button>
                    </form>

                <div>
                    <div class="progress-bar-container">
                        <div class="progress-bar stripes animated reverse slower">
                        <span class="progress-bar-inner"></span>
                        </div>
                    </div>
                    </div>
                //<div style="position: absolute; bottom: 1%;">
                    <label for="track">Choose the files you want to upload (must be in gpx format):</label>
                    <form id='myform' action="/fileUpload" method="post" enctype="multipart/form-data">
                        <input type="file" name="track" multiple />
                        <button id = "submitButt"> Submit </button>
                    </form>
                //</div>
            </div>
            <div class="sidebar-pane" id="settings" >
                <h1 class="sidebar-header">Setting<span class="sidebar-close"><i class="fa fa-caret-left"></i></span></h1>
                <div id="biggerContainerMenu">
                    <h1 style="font-size: 150%">Map style</h1>
                    <h1 style="font-size: 80%">Select whichever map you prefer:</h1>
                    <div id="smallContainerMenu">
                        <label class="control control--radio">
                        <input type="radio" class="firstMap" name="radio" checked="checked" />CartoDB DarkMatter (no labels)
                        <div class="control__indicator"></div>
                        </label>
                        <label class="control control--radio">
                        <input type="radio" class="secMap" name="radio"/>CartoDB DarkMatter 
                        <div class="control__indicator"></div>
                        </label>
                        <label class="control control--radio">
                        <input type="radio" class="trdMap" name="radio" />Hydda Full
                        <div class="control__indicator"></div>
                        </label>
                        <label class="control control--radio">
                        <input type="radio" class="fourMap" name="radio" />CartoDB Voyager
                        <div class="control__indicator"></div>
                        </label>
                        <label class="control control--radio">
                        <input type="radio" class="fiveMap" name="radio"/>CartoDB Voyager (no labels)
                        <div class="control__indicator"></div>
                        </label>
                    </div>
                </div> 
                <h1 style="font-size: 150%">---------------------</h1>
                <div id="biggerContainerMenu">
                    <h1 style="font-size: 150%">Intervals</h1>
                    <h1 style="font-size: 80%">The first opThe intervals are smaller when the are several trajectories with the same attribute values and bigger when there are less trajectories.</h1>
                    <div id="smallContainerMenu">
                        <label class="control control--radio">
                        <input type="radio" class="" name="radio2" checked="checked"/>Equal sized intervals
                        <div class="control__indicator"></div>
                        </label>
                        <label class="control control--radio">
                        <input type="radio" class="" name="radio2"/>Different sized intervals
                        <div class="control__indicator"></div>
                        </label>
                    </div>
                </div> 
            </div>   
            </div>
        </div>
    </div>
    <div id="map" class="sidebar-map"></div>
    
    
    
    script.
      
        //Array that will save all the layers
        let layerArray = [];

        let map = L.map('map',{zoomControl : true,preferCanvas: true,renderer: L.canvas({}), center: [38.736946,-9.142685], zoom: 6,worldCopyJump: true});
        let zoomControlVar = map.zoomControl;
        map.zoomControl.remove();
        //$(window).on("resize", function () { $("#map").height($(window).height()); map.invalidateSize(); }).trigger("resize");
        map.createPane('lensPane');
        map.createPane('outtterLensPane');
        map.createPane('outtterLensPane2');
        map.createPane('outtterLensDeletePane');
        map.createPane('velPane');
        map.createPane('areaPane');
        map.createPane('attLensPane');
        map.createPane('queryLensPane');
        map.createPane('queryLensPane1');
        map.createPane('queryLensPane2');
        map.createPane('queryLensPane3');
        map.getPane('lensPane').style.zIndex = 640;
        map.getPane('outtterLensPane').style.zIndex = 650;
        map.getPane('outtterLensPane2').style.zIndex = 630;
        map.getPane('outtterLensDeletePane').style.zIndex = 700;
        map.getPane('attLensPane').style.zIndex = 450;
        map.getPane('queryLensPane').style.zIndex = 400;
        map.getPane('queryLensPane1').style.zIndex = 401;
        map.getPane('queryLensPane2').style.zIndex = 402;
        map.getPane('queryLensPane3').style.zIndex = 403;
        map.getPane('velPane').style.zIndex = 400;

        map.getPane('areaPane').style.zIndex = 900;
        let popup = L.popup();
        let popup2 = L.popup();

        let minValueVel;
        let maxValueVel;
        let minValueLength;
        let maxValueLength;
        let minValueTime;
        let maxValueTime;
        let minValueTimeDuration;
        let maxValueTimeDuration;

        //create array with all layers?

        let markerGroup  = L.featureGroup({pane: 'queryLensPane'}).addTo(map);
        let markerGroup1 = L.featureGroup({pane: 'queryLensPane1'}).addTo(map);
        let markerGroup2 = L.featureGroup({pane: 'queryLensPane2'}).addTo(map);
        let markerGroup3 = L.featureGroup({pane: 'queryLensPane3'}).addTo(map);
        
        let attLenResults = L.featureGroup({pane: 'attLensPane'}).addTo(map);

        let outterLensesLayer = L.featureGroup({pane: 'outtterLensPane'}).addTo(map);
        let outterLensesCircularHistoLayer = L.featureGroup({pane: 'outtterLensPane2'}).addTo(map);
        let lensesLayer = L.featureGroup({pane: 'lensPane'}).addTo(map);
        let areasLayer = L.featureGroup({pane: 'areaPane'}).addTo(map);
        

        let lensPreCreationLayer = L.layerGroup().addTo(map);

        
        let lastMarkerGroupID = null ;
        let lastMarkerGroupID1 = null ;
        let lastMarkerGroupID2 = null ;
        let lastMarkerGroupID3 = null ;
        let defaultLayerFlag = true;

        let createQueryLensesFlag = false;
        let createAttributeLensesFlag = false;

        let moved = false;
        let lensCanMove = false;

        let evenTimeStartClicked = false;
        let evenTimeEndClicked = false;


        let attributeFuncVar = "length";
        let encodingFuncVar = "color";

        let attLensesArray = [];
        //opacityLensArray
        let attOPACITYLensesArray = [];

        let iDOfHisto = 0;
        let idOfHistogram = ""


        var minTimeValue = 0;
        var maxTimeValue = 0;
        getMinTimeVal()
        getMaxTimeVal()
        let lensArrayZORDER = [];

        let maxArrayValuesGlobal = {"velocity":0,"duration":{"hours":0,"minutes":0,"seconds":0},"length":0,"timemin":"","timemax" :""};
        let colorToUseWithMap = "#FFF"

        ////////TESTSSSSS//////////
        let testsLayer = L.layerGroup().addTo(map);
        ///////////////////////////

        //Change basemaps
        /*var layer = L.esri.basemapLayer('Topographic').addTo(map);
        var layerLabels;*/
        
        var Hydda_Full = L.tileLayer('https://{s}.tile.openstreetmap.se/hydda/full/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: 'Tiles courtesy of <a href="http://openstreetmap.se/" target="_blank">OpenStreetMap Sweden</a> &mdash; Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        });
        var CartoDB_Voyager = L.tileLayer('https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',
            subdomains: 'abcd',
            maxZoom: 19
        });

        var CartoDB_VoyagerNoLabels = L.tileLayer('https://{s}.basemaps.cartocdn.com/rastertiles/voyager_nolabels/{z}/{x}/{y}{r}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',
            subdomains: 'abcd',
            maxZoom: 19
        });

        //ALL black and dark grey
        var blackNoLabel = L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_nolabels/{z}/{x}/{y}{r}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',
            subdomains: 'abcd',
            maxZoom: 19
        })

        var CartoDB_DarkMatter = L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',
            subdomains: 'abcd',
            maxZoom: 19
        });

        blackNoLabel.addTo(map);
        var activeMap =blackNoLabel;

        var sidebar = L.control.sidebar('sidebar').addTo(map);

        let activeLENSNEWMENU=null
        //let myData = jsonData;
        let myData = !{JSON.stringify(jsonData)};
        // Create variable to hold map element, give initial settings to map
        /*let container1 = L.DomUtil.create('div', 'leaflet-bar leaflet-control leaflet-control-custom');
        let container2 = L.DomUtil.create('div', 'leaflet-bar leaflet-control leaflet-control-custom');
        let customControlQ =  L.Control.extend({
            options: {
                position: 'topleft'
            },
            onAdd: function (map) {
                container1.style.backgroundColor = 'white';     
                container1.style.backgroundImage = "url(images/636051.svg)";
                container1.style.backgroundSize = "30px 30px";
                container1.style.width = '30px';
                container1.style.height = '30px';

                container1.onclick = function(e){
                    L.DomEvent.stopPropagation(e); 
                    if(!clicked) {
                        createAttributeLensesFlag = false;
                        container2.style.backgroundColor = 'white'; 
                        createQueryLensesFlag = !createQueryLensesFlag;
                        if (createQueryLensesFlag){
                            container1.style.backgroundColor = 'grey';
                        }
                        else{
                            container1.style.backgroundColor = 'white';   
                        }
                    } 
                };
                container1.ondbclick = function(e){
                    L.DomEvent.stopPropagation(e); 
                    e.originalEvent.preventDefault();
                }

                return container1;
            }
        });
        let customControlA =  L.Control.extend({
            options: {
                position: 'topleft'
            },
            onAdd: function (map) {
                container2.style.backgroundColor = 'white';     
                container2.style.backgroundImage = "url(images/queryAtt.png)";
                container2.style.backgroundSize = "30px 30px";
                container2.style.width = '30px';
                container2.style.height = '30px';

                container2.onclick = function(e){
                    L.DomEvent.stopPropagation(e);
                    if(!clicked) {
                        createQueryLensesFlag = false;
                        container1.style.backgroundColor = 'white'; 
                        createAttributeLensesFlag = !createAttributeLensesFlag;
                        if (createAttributeLensesFlag){
                            container2.style.backgroundColor = 'grey';
                        }
                        else{
                            container2.style.backgroundColor = 'white';   
                        }
                    }  
                };
                container2.ondbclick = function(e){
                    L.DomEvent.stopPropagation(e);
                    e.originalEvent.preventDefault();
                }
                return container2;
            }
        });

        map.addControl(new customControlQ());
        map.addControl(new customControlA());
            
        let container = document.getElementsByClassName("leaflet-zoom-animated");
        container[0].onclick = function(e){
                L.DomEvent.stopPropagation(e);
        }*/
                

        
        //let defaultLayer = new L.GeoJSON().addTo(map);
        let firstStyle = {
            "color": '#43A7DE',
            "opacity": 1,
            "weight": 1.5,
            "interactive": false,
            "smoothFactor": 3.5   
        };
        let firstStyle1 = {
            "color": '#43A7DE',
            "opacity": 1,
            "weight": 1.5,
            "interactive": false ,
            "smoothFactor": 4.5    
        };
        let firstStyle2 = {
            "color": '#43A7DE',
            "opacity": 1,
            "weight": 1.5,
            "interactive": false,
            "smoothFactor": 5.5     
        };let firstStyle3 = {
            "color": '#43A7DE',
            "opacity": 1,
            "weight": 1.5,
            "interactive": false,
            "smoothFactor": 6.5     
        };
        let firstStyleATT = {
            "color": '#43A7DE',
            "opacity": 1,
            "weight": 1.5,
            "pane": "attLensPane",
            "interactive": false,
            "smoothFactor": 3.5
        };
        let firstStyleATT1 = {
            "color": '#43A7DE',
            "opacity": 1,
            "weight": 1.5,
            "pane": "attLensPane",
            "interactive": false,
            "smoothFactor": 4.5
        };
        let firstStyleATT2 = {
            "color": '#43A7DE',
            "opacity": 1,
            "weight": 1.5,
            "pane": "attLensPane",
            "interactive": false,
            "smoothFactor": 5.5
        };
        let firstStyleATT3 = {
            "color": '#43A7DE',
            "opacity": 1,
            "weight": 1.5,
            "pane": "attLensPane",
            "interactive": false,
            "smoothFactor": 6.5
        };
        let defaultLayer = null;
        // Add JSON to map
        if(myData.features != null){
            defaultLayer = new L.geoJson(myData,firstStyle).addTo(map);
            map.panTo(defaultLayer.getBounds().getCenter());
        }

        map.on('zoomend', function() {
            console.log(map.getZoom())
            if (map.getZoom() >= 13){
                    markerGroup3.addTo(map);
            }
            else {
                if (map.hasLayer(markerGroup3)) {
                    map.removeLayer(markerGroup3);
                } else {
                    console.log("MarkerGroup3 not active");
                }
                if (map.getZoom() >= 10){
                    markerGroup2.addTo(map);
                }
                else {
                    if (map.hasLayer(markerGroup2)) {
                        map.removeLayer(markerGroup2);
                    } else {
                        console.log("MarkerGroup2 not active");
                    }
                    if (map.getZoom() >= 5){
                        markerGroup1.addTo(map);
                    }
                    else {
                        if (map.hasLayer(markerGroup1)) {
                            map.removeLayer(markerGroup1);
                        } else {
                            console.log("MarkerGroup1 not active");
                        }
                
                    }
                }
            }
            lensesLayer.bringToFront();
            updateZORDER()
        });
        let movedCreateLens = false;
        let radiusValue = 0;
        let locationCreation;
        let createdAlreadyFlag = false;
        let sizeBellow25k = false;
        let mapPressForCreation = false;
        let notClickedLens = false;
        let clicked = false;
        let changeRadius = false;
        let correctSizeVar = false;
        
        ///////MAP CLICK/////////
        var _mapClickEffect = function (e){
            console.log("Map click effect")
            L.DomEvent.stopPropagation(e); 
            map.removeEventListener('mousemove');
            changeRadius = false;
            //if(!changeRadius){    
            outterLensesLayer.clearLayers();
            moved = false;
            lensCanMove = false;
            clicked = false;
            if(activeLENSNEWMENU != null){
                activeLENSNEWMENU.areaQuery.setStyle({fillOpacity:0})
                if(activeLENSNEWMENU.visibleOutsideMenuFlag == false){
                    outterLensesCircularHistoLayer.removeLayer(activeLENSNEWMENU.outsideCircleHistogram)
                }
            }
            map.removeEventListener("click",_intervalsClickEffect)
        }
        map.on({
            mousedown: function (e) {
                L.DomEvent.stopPropagation(e);
                if(createQueryLensesFlag || createAttributeLensesFlag){
                    locationCreation = e.latlng;

                    let from = turf.point([locationCreation.lat, locationCreation.lng]);
                    let optionsCreateCirc = {units: 'kilometers'};
                    let circleBeforeCreating;
                    let mapPressForCreation = true;
                    notClickedLens = true;
                    map.on('mousemove', function (event) {
                        L.DomEvent.stopPropagation(event);
                        if(mapPressForCreation && notClickedLens && !clicked && (createQueryLensesFlag || createAttributeLensesFlag)){
                            
                            map.dragging.disable();
                            movedCreateLens = true;

                            let to = turf.point([event.latlng.lat, event.latlng.lng]);


                            let distance = turf.distance(from, to, optionsCreateCirc);
                            radiusValue = distance * 1000;
                            if(radiusValue >= 50){
                                if(!createdAlreadyFlag){    
                                    circleBeforeCreating =  L.circle([locationCreation.lat, locationCreation.lng], {
                                        color: 'white',
                                        fillColor: 'white',
                                        fillOpacity: 0.5,
                                        radius: radiusValue,
                                        pane: 'lensPane'
                                    }).addTo(lensPreCreationLayer);
                                    createdAlreadyFlag = true;
                                    sizeBellow25k = true;
                                }
                                else{
                                    if(25000 < radiusValue){
                                        circleBeforeCreating.setStyle({color:'DarkRed',fillColor: 'red'});
                                        sizeBellow25k = false;
                                    }
                                    else{
                                        circleBeforeCreating.setStyle({color:'white',fillColor: 'white'});
                                        sizeBellow25k = true;
                                    }
                                    circleBeforeCreating.setRadius(radiusValue);
                                }
                            }
                            else{
                                if(createdAlreadyFlag){
                                    lensPreCreationLayer.clearLayers();
                                    createdAlreadyFlag = false;
                                }
                            }
                        }
                            
                        
                        
                    });
                }
            },
            mouseup: function (e) {
                L.DomEvent.stopPropagation(e);
                map.removeEventListener('mousemove');
                lensPreCreationLayer.clearLayers();
                if (movedCreateLens && createdAlreadyFlag && sizeBellow25k) {
                    map.dragging.enable();
                    onMapClick(locationCreation, radiusValue);
                    createQueryLensesFlag = false;
                    createAttributeLensesFlag = false;
                    document.getElementsByClassName("not-tabFilter")[0].style.backgroundColor ="#14599100"
                    document.getElementsByClassName("not-tabAttr")[0].style.backgroundColor ="#14599100"
                    /*container1.style.backgroundColor = 'white'; 
                    container2.style.backgroundColor = 'white';*/
                }
                createdAlreadyFlag = false;
                movedCreateLens = false;
                sizeBellow25k = false;
                map.dragging.enable();
            }
        });
        map.on("click",_mapClickEffect)
        function onMapClick(location,radiusValue) {
            console.log(location);
            console.log(radiusValue);
            if(createQueryLensesFlag){   
                queryLensMenu(location,radiusValue);
                document.getElementsByClassName("not-tabFilter")[0].style.backgroundColor ="#14599100"
            }
            else if(createAttributeLensesFlag){
                attributeLensMenu(location,radiusValue);
                document.getElementsByClassName("not-tabAttr")[0].style.backgroundColor ="#14599100"
            }
        }


        /////
        /////
        /////

        
        /////
        ///// Menus for lens creation
        /////

        function queryLensMenu(locationLatLng,radius){
            let location= locationLatLng;
            createLens(location.lng, location.lat, radius,"Default",0,0).createLayers();
            
        }
        async function attributeLensMenu(locationLatLng,radius){
            //lensPreCreationLayer.clearLayers();
            let holder = createALens(locationLatLng, radius,'velocity','color')
            holder = await holder.createAreas();
            
            //holder.createLayers();
        }

        /////
        /////
        /////

        /////
        ///// Create Lens' circle (lens it self)
        /////

        function createLens(lng, lat, radiusQuery, _type, minVal, maxVal){
            let lens = { areaQuery : L.circle([lat, lng], {
                    color: 'DarkRed',
                    fillColor: 'red',
                    fillOpacity: 0.6,
                    radius: radiusQuery,
                    pane: 'lensPane'
                }).addTo(lensesLayer),
                outsideCircle : null,
                lngLat : [lat,lng],
                radiusQuery : radiusQuery,
                type : _type,
                minV : minVal,
                maxV : maxVal,
                lngLatOLD : [lat,lng],
                radiusQueryOLD : radiusQuery,
                typeOLD : _type,
                minVOLD : minVal,
                maxVOLD : maxVal,
                lID : null,
                bounds : null,
                radiusChangeFlag: false,
                pickerStart: null,
                pickerEnd: null,
                getRadiusFlag(){
                    return this.radiusChangeFlag;
                },
                setRadiusFlag(value){
                    if(value == true || value == false)
                        this.radiusChangeFlag = value;
                },
                getMinV: function (){
                    return this.minV;
                },
                getMaxV: function (){
                    return this.maxV;
                },
                getType: function (){
                    return this.type;
                },
                setMinV: function (value){
                    this.minV = value;
                },
                setMaxV: function (value){
                    this.maxV = value;
                },
                setType: function (value){
                    this.type = value;
                },
                setLngLat : function (value){
                    this.lngLat = value;
                },
                getMinVOLD: function (){
                    return this.minVOLD;
                },
                getMaxVOLD: function (){
                    return this.maxVOLD;
                },
                getTypeOLD: function (){
                    return this.typeOLD;
                },
                setMinVOLD: function (value){
                    this.minVOLD = value;
                },
                setMaxVOLD: function (value){
                    this.maxVOLD = value;
                },
                setTypeOLD: function (value){
                    this.typeOLD = value;
                },
                setLngLatOLD : function (value){
                    this.lngLatOLD = value;
                },
                setBounds : function (value){
                    this.bounds = value;
                },
                setlID : function (value){
                    this.lID = value;
                },
                getLngLat : function (){
                    return this.lngLat;
                },
                getLngLatOLD : function (){
                    return this.lngLatOLD;
                },
                getBound : function (){
                    return this.bounds;
                },
                getlID : function (){
                    return this.lID;
                },
                setOutsideCircle: function(circle){
                    this.outsideCircle = circle;
                },
                setRadius : function (value){
                    
                    this.areaQuery.setRadius(value);
                    this.radiusQuery = value;
                    
                },
                getRadius : function (){
                    return this.radiusQuery;
                },
                setRadiusOLD : function (value){
                    this.deleteFromZORDER();
                    this.insertZORDER();
                    this.radiusQueryOLD = value;
                },
                getRadiusOLD : function (){
                    return this.radiusQueryOLD;
                },
                insertZORDER(){
                    if(lensArrayZORDER.length == 0){
                        lensArrayZORDER.push(this)
                    }
                    else{
                        let flagMeteu = false;
                        for(let ind = 0;ind <= lensArrayZORDER.length-1;ind++){
                            if (lensArrayZORDER[ind].getRadius()>this.getRadius()) continue;
                            else if (lensArrayZORDER[ind].getRadius() <= this.getRadius()){
                                lensArrayZORDER.splice(ind, 0, this);
                                flagMeteu = true;
                                console.log("ZORDER")
                                console.log(lensArrayZORDER)
                                
                                break;
                            }
                            
                        }
                        if(!flagMeteu){
                            lensArrayZORDER.push(this)
                        }
                        updateZORDER()
                    }
                },
                deleteFromZORDER(){
                    for(let i = lensArrayZORDER.length - 1; i >= 0; i--) {
                        if(lensArrayZORDER[i] === this) {
                            lensArrayZORDER.splice(i, 1);
                            console.log(lensArrayZORDER);
                            break;
                        }
                    }
                },
                colorSuccess : function() {
                    if(this.getType() == "Default"){
                        console.log("I will now paint the Pass by circle again ....")
                        lens.areaQuery.setStyle({color: 'DodgerBlue', fillColor: 'DodgerBlue', fillOpacity: 0});
                    }
                    else if(this.getType() == "Start"){
                        console.log("I will now paint the Start circle again ....")
                        lens.areaQuery.setStyle({color: 'MediumSeaGreen', fillColor: 'MediumSeaGreen', fillOpacity: 0});
                    }
                    else if(this.getType() == "End"){
                        console.log("I will now paint the End circle again ....")
                        lens.areaQuery.setStyle({color: 'Violet', fillColor: 'Violet', fillOpacity: 0});
                    }
                    else if(this.getType() == "Vel_avg"){
                        console.log("I will now paint the End circle again ....")
                        lens.areaQuery.setStyle({color: 'orange', fillColor: 'orange', fillOpacity: 0});
                    }
                    else if(this.getType() == "Length"){
                        console.log("I will now paint the End circle again ....")
                        lens.areaQuery.setStyle({color: 'SlateBlue', fillColor: 'SlateBlue', fillOpacity: 0});
                    }
                    else if(this.getType() == "Time_Interval"){
                        console.log("I will now paint the End circle again ....")
                        lens.areaQuery.setStyle({color: 'purple', fillColor: 'purple', fillOpacity: 0});
                    }
                    else if(this.getType() == "Time_Duration"){
                        console.log("I will now paint the End circle again ....")
                        lens.areaQuery.setStyle({color: 'DarkTurquoise ', fillColor: 'DarkTurquoise ', fillOpacity: 0.2});
                    }
                },
                createLayers: function(){
                    //lensPreCreationLayer.clearLayers();
                    console.log("Im removing the map now and adding new ones afterwards")
                    
                    let areasArray = [];
                    attOPACITYLensesArray.forEach(function(lensInOpacArray){
                        areasArray.push(lensInOpacArray.overallArea.geometry);
                    })
                    if(defaultLayerFlag){
                        if(defaultLayer != null){
                            defaultLayerFlag = false;
                            map.removeLayer(defaultLayer);
                        }

                    }

                    if(lastMarkerGroupID !=null){
                        markerGroup.removeLayer(lastMarkerGroupID);
                        lastMarkerGroupID = null;
                    }
                    if(lastMarkerGroupID1 !=null){
                        markerGroup1.removeLayer(lastMarkerGroupID1);
                        lastMarkerGroupID1 = null;
                    }
                    if(lastMarkerGroupID2 !=null){
                        markerGroup2.removeLayer(lastMarkerGroupID2);
                        lastMarkerGroupID2 = null;
                    }
                    if(lastMarkerGroupID3 !=null){
                        markerGroup3.removeLayer(lastMarkerGroupID3);
                        lastMarkerGroupID3 = null;
                    }

                        // Create URL
                    let urlString3 = "query/trajectory_lines/"  + this.getLngLat()[1] + "/" + this.getLngLat()[0] + "/" + this.getRadius() + "/" + this.getType() + "/" + this.getMinV() + "/" + this.getMaxV();
                    let urlString2 = "query/trajectory_lines1/" + this.getLngLat()[1] + "/" + this.getLngLat()[0] + "/" + this.getRadius() + "/" + this.getType() + "/" + this.getMinV() + "/" + this.getMaxV();
                    let urlString1 = "query/trajectory_lines2/" + this.getLngLat()[1] + "/" + this.getLngLat()[0] + "/" + this.getRadius() + "/" + this.getType() + "/" + this.getMinV() + "/" + this.getMaxV();
                    let urlString  = "query/trajectory_lines3/" + this.getLngLat()[1] + "/" + this.getLngLat()[0] + "/" + this.getRadius() + "/" + this.getType() + "/" + this.getMinV() + "/" + this.getMaxV();
                    
                    let contadordeCenas = 0
                    let thisVar = this;

                    let newData = $.ajax({
                        url: urlString,
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({areasArray}),
                        success: console.log("Data successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    }) 
                    $.when(newData).done(function() {
                        if(newData.responseJSON.features != null){
                            let tracksToDraw = L.geoJson(newData.responseJSON,firstStyle);
                            tracksToDraw.addTo(markerGroup);
                            lastMarkerGroupID = tracksToDraw._leaflet_id;
                            thisVar.colorSuccess();
                        }
                        lensesLayer.bringToFront();
                        contadordeCenas += 1
                        if(contadordeCenas == 4){
                            let newDataMax = $.ajax({
                                url: "/maxVel/maxLength/maxTime/maxDuration",
                                type: 'GET',
                                dataType:'json',
                                success: console.log("1 successfully loaded!"),
                                error: function (xhr) {
                                    alert(xhr.statusText)
                                }
                                
                            })
                            $.when(newDataMax).done(function() {
                                clearBox("my_dataviz")
                                clearBox("my_datavizLENGTH")
                                clearBox("my_datavizDURATION")
                                clearBox("my_datavizTIME")
                                clearBox("totalNumTracks")
                                clearBox("averageVelocityValue")
                                clearBox("averageLengthValue")
                                console.log("Im removing the map now and adding new ones afterwards")
                                console.log(newDataMax)
                                maxArrayValuesGlobal.velocity = newDataMax.responseJSON.velocity
                                maxArrayValuesGlobal.length = newDataMax.responseJSON.length
                                maxArrayValuesGlobal.duration = newDataMax.responseJSON.duration
                                maxArrayValuesGlobal.timemax = newDataMax.responseJSON.timemax
                                maxArrayValuesGlobal.timemin = newDataMax.responseJSON.timemin
                                document.getElementById("totalNumTracks").innerHTML = newDataMax.responseJSON.totalTracks
                                document.getElementById("averageVelocityValue").innerHTML = newDataMax.responseJSON.velocity_avg
                                document.getElementById("averageLengthValue").innerHTML = newDataMax.responseJSON.length_avg/1000
                                document.getElementById("averageDurationValue").innerHTML = newDataMax.responseJSON.duration_avg.hours + ":" + newDataMax.responseJSON.duration_avg.minutes + ":" + newDataMax.responseJSON.duration_avg.seconds
                                createVelocityHistogram(newDataMax.responseJSON.velocity);
                                createLengthHistogram(newDataMax.responseJSON.length);
                                createDurationHistogram(newDataMax.responseJSON.duration);
                                createTimeHistogram(newDataMax.responseJSON.timemax, newDataMax.responseJSON.timemin);
                            });
                        }
                    }); 
                    let newData1 = $.ajax({
                        url: urlString1,
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({areasArray}),
                        success: console.log("Data successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    }) 
                    $.when(newData1).done(function() {
                        if(newData1.responseJSON.features != null){
                            let tracksToDraw = L.geoJson(newData1.responseJSON,firstStyle1);
                            tracksToDraw.addTo(markerGroup1);
                            lastMarkerGroupID1 = tracksToDraw._leaflet_id;
                            thisVar.colorSuccess();
                        }
                        lensesLayer.bringToFront();
                        contadordeCenas += 1
                        if(contadordeCenas == 4){
                            let newDataMax = $.ajax({
                                url: "/maxVel/maxLength/maxTime/maxDuration",
                                type: 'GET',
                                dataType:'json',
                                success: console.log("1 successfully loaded!"),
                                error: function (xhr) {
                                    alert(xhr.statusText)
                                }
                                
                            })
                            $.when(newDataMax).done(function() {
                                clearBox("my_dataviz")
                                clearBox("my_datavizLENGTH")
                                clearBox("my_datavizDURATION")
                                clearBox("my_datavizTIME")
                                console.log("Im removing the map now and adding new ones afterwards")
                                console.log(newDataMax)
                                maxArrayValuesGlobal.velocity = newDataMax.responseJSON.velocity
                                maxArrayValuesGlobal.length = newDataMax.responseJSON.length
                                maxArrayValuesGlobal.duration = newDataMax.responseJSON.duration
                                maxArrayValuesGlobal.timemax = newDataMax.responseJSON.timemax
                                maxArrayValuesGlobal.timemin = newDataMax.responseJSON.timemin
                                document.getElementById("totalNumTracks").innerHTML = newDataMax.responseJSON.totalTracks
                                document.getElementById("averageVelocityValue").innerHTML = newDataMax.responseJSON.velocity_avg
                                document.getElementById("averageLengthValue").innerHTML = newDataMax.responseJSON.length_avg/1000
                                document.getElementById("averageDurationValue").innerHTML = newDataMax.responseJSON.duration_avg.hours + ":" + newDataMax.responseJSON.duration_avg.minutes + ":" + newDataMax.responseJSON.duration_avg.seconds
                                createVelocityHistogram(maxArrayValuesGlobal.velocity);
                                createLengthHistogram(maxArrayValuesGlobal.length);
                                createDurationHistogram(maxArrayValuesGlobal.duration);
                                createTimeHistogram(maxArrayValuesGlobal.timemax, maxArrayValuesGlobal.timemin);
                            });
                        }
                    });
                    let newData2 = $.ajax({
                        url: urlString2,
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({areasArray}),
                        success: console.log("Data successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    }) 
                    $.when(newData2).done(function() {
                        if(newData2.responseJSON.features != null){
                            let tracksToDraw = L.geoJson(newData2.responseJSON,firstStyle2);
                            tracksToDraw.addTo(markerGroup2);
                            lastMarkerGroupID2 = tracksToDraw._leaflet_id;
                            thisVar.colorSuccess();
                        }
                        lensesLayer.bringToFront();
                        contadordeCenas += 1
                        if(contadordeCenas == 4){
                            let newDataMax = $.ajax({
                                url: "/maxVel/maxLength/maxTime/maxDuration",
                                type: 'GET',
                                dataType:'json',
                                success: console.log("1 successfully loaded!"),
                                error: function (xhr) {
                                    alert(xhr.statusText)
                                }
                                
                            })
                            $.when(newDataMax).done(function() {
                                clearBox("my_dataviz")
                                clearBox("my_datavizLENGTH")
                                clearBox("my_datavizDURATION")
                                clearBox("my_datavizTIME")
                                console.log("Im removing the map now and adding new ones afterwards")
                                console.log(newDataMax)
                                maxArrayValuesGlobal.velocity = newDataMax.responseJSON.velocity
                                maxArrayValuesGlobal.length = newDataMax.responseJSON.length
                                maxArrayValuesGlobal.duration = newDataMax.responseJSON.duration
                                maxArrayValuesGlobal.timemax = newDataMax.responseJSON.timemax
                                maxArrayValuesGlobal.timemin = newDataMax.responseJSON.timemin
                                document.getElementById("totalNumTracks").innerHTML = newDataMax.responseJSON.totalTracks
                                document.getElementById("averageVelocityValue").innerHTML = newDataMax.responseJSON.velocity_avg
                                document.getElementById("averageLengthValue").innerHTML = newDataMax.responseJSON.length_avg/1000
                                document.getElementById("averageDurationValue").innerHTML = newDataMax.responseJSON.duration_avg.hours + ":" + newDataMax.responseJSON.duration_avg.minutes + ":" + newDataMax.responseJSON.duration_avg.seconds
                                createVelocityHistogram(newDataMax.responseJSON.velocity);
                                createLengthHistogram(newDataMax.responseJSON.length);
                                createDurationHistogram(newDataMax.responseJSON.duration);
                                createTimeHistogram(newDataMax.responseJSON.timemax, newDataMax.responseJSON.timemin);
                            });
                        }
                    });
                    let newData3 = $.ajax({
                        url: urlString3,
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({areasArray}),
                        success: console.log("Data successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    }) 
                    $.when(newData3).done(function() {
                        if(newData3.responseJSON.features != null){
                            let tracksToDraw = L.geoJson(newData3.responseJSON,firstStyle3);
                            tracksToDraw.addTo(markerGroup3);
                            lastMarkerGroupID3 = tracksToDraw._leaflet_id;
                            thisVar.colorSuccess();
                        }
                        lensesLayer.bringToFront();
                        contadordeCenas += 1
                        if(contadordeCenas == 4){
                            let newDataMax = $.ajax({
                                url: "/maxVel/maxLength/maxTime/maxDuration",
                                type: 'GET',
                                dataType:'json',
                                success: console.log("1 successfully loaded!"),
                                error: function (xhr) {
                                    alert(xhr.statusText)
                                }
                                
                            })
                            $.when(newDataMax).done(function() {
                                clearBox("my_dataviz")
                                clearBox("my_datavizLENGTH")
                                clearBox("my_datavizDURATION")
                                clearBox("my_datavizTIME")
                                console.log("Im removing the map now and adding new ones afterwards")
                                console.log(newDataMax)
                                maxArrayValuesGlobal.velocity = newDataMax.responseJSON.velocity
                                maxArrayValuesGlobal.length = newDataMax.responseJSON.length
                                maxArrayValuesGlobal.duration = newDataMax.responseJSON.duration
                                maxArrayValuesGlobal.timemax = newDataMax.responseJSON.timemax
                                maxArrayValuesGlobal.timemin = newDataMax.responseJSON.timemin
                                document.getElementById("totalNumTracks").innerHTML = newDataMax.responseJSON.totalTracks
                                document.getElementById("averageVelocityValue").innerHTML = newDataMax.responseJSON.velocity_avg
                                document.getElementById("averageLengthValue").innerHTML = newDataMax.responseJSON.length_avg/1000
                                document.getElementById("averageDurationValue").innerHTML = newDataMax.responseJSON.duration_avg.hours + ":" + newDataMax.responseJSON.duration_avg.minutes + ":" + newDataMax.responseJSON.duration_avg.seconds
                                createVelocityHistogram(newDataMax.responseJSON.velocity);
                                createLengthHistogram(newDataMax.responseJSON.length);
                                createDurationHistogram(newDataMax.responseJSON.duration);
                                createTimeHistogram(newDataMax.responseJSON.timemax, newDataMax.responseJSON.timemin);
                            });
                        }
                    });
                    
                    for(i = 0; i < attLensesArray.length; i++){
                        attLensesArray[i].updateALL();
                    };
                    
                },
                deleteLayers: function(){
                    lensesLayer.removeLayer(lens.areaQuery);
                    this.deleteFromZORDER();
                    if(lastMarkerGroupID !=null){
                        markerGroup.removeLayer(lastMarkerGroupID);
                        lastMarkerGroupID = null;
                    }
                    if(lastMarkerGroupID1 !=null){
                        markerGroup1.removeLayer(lastMarkerGroupID1);
                        lastMarkerGroupID1 = null;
                    }
                    if(lastMarkerGroupID2 !=null){
                        markerGroup2.removeLayer(lastMarkerGroupID2);
                        lastMarkerGroupID2 = null;
                    }
                    if(lastMarkerGroupID3 !=null){
                        markerGroup3.removeLayer(lastMarkerGroupID3);
                        lastMarkerGroupID3 = null;
                    }
                    let urlString3 = "queryRemoval/trajectory_lines/"  + this.getLngLat()[1] + "/" + this.getLngLat()[0] + "/" + this.getRadius() + "/" + this.getType()  + "/" + this.getMinV() + "/" + this.getMaxV();
                    let urlString2 = "queryRemoval/trajectory_lines1/" + this.getLngLat()[1] + "/" + this.getLngLat()[0] + "/" + this.getRadius() + "/" + this.getType()  + "/" + this.getMinV() + "/" + this.getMaxV();
                    let urlString1 = "queryRemoval/trajectory_lines2/" + this.getLngLat()[1] + "/" + this.getLngLat()[0] + "/" + this.getRadius() + "/" + this.getType()  + "/" + this.getMinV() + "/" + this.getMaxV();
                    let urlString  = "queryRemoval/trajectory_lines3/" + this.getLngLat()[1] + "/" + this.getLngLat()[0] + "/" + this.getRadius() + "/" + this.getType()  + "/" + this.getMinV() + "/" + this.getMaxV();
                    let contadordeCenas = 0
                    let newData = $.ajax({
                        url: urlString,
                        type: 'GET',
                        dataType:'json',
                        success: console.log("1 successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    })
                    $.when(newData).done(function() {
                        
                        console.log("Im removing the map now and adding new ones afterwards")
                        
                        if(newData.responseJSON.features != null){
                            let tracksToDraw = L.geoJson(newData.responseJSON,firstStyle);
                            tracksToDraw.addTo(markerGroup);
                            let idTracks = tracksToDraw._leaflet_id;
                            lastMarkerGroupID = tracksToDraw._leaflet_id;
                            
                        }
                        lensesLayer.bringToFront();
                        contadordeCenas += 1
                        if(contadordeCenas == 4){
                            let newDataMax = $.ajax({
                                url: "/maxVel/maxLength/maxTime/maxDuration",
                                type: 'GET',
                                dataType:'json',
                                success: console.log("1 successfully loaded!"),
                                error: function (xhr) {
                                    alert(xhr.statusText)
                                }
                                
                            })
                            $.when(newDataMax).done(function() {
                                clearBox("my_dataviz")
                                clearBox("my_datavizLENGTH")
                                clearBox("my_datavizDURATION")
                                clearBox("my_datavizTIME")
                                console.log("Im removing the map now and adding new ones afterwards")
                                console.log(newDataMax)
                                maxArrayValuesGlobal.velocity = newDataMax.responseJSON.velocity
                                maxArrayValuesGlobal.length = newDataMax.responseJSON.length
                                maxArrayValuesGlobal.duration = newDataMax.responseJSON.duration
                                maxArrayValuesGlobal.timemax = newDataMax.responseJSON.timemax
                                maxArrayValuesGlobal.timemin = newDataMax.responseJSON.timemin
                                document.getElementById("totalNumTracks").innerHTML = newDataMax.responseJSON.totalTracks
                                document.getElementById("averageVelocityValue").innerHTML = newDataMax.responseJSON.velocity_avg
                                document.getElementById("averageLengthValue").innerHTML = newDataMax.responseJSON.length_avg/1000
                                document.getElementById("averageDurationValue").innerHTML = newDataMax.responseJSON.duration_avg.hours + ":" + newDataMax.responseJSON.duration_avg.minutes + ":" + newDataMax.responseJSON.duration_avg.seconds
                                createVelocityHistogram(newDataMax.responseJSON.velocity);
                                createLengthHistogram(newDataMax.responseJSON.length);
                                createDurationHistogram(newDataMax.responseJSON.duration);
                                createTimeHistogram(newDataMax.responseJSON.timemax, newDataMax.responseJSON.timemin);
                            });
                        }
                        
                    });
                    let newData1 = $.ajax({
                        url: urlString1,
                        type: 'GET',
                        dataType:'json',
                        success: console.log("2 successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    })
                    $.when(newData1).done(function() {
                        
                        console.log("Im removing the map now and adding new ones afterwards")
                        
                        if(newData1.responseJSON.features != null){
                            let tracksToDraw = L.geoJson(newData1.responseJSON,firstStyle1);
                            tracksToDraw.addTo(markerGroup1);
                            lastMarkerGroupID1 = tracksToDraw._leaflet_id;
                            
                        }
                        lensesLayer.bringToFront();
                        contadordeCenas += 1
                        if(contadordeCenas == 4){
                            let newDataMax = $.ajax({
                                url: "/maxVel/maxLength/maxTime/maxDuration",
                                type: 'GET',
                                dataType:'json',
                                success: console.log("1 successfully loaded!"),
                                error: function (xhr) {
                                    alert(xhr.statusText)
                                }
                                
                            })
                            $.when(newDataMax).done(function() {
                                clearBox("my_dataviz")
                                clearBox("my_datavizLENGTH")
                                clearBox("my_datavizDURATION")
                                clearBox("my_datavizTIME")
                                console.log("Im removing the map now and adding new ones afterwards")
                                console.log(newDataMax)
                                maxArrayValuesGlobal.velocity = newDataMax.responseJSON.velocity
                                maxArrayValuesGlobal.length = newDataMax.responseJSON.length
                                maxArrayValuesGlobal.duration = newDataMax.responseJSON.duration
                                maxArrayValuesGlobal.timemax = newDataMax.responseJSON.timemax
                                maxArrayValuesGlobal.timemin = newDataMax.responseJSON.timemin
                                document.getElementById("totalNumTracks").innerHTML = newDataMax.responseJSON.totalTracks
                                document.getElementById("averageVelocityValue").innerHTML = newDataMax.responseJSON.velocity_avg
                                document.getElementById("averageLengthValue").innerHTML = newDataMax.responseJSON.length_avg/1000
                                document.getElementById("averageDurationValue").innerHTML = newDataMax.responseJSON.duration_avg.hours + ":" + newDataMax.responseJSON.duration_avg.minutes + ":" + newDataMax.responseJSON.duration_avg.seconds
                                createVelocityHistogram(newDataMax.responseJSON.velocity);
                                createLengthHistogram(newDataMax.responseJSON.length);
                                createDurationHistogram(newDataMax.responseJSON.duration);
                                createTimeHistogram(newDataMax.responseJSON.timemax, newDataMax.responseJSON.timemin);
                            });
                        }
                    });
                    let newData2 = $.ajax({
                        url: urlString2,
                        type: 'GET',
                        dataType:'json',
                        success: console.log("3 successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    })
                    $.when(newData2).done(function() {
                        
                        console.log("Im removing the map now and adding new ones afterwards")
                        
                        if(newData2.responseJSON.features != null){
                            let tracksToDraw = L.geoJson(newData2.responseJSON,firstStyle2);
                            tracksToDraw.addTo(markerGroup2);
                            lastMarkerGroupID2 = tracksToDraw._leaflet_id;
                            
                        }
                        lensesLayer.bringToFront();
                        contadordeCenas += 1
                        if(contadordeCenas == 4){
                            let newDataMax = $.ajax({
                                url: "/maxVel/maxLength/maxTime/maxDuration",
                                type: 'GET',
                                dataType:'json',
                                success: console.log("1 successfully loaded!"),
                                error: function (xhr) {
                                    alert(xhr.statusText)
                                }
                                
                            })
                            $.when(newDataMax).done(function() {
                                clearBox("my_dataviz")
                                clearBox("my_datavizLENGTH")
                                clearBox("my_datavizDURATION")
                                clearBox("my_datavizTIME")
                                console.log("Im removing the map now and adding new ones afterwards")
                                console.log(newDataMax)
                                maxArrayValuesGlobal.velocity = newDataMax.responseJSON.velocity
                                maxArrayValuesGlobal.length = newDataMax.responseJSON.length
                                maxArrayValuesGlobal.duration = newDataMax.responseJSON.duration
                                maxArrayValuesGlobal.timemax = newDataMax.responseJSON.timemax
                                maxArrayValuesGlobal.timemin = newDataMax.responseJSON.timemin
                                document.getElementById("totalNumTracks").innerHTML = newDataMax.responseJSON.totalTracks
                                document.getElementById("averageVelocityValue").innerHTML = newDataMax.responseJSON.velocity_avg
                                document.getElementById("averageLengthValue").innerHTML = newDataMax.responseJSON.length_avg/1000
                                document.getElementById("averageDurationValue").innerHTML = newDataMax.responseJSON.duration_avg.hours + ":" + newDataMax.responseJSON.duration_avg.minutes + ":" + newDataMax.responseJSON.duration_avg.seconds
                                createVelocityHistogram(newDataMax.responseJSON.velocity);
                                createLengthHistogram(newDataMax.responseJSON.length);
                                createDurationHistogram(newDataMax.responseJSON.duration);
                                createTimeHistogram(newDataMax.responseJSON.timemax, newDataMax.responseJSON.timemin);
                            });
                        }
                    });
                    let newData3 = $.ajax({
                        url: urlString3,
                        type: 'GET',
                        dataType:'json',
                        success: console.log("4 successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    })
                    $.when(newData3).done(function() {
                        
                        console.log("Im removing the map now and adding new ones afterwards")
                        
                        if(newData3.responseJSON.features != null){
                            let tracksToDraw = L.geoJson(newData3.responseJSON,firstStyle3);
                            tracksToDraw.addTo(markerGroup3);
                            lastMarkerGroupID3 = tracksToDraw._leaflet_id;
                            
                        }
                        lensesLayer.bringToFront();
                        contadordeCenas += 1
                        if(contadordeCenas == 4){
                            let newDataMax = $.ajax({
                                url: "/maxVel/maxLength/maxTime/maxDuration",
                                type: 'GET',
                                dataType:'json',
                                success: console.log("1 successfully loaded!"),
                                error: function (xhr) {
                                    alert(xhr.statusText)
                                }
                                
                            })
                            $.when(newDataMax).done(function() {
                                clearBox("my_dataviz")
                                clearBox("my_datavizLENGTH")
                                clearBox("my_datavizDURATION")
                                clearBox("my_datavizTIME")
                                console.log("Im removing the map now and adding new ones afterwards")
                                console.log(newDataMax)
                                maxArrayValuesGlobal.velocity = newDataMax.responseJSON.velocity
                                maxArrayValuesGlobal.length = newDataMax.responseJSON.length
                                maxArrayValuesGlobal.duration = newDataMax.responseJSON.duration
                                maxArrayValuesGlobal.timemax = newDataMax.responseJSON.timemax
                                maxArrayValuesGlobal.timemin = newDataMax.responseJSON.timemin
                                document.getElementById("totalNumTracks").innerHTML = newDataMax.responseJSON.totalTracks
                                document.getElementById("averageVelocityValue").innerHTML = newDataMax.responseJSON.velocity_avg
                                document.getElementById("averageLengthValue").innerHTML = newDataMax.responseJSON.length_avg/1000
                                document.getElementById("averageDurationValue").innerHTML = newDataMax.responseJSON.duration_avg.hours + ":" + newDataMax.responseJSON.duration_avg.minutes + ":" + newDataMax.responseJSON.duration_avg.seconds
                                createVelocityHistogram(newDataMax.responseJSON.velocity);
                                createLengthHistogram(newDataMax.responseJSON.length);
                                createDurationHistogram(newDataMax.responseJSON.duration);
                                createTimeHistogram(newDataMax.responseJSON.timemax, newDataMax.responseJSON.timemin);
                            });
                        }
                    });

                    for(i = 0; i < attLensesArray.length; i++){
                        attLensesArray[i].updateALL();
                    };
                    
                },
                updateLENS: function(){
                    this.areaQuery.setStyle({color: 'DarkRed',fillColor: 'red',fillOpacity: 0.6});
                    let thisVar= this;
                    let areasArray = [];
                    attOPACITYLensesArray.forEach(function(lensInOpacArray){
                        areasArray.push(lensInOpacArray.overallArea.geometry);
                    })
                    if(lastMarkerGroupID !=null){
                        markerGroup.removeLayer(lastMarkerGroupID);
                        lastMarkerGroupID = null;
                    }
                    if(lastMarkerGroupID1 !=null){
                        markerGroup1.removeLayer(lastMarkerGroupID1);
                        lastMarkerGroupID1 = null;
                    }
                    if(lastMarkerGroupID2 !=null){
                        markerGroup2.removeLayer(lastMarkerGroupID2);
                        lastMarkerGroupID2 = null;
                    }
                    if(lastMarkerGroupID3 !=null){
                        markerGroup3.removeLayer(lastMarkerGroupID3);
                        lastMarkerGroupID3 = null;
                    }
                    let urlString3 = "queryMoved/trajectory_lines/"  + this.getLngLatOLD()[1] + "/" + this.getLngLatOLD()[0] + "/" + this.getRadiusOLD() + "/" + this.getTypeOLD() + "/" + this.getMinVOLD() + "/" + this.getMaxVOLD()+"/"  + 
                    this.getLngLat()[1] + "/" + this.getLngLat()[0] + "/" + this.getRadius() + "/" + this.getType() + "/" + this.getMinV() + "/" + this.getMaxV();
                    let urlString2 = "queryMoved/trajectory_lines1/" + this.getLngLatOLD()[1] + "/" + this.getLngLatOLD()[0] + "/" + this.getRadiusOLD() + "/" + this.getTypeOLD() + "/" + this.getMinVOLD() + "/" + this.getMaxVOLD()+"/"  + 
                    this.getLngLat()[1] + "/" + this.getLngLat()[0] + "/" + this.getRadius() + "/" + this.getType() + "/" + this.getMinV() + "/" + this.getMaxV();
                    let urlString1 = "queryMoved/trajectory_lines2/" + this.getLngLatOLD()[1] + "/" + this.getLngLatOLD()[0] + "/" + this.getRadiusOLD() + "/" + this.getTypeOLD() + "/" + this.getMinVOLD() + "/" + this.getMaxVOLD()+"/"  + 
                    this.getLngLat()[1] + "/" + this.getLngLat()[0] + "/" + this.getRadius() + "/" + this.getType() + "/" + this.getMinV() + "/" + this.getMaxV();
                    let urlString  = "queryMoved/trajectory_lines3/" + this.getLngLatOLD()[1] + "/" + this.getLngLatOLD()[0] + "/" + this.getRadiusOLD() + "/" + this.getTypeOLD() + "/" + this.getMinVOLD() + "/" + this.getMaxVOLD()+"/"  + 
                    this.getLngLat()[1] + "/" + this.getLngLat()[0] + "/" + this.getRadius() + "/" + this.getType() + "/" + this.getMinV() + "/" + this.getMaxV();
                    let contadordeCenas = 0;
                    let newData = $.ajax({
                        url: urlString,
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({areasArray}),
                        success: console.log("1 successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                    })
                    $.when(newData).done(function() {
                        
                        console.log("Im removing the map now and adding new ones afterwards")
                        
                        if(newData.responseJSON.features != null){
                            let tracksToDraw = L.geoJson(newData.responseJSON,firstStyle);
                            tracksToDraw.addTo(markerGroup);
                            let idTracks = tracksToDraw._leaflet_id;
                            lastMarkerGroupID = tracksToDraw._leaflet_id;
                            thisVar.colorSuccess();
                        }
                        
                        lensesLayer.bringToFront();
                        contadordeCenas += 1
                        if(contadordeCenas == 4){
                            let newDataMax = $.ajax({
                                url: "/maxVel/maxLength/maxTime/maxDuration",
                                type: 'GET',
                                dataType:'json',
                                success: console.log("1 successfully loaded!"),
                                error: function (xhr) {
                                    alert(xhr.statusText)
                                }
                                
                            })
                            $.when(newDataMax).done(function() {
                                clearBox("my_dataviz")
                                clearBox("my_datavizLENGTH")
                                clearBox("my_datavizDURATION")
                                clearBox("my_datavizTIME")
                                console.log("Im removing the map now and adding new ones afterwards")
                                console.log(newDataMax)
                                maxArrayValuesGlobal.velocity = newDataMax.responseJSON.velocity
                                maxArrayValuesGlobal.length = newDataMax.responseJSON.length
                                maxArrayValuesGlobal.duration = newDataMax.responseJSON.duration
                                maxArrayValuesGlobal.timemax = newDataMax.responseJSON.timemax
                                maxArrayValuesGlobal.timemin = newDataMax.responseJSON.timemin
                                document.getElementById("totalNumTracks").innerHTML = newDataMax.responseJSON.totalTracks
                                document.getElementById("averageVelocityValue").innerHTML = newDataMax.responseJSON.velocity_avg
                                document.getElementById("averageLengthValue").innerHTML = newDataMax.responseJSON.length_avg/1000
                                document.getElementById("averageDurationValue").innerHTML = newDataMax.responseJSON.duration_avg.hours + ":" + newDataMax.responseJSON.duration_avg.minutes + ":" + newDataMax.responseJSON.duration_avg.seconds
                                createVelocityHistogram(newDataMax.responseJSON.velocity);
                                createLengthHistogram(newDataMax.responseJSON.length);
                                createDurationHistogram(newDataMax.responseJSON.duration);
                                createTimeHistogram(newDataMax.responseJSON.timemax, newDataMax.responseJSON.timemin);
                            });
                        }
                        
                    });
                    let newData1 = $.ajax({
                        url: urlString1,
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({areasArray}),
                        success: console.log("2 successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    })
                    $.when(newData1).done(function() {
                        
                        console.log("Im removing the map now and adding new ones afterwards")
                        
                        if(newData1.responseJSON.features != null){
                            let tracksToDraw = L.geoJson(newData1.responseJSON,firstStyle1);
                            tracksToDraw.addTo(markerGroup1);
                            lastMarkerGroupID1 = tracksToDraw._leaflet_id;
                            thisVar.colorSuccess();
                        }
                        lensesLayer.bringToFront();
                        contadordeCenas += 1
                        if(contadordeCenas == 4){
                            let newDataMax = $.ajax({
                                url: "/maxVel/maxLength/maxTime/maxDuration",
                                type: 'GET',
                                dataType:'json',
                                success: console.log("1 successfully loaded!"),
                                error: function (xhr) {
                                    alert(xhr.statusText)
                                }
                                
                            })
                            $.when(newDataMax).done(function() {
                                clearBox("my_dataviz")
                                clearBox("my_datavizLENGTH")
                                clearBox("my_datavizDURATION")
                                clearBox("my_datavizTIME")
                                console.log("Im removing the map now and adding new ones afterwards")
                                console.log(newDataMax)
                                maxArrayValuesGlobal.velocity = newDataMax.responseJSON.velocity
                                maxArrayValuesGlobal.length = newDataMax.responseJSON.length
                                maxArrayValuesGlobal.duration = newDataMax.responseJSON.duration
                                maxArrayValuesGlobal.timemax = newDataMax.responseJSON.timemax
                                maxArrayValuesGlobal.timemin = newDataMax.responseJSON.timemin
                                document.getElementById("totalNumTracks").innerHTML = newDataMax.responseJSON.totalTracks
                                document.getElementById("averageVelocityValue").innerHTML = newDataMax.responseJSON.velocity_avg
                                document.getElementById("averageLengthValue").innerHTML = newDataMax.responseJSON.length_avg/1000
                                document.getElementById("averageDurationValue").innerHTML = newDataMax.responseJSON.duration_avg.hours + ":" + newDataMax.responseJSON.duration_avg.minutes + ":" + newDataMax.responseJSON.duration_avg.seconds
                                createVelocityHistogram(newDataMax.responseJSON.velocity);
                                createLengthHistogram(newDataMax.responseJSON.length);
                                createDurationHistogram(newDataMax.responseJSON.duration);
                                createTimeHistogram(newDataMax.responseJSON.timemax, newDataMax.responseJSON.timemin);
                            });
                        }
                    });
                    let newData2 = $.ajax({
                        url: urlString2,
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({areasArray}),
                        success: console.log("3 successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    })
                    $.when(newData2).done(function() {
                        
                        console.log("Im removing the map now and adding new ones afterwards")
                        
                        if(newData2.responseJSON.features != null){
                            let tracksToDraw = L.geoJson(newData2.responseJSON,firstStyle2);
                            tracksToDraw.addTo(markerGroup2);
                            lastMarkerGroupID2 = tracksToDraw._leaflet_id;
                            thisVar.colorSuccess();
                        }
                        lensesLayer.bringToFront();
                        contadordeCenas += 1
                        if(contadordeCenas == 4){
                            let newDataMax = $.ajax({
                                url: "/maxVel/maxLength/maxTime/maxDuration",
                                type: 'GET',
                                dataType:'json',
                                success: console.log("1 successfully loaded!"),
                                error: function (xhr) {
                                    alert(xhr.statusText)
                                }
                                
                            })
                            $.when(newDataMax).done(function() {
                                clearBox("my_dataviz")
                                clearBox("my_datavizLENGTH")
                                clearBox("my_datavizDURATION")
                                clearBox("my_datavizTIME")
                                console.log("Im removing the map now and adding new ones afterwards")
                                console.log(newDataMax)
                                maxArrayValuesGlobal.velocity = newDataMax.responseJSON.velocity
                                maxArrayValuesGlobal.length = newDataMax.responseJSON.length
                                maxArrayValuesGlobal.duration = newDataMax.responseJSON.duration
                                maxArrayValuesGlobal.timemax = newDataMax.responseJSON.timemax
                                maxArrayValuesGlobal.timemin = newDataMax.responseJSON.timemin
                                document.getElementById("totalNumTracks").innerHTML = newDataMax.responseJSON.totalTracks
                                document.getElementById("averageVelocityValue").innerHTML = newDataMax.responseJSON.velocity_avg
                                document.getElementById("averageLengthValue").innerHTML = newDataMax.responseJSON.length_avg/1000
                                document.getElementById("averageDurationValue").innerHTML = newDataMax.responseJSON.duration_avg.hours + ":" + newDataMax.responseJSON.duration_avg.minutes + ":" + newDataMax.responseJSON.duration_avg.seconds
                                createVelocityHistogram(newDataMax.responseJSON.velocity);
                                createLengthHistogram(newDataMax.responseJSON.length);
                                createDurationHistogram(newDataMax.responseJSON.duration);
                                createTimeHistogram(newDataMax.responseJSON.timemax, newDataMax.responseJSON.timemin);
                            });
                        }
                    });
                    let newData3 = $.ajax({
                        url: urlString3,
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({areasArray}),
                        success: console.log("4 successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    })
                    $.when(newData3).done(function() {
                        
                        console.log("Im removing the map now and adding new ones afterwards")
                        
                        if(newData3.responseJSON.features != null){
                            let tracksToDraw = L.geoJson(newData3.responseJSON,firstStyle3);
                            tracksToDraw.addTo(markerGroup3);
                            lastMarkerGroupID3 = tracksToDraw._leaflet_id;
                            thisVar.colorSuccess();
                        }
                        lensesLayer.bringToFront();
                        contadordeCenas += 1
                        if(contadordeCenas == 4){
                            let newDataMax = $.ajax({
                                url: "/maxVel/maxLength/maxTime/maxDuration",
                                type: 'GET',
                                dataType:'json',
                                success: console.log("1 successfully loaded!"),
                                error: function (xhr) {
                                    alert(xhr.statusText)
                                }
                                
                            })
                            $.when(newDataMax).done(function() {
                                clearBox("my_dataviz")
                                clearBox("my_datavizLENGTH")
                                clearBox("my_datavizDURATION")
                                clearBox("my_datavizTIME")
                                console.log("Im removing the map now and adding new ones afterwards")
                                console.log(newDataMax)
                                maxArrayValuesGlobal.velocity = newDataMax.responseJSON.velocity
                                maxArrayValuesGlobal.length = newDataMax.responseJSON.length
                                maxArrayValuesGlobal.duration = newDataMax.responseJSON.duration
                                maxArrayValuesGlobal.timemax = newDataMax.responseJSON.timemax
                                maxArrayValuesGlobal.timemin = newDataMax.responseJSON.timemin
                                document.getElementById("totalNumTracks").innerHTML = newDataMax.responseJSON.totalTracks
                                document.getElementById("averageVelocityValue").innerHTML = newDataMax.responseJSON.velocity_avg
                                document.getElementById("averageLengthValue").innerHTML = newDataMax.responseJSON.length_avg/1000
                                document.getElementById("averageDurationValue").innerHTML = newDataMax.responseJSON.duration_avg.hours + ":" + newDataMax.responseJSON.duration_avg.minutes + ":" + newDataMax.responseJSON.duration_avg.seconds
                                createVelocityHistogram(newDataMax.responseJSON.velocity);
                                createLengthHistogram(newDataMax.responseJSON.length);
                                createDurationHistogram(newDataMax.responseJSON.duration);
                                createTimeHistogram(newDataMax.responseJSON.timemax, newDataMax.responseJSON.timemin);
                            });
                        }
                    });

                    for(i = 0; i < attLensesArray.length; i++){
                        attLensesArray[i].updateALL();
                    };
                
                }
            };
            
            lens.setBounds(lens.areaQuery.getBounds());
            lens.insertZORDER() //insert into z-order array first time
            /*CALCULATE THE DISTANCE FROM ONE POINT TO ANOTHER IN PIXELS
            let northVar = map.latLngToLayerPoint(lens.areaQuery.getBounds().getNorthWest());
            let southVar = map.latLngToLayerPoint(lens.areaQuery.getBounds().getSouthWest());
            let numOfPixl = northVar.distanceTo(southVar);*/
            //className: 'outside-Circle'
            
                 
            let movedPos = false;
            let movedRadius = false;
            let movedOthers = false;

            lens.areaQuery.on({
                dbclick:function(e){
                    L.DomEvent.stopPropagation(e);
                },
                click: function(event1){
                    L.DomEvent.stopPropagation(event1);
                    createQueryLensesFlag = false;
                    createAttributeLensesFlag = false;
                    /*container1.style.backgroundColor = 'white'; 
                    container2.style.backgroundColor = 'white';*/
                    document.getElementsByClassName("not-tabFilter")[0].style.backgroundColor ="#14599100"
                    document.getElementsByClassName("not-tabAttr")[0].style.backgroundColor ="#14599100"
                    outterLensesLayer.clearLayers();
                    clicked = true;
                    let once = true;
                    //map.fitBounds(lens.getBound());
                    ///map.on('moveend', function(event) {
                    L.DomEvent.stopPropagation(event);
                    if(clicked && once){
                        once = false;

                        console.log("Im on the move event again...");
                        if(activeLENSNEWMENU != null){
                            activeLENSNEWMENU.areaQuery.setStyle({fillOpacity:0})
                            if(activeLENSNEWMENU.visibleOutsideMenuFlag == false){
                                outterLensesCircularHistoLayer.removeLayer(activeLENSNEWMENU.outsideCircleHistogram)
                            }
                        }
                        lens.areaQuery.setStyle({fillOpacity:0.3})
                        // code stuff
                        let northVar = map.latLngToLayerPoint(lens.areaQuery.getBounds().getNorthWest());
                        let southVar = map.latLngToLayerPoint(lens.areaQuery.getBounds().getSouthWest());
                        let numOfPixl = northVar.distanceTo(southVar);
                        /*let myOutsideCircle =  L.divIcon({className: 'outside-Circle', iconSize: [numOfPixl,numOfPixl], html: 
                            "<button class='myDeleteButton' style='z-index: 1000;position: fixed;margin-top: 2%;margin-left: 12.5%;'><img src='images/trash.png' style='width: 85%; height: 80%;'></button>"+
                            "<div class='dropdown' style='z-index: 1019; position:fixed;margin-left: 76.5%;margin-top: 2%;'><button class='dropbtn'><img src='images/type.png' style='width: 150%;height: 150%;margin: -25%;''></button><div class='dropdown-content'>" + 
                            "<button class='dropbtnOpt-default'>Pass by</button>"+
                            "<button class='dropbtnOpt-start'>Start point</button>"+
                            "<button class='dropbtnOpt-end'>End point</button>"+
                            "<button class='dropbtnOpt-duration'>Duration</button>"+
                            "<button class='dropbtnOpt-time'>Time</button>"+
                            "<button class='dropbtnOpt-length'>Length</button>"+
                            "<button class='dropbtnOpt-velocity'>Average velocity</button>"+
                            "</div></div>" +
                            "<button class='myIntervalsButton' style='z-index: 1019; position:fixed;margin-left: 96%;margin-top: 24%;'><img src='images/intervals.png' style='z-index: 999;width: 20px;height: 20px;    margin: inherit;margin-left: -1px;margin-top: -1px;'></button>"+
                            "<button class='myRadiusButton' style='margin-left: 89%;margin-top: 82.5%;position: static;'><img src='images/radius.png' style='z-index: 999;width: 150%;height: 150%;margin: inherit;margin-left: -3px;margin-top: -4px;'><span class='explanation' style='color:white;margin: -50%;'> \n"+lens.getRadius().toFixed(0)+"meters</span></button>"+
                            "<button class='myMoveButton' style='margin-left: 77%;margin-top: 5%;position: static;'><img src='images/move.png' style='    z-index: 999; width: 190%; height: 190%; margin: inherit; margin-left: -48%;margin-top: -43%;'></button>"+
                            "<div id='sliderRadius' align='center' style='z-index:1018;    position: absolute;    top: 50%;left: 50%;transform: translate(-50%, -50%);display:none;'></div>"+
                            "<div id='sliderIntervalVel' align='center' style='z-index:1018;    position: absolute;    top: 50%;left: 50%;transform: translate(-50%, -50%);display:none;'></div>"+
                            "<div id='sliderIntervalLength' align='center' style='z-index:1018;    position: absolute;    top: 50%;left: 50%;transform: translate(-50%, -50%);display:none;'></div>"+
                            "<div id='sliderIntervalDuration' align='center' style='z-index:1018;    position: absolute;    top: 50%;left: 50%;transform: translate(-50%, -50%);display:none;'></div>"+
                            "<div id='sliderIntervalTime' align='center' style='z-index:1018;    position: absolute;        top: 50%;left: 50%;transform: translate(-50%, -50%);display:none;'></div>"
                            });*/
                        
                        let myOutsideCircle =  L.divIcon({className: 'outside-Circle', iconSize: [300,200], html: 
                            "<div id='piemenu' data-wheelnav "+
                            "data-wheelnav-slicepath='DonutSlice' "+
                            "data-wheelnav-spreader data-wheelnav-spreaderpath='PieSpreader' "+
                            "data-wheelnav-marker data-wheelnav-markerpath='PieLineMarker' "+
                            "data-wheelnav-rotateoff "+
                            "data-wheelnav-navangle='9' "+
                            "data-wheelnav-titleheight='18' "+
                            "data-wheelnav-cssmode "+
                            "data-wheelnav-init>"+
                            "<div data-wheelnav-navitemimg='images/type.png' onmouseup='typeLENSNEWMENU()'></div>"+
                            "<div data-wheelnav-navitemimg='images/intervals.png' onmouseup='intervalsLENSNEWMENU(activeLENSNEWMENU)'></div>"+
                            "<div data-wheelnav-navitemimg='images/move.png' onmouseup='moveLENSNEWMENU(activeLENSNEWMENU)'></div>"+
                            "<div data-wheelnav-navitemimg='images/radius.png' onmouseup='radiusLENSNEWMENU(activeLENSNEWMENU)'></div>"+
                            "<div data-wheelnav-navitemimg='images/trash.png' onmouseup='deleteLENSNEWMENU(activeLENSNEWMENU)'></div>"+
                            "</div>"+ 
                            "<div id='type' style='margin-left:88%;margin-top: -40%;visibility:hidden'><ul>"+
                                "<lu><a style='color:#FFF' class='dropbtnOpt-default'>Pass by</a></lu>"+
                                "<lu><a style='color:#FFF' class='dropbtnOpt-start'>Start point</a></lu>"+
                                "<lu><a style='color:#FFF' class='dropbtnOpt-end'>End point</a></lu>"+
                                "<lu><a style='color:#FFF' class='dropbtnOpt-duration'>Duration</a></lu>"+
                                "<lu><a style='color:#FFF' class='dropbtnOpt-time'>Time</a></lu>"+
                                "<lu><a style='color:#FFF' class='dropbtnOpt-length'>Length</a></lu>"+
                                "<lu><a style='color:#FFF' class='dropbtnOpt-velocity'>Average velocity</a></lu>"+
                            "</ul></div>"+ 
                            "<div id='sliderIntervalVel' align='center' style='z-index:1018;    position: absolute;    top: 50%;left: 50%;transform: translate(-50%, -50%);display:none;'></div>"+
                            "<div id='sliderIntervalLength' align='center' style='z-index:1018;    position: absolute;    top: 50%;left: 50%;transform: translate(-50%, -50%);display:none;'></div>"+
                            "<div id='sliderIntervalDuration' align='center' style='z-index:1018;    position: absolute;    top: 50%;left: 50%;transform: translate(-50%, -50%);display:none;'></div>"+
                            
                            "<div id = 'timeSelectionMenu' style='visibility:hidden;margin-left: 88%;margin-top: -60%;width: 200px;height: 80px;background-color: #44444493;'>"+
                                "<div id='pickerStart' style='top:0px;left:0px'></div>"+
                                "<div id='pickerEnd' style='top:0px;left:0px'></div>"+
                                "<button id='toggleStart' class='square_btn start' style='width: 14%;height: 35%;margin: 5px;'><img src='images/timeStart.png' style='position: absolute;width: 25px;margin-top: -4%;margin-left: -4%;'></button>"+
                                "<input id='demoStart'>"+
                                "<img id='updateFilterButton' src='images/confirm.png' style='width: 25px;margin-left: 58%;height: 25px;margin-top: -10%;position: absolute;'>"+
                                "<button id='toggleEnd' class='square_btn end' style='width: 14%;height: 35%;margin: 5px;'><img src='images/timeEnd.png' style='position: absolute;width: 25px;margin-left: -4%;margin-top: -4%;'></button>"+
                                "<input id='demoEnd'>"+
                                "<img id='cancelFilterButton' src='images/cancel.png' style='width: 35px;height: 35px;position: absolute;margin-left: 0%;margin-top: 1%;'>"+
                            "</div>"+
                            "<div id='sliderIntervalTime' align='center' style='z-index:1018;    position: absolute;        top: 50%;left: 50%;transform: translate(-50%, -50%);display:none;'></div>"+
                            "<span class='explanation' style='color:"+ colorToUseWithMap+ ";    margin-top: 15%;position: absolute;margin-left: 66%;visibility:hidden'> \n"+lens.getRadius().toFixed(0)/1000+"Kilometers</span>"
                            /*"<button class='myDeleteButton' style='z-index: 1000;display: block;position: relative;margin: 46.5%;'><img src='images/trash.png' style='width: 85%; height: 80%;'></button>"+
                            "<div class='dropdown' style='z-index: 1019;display: block;margin-left: 80%;margin-top: -55%;'><button class='dropbtn'><img src='images/type.png' style='width: 150%;height: 150%;margin: -25%;''></button><div class='dropdown-content'>" + 
                            "<button class='dropbtnOpt-default'>Pass by</button>"+
                            "<button class='dropbtnOpt-start'>Start point</button>"+
                            "<button class='dropbtnOpt-end'>End point</button>"+
                            "<button class='dropbtnOpt-duration'>Duration</button>"+
                            "<button class='dropbtnOpt-time'>Time</button>"+
                            "<button class='dropbtnOpt-length'>Length</button>"+
                            "<button class='dropbtnOpt-velocity'>Average velocity</button>"+
                            "</div></div>" +
                            "<button class='myIntervalsButton' style='z-index: 1019; display: block;margin-left: 76%;margin-top: -40%;'><img src='images/intervals.png' style='z-index: 999;width: 20px;height: 20px;    margin: inherit;margin-left: -1px;margin-top: -1px;'></button>"+
                            "<button class='myRadiusButton' style='margin-left: 64%;margin-top: 5%;display: block;'><img src='images/radius.png' style='z-index: 999;width: 150%;height: 150%;margin: inherit;margin-left: -3px;margin-top: -4px;'><span class='explanation' style='color:white;margin: -50%;'> \n"+lens.getRadius().toFixed(0)+"meters</span></button>"+
                            "<button class='myMoveButton' style='margin-left: 47.5%;margin-top: -3%;display: block;'><img src='images/move.png' style='    z-index: 999; width: 190%; height: 190%; margin: inherit; margin-left: -48%;margin-top: -43%;'></button>"+
                            "<div id='sliderRadius' align='center' style='z-index:1018;    position: absolute;    top: 50%;left: 50%;transform: translate(-50%, -50%);display:none;'></div>"+
                            "<div id='sliderIntervalVel' align='center' style='z-index:1018;    position: absolute;    top: 50%;left: 50%;transform: translate(-50%, -50%);display:none;'></div>"+
                            "<div id='sliderIntervalLength' align='center' style='z-index:1018;    position: absolute;    top: 50%;left: 50%;transform: translate(-50%, -50%);display:none;'></div>"+
                            "<div id='sliderIntervalDuration' align='center' style='z-index:1018;    position: absolute;    top: 50%;left: 50%;transform: translate(-50%, -50%);display:none;'></div>"+
                            "<div id='sliderIntervalTime' align='center' style='z-index:1018;    position: absolute;        top: 50%;left: 50%;transform: translate(-50%, -50%);display:none;'></div>"*/
                            });




                        console.log(myOutsideCircle.options);
                        let outsideCircVar = L.marker(lens.getLngLat(), {icon: myOutsideCircle, pane: 'outtterLensPane'});
                        lens.setOutsideCircle(outsideCircVar);
                        activeLENSNEWMENU = lens;
                        outterLensesLayer.addLayer(lens.outsideCircle);
                        
                        var piemenu = new wheelnav('piemenu');
                        piemenu.wheelRadius = piemenu.wheelRadius * 0.83;
                        piemenu.navItemsContinuous = true;
                        piemenu.sliceAngle = 18;
                        piemenu.createWheel();
                        document.getElementById("wheelnav-piemenu-slice-4").style.fill = "#94342b"

                        if (lens.getType() == "Default" || lens.getType() == "Start" || lens.getType() == "End") {
                            //document.getElementsByClassName('myIntervalsButton')[0].style.background = "grey";
                            if(lens.getType() == "Default")
                                document.getElementsByClassName('dropbtnOpt-default')[0].style.background = "#0c270093";
                            else if (lens.getType() == "Start")
                                document.getElementsByClassName('dropbtnOpt-start')[0].style.background = "#0c270093";
                            else
                                document.getElementsByClassName('dropbtnOpt-end')[0].style.background = "#0c270093";
                        } 
                        else {
                            //document.getElementsByClassName('myIntervalsButton')[0].style.background = "#0c270093";
                            if (lens.getType() == "Time_Duration")
                                document.getElementsByClassName('dropbtnOpt-duration')[0].style.background = "#0c270093";
                            else if (lens.getType() == "Time_Interval")
                                document.getElementsByClassName('dropbtnOpt-time')[0].style.background = "#0c270093";
                            else if (lens.getType() == "Vel_avg")
                                document.getElementsByClassName('dropbtnOpt-velocity')[0].style.background = "#0c270093";
                            else
                                document.getElementsByClassName('dropbtnOpt-length')[0].style.background = "#0c270093";
                        }

                        
                        
                        
                        /*$('.myDeleteButton').click(function (e) {
                            lensCanMove=false;
                            clicked=false;
                            outterLensesLayer.clearLayers();
                            lens.deleteLayers();
                            for(i = 0; i < attLensesArray.length; i++){
                                attLensesArray[i].updateALL();
                            };
                        });  
                        $('.myMoveButton').click(function (e) {
                            L.DomEvent.stopPropagation(e); 
                            clicked=false;
                            lensCanMove = !lensCanMove;
                            if(lensCanMove){
                                document.getElementsByClassName('myRadiusButton')[0].style.visibility = "hidden";
                                document.getElementsByClassName('dropdown')[0].style.visibility = "hidden";
                                document.getElementsByClassName('myIntervalsButton')[0].style.visibility = "hidden";
                                document.getElementsByClassName('myDeleteButton')[0].style.visibility = "hidden";
                                map.zoomOut(1,true);
                                document.getElementsByClassName('myMoveButton')[0].style.backgroundColor = "#ff0000";

                                let mouseDown = false;
                                lens.outsideCircle.on({
                                    dbclick:function(e){
                                        L.DomEvent.stopPropagation(e);
                                    },
                                    click : function(e){
                                        L.DomEvent.stopPropagation(e);
                                    },
                                    mousedown: function (event) {
                                        L.DomEvent.stopPropagation(event);
                                        mouseDown = true;
                                        notClickedLens = false;
                                        
                                        map.on('mousemove', function (e) {
                                            createQueryLensesFlag = false;
                                            createAttributeLensesFlag = false;
                                            document.getElementsByClassName("not-tabFilter")[0].style.backgroundColor ="#14599100"
                                            document.getElementsByClassName("not-tabAttr")[0].style.backgroundColor ="#14599100"
                                            /*container1.style.backgroundColor = 'white'; 
                                            container2.style.backgroundColor = 'white';*/
                                            /*L.DomEvent.stopPropagation(e);
                                            console.log(lensCanMove);
                                            console.log(mouseDown);
                                            if(lensCanMove && mouseDown){
                                                
                                                if(!(moved)){
                                                    document.getElementsByClassName('myMoveButton')[0].style.visibility = "hidden";
                                                }
                                                
                                                map.dragging.disable();
                                                moved = true;
                                                lens.areaQuery.setLatLng(e.latlng);
                                                lens.outsideCircle.setLatLng(e.latlng);
                                                lens.lngLat = e.latlng;
                                                lens.setBounds(lens.areaQuery.getBounds());
                                                map.panInside(lens.getLngLat(),{padding:[200,200],duration:0.35});
                                                
                                            }
                                        });
                                    },
                                    mouseup: function(e){
                                        mouseDown = false;
                                        L.DomEvent.stopPropagation(e); 
                                        map.removeEventListener('mousemove');
                                        if(lensCanMove){
                                            
                                            if(moved){ 
                                                document.getElementsByClassName('myMoveButton')[0].style.visibility = "visible";
                                                moved = false;   
                                                map.dragging.enable();
                                                
                                                lens.setLngLat([e.latlng.lat,e.latlng.lng]);
                                                lens.updateLENS();
                                                lens.setLngLatOLD([e.latlng.lat,e.latlng.lng]);
                                                lens.setBounds(lens.areaQuery.getBounds());
                                                
                                                for(i = 0; i < attLensesArray.length; i++){
                                                    attLensesArray[i].updateALL();
                                                };
                                            }
                                        }
                                    },
                                    mouseout:function(){
                                        console.log("Bellow is the attLensesArray");
                                        console.log(attLensesArray);
                                        //outterLensesLayer.removeLayer(lens.outsideCircle);
                                        
                                    }
                                });
                            }
                            else{
                                map.zoomIn(1,true);
                                map.fitBounds(lens.getBound());

                                document.getElementsByClassName('myRadiusButton')[0].style.visibility = "visible";
                                document.getElementsByClassName('dropdown')[0].style.visibility = "visible";
                                document.getElementsByClassName('myIntervalsButton')[0].style.visibility = "visible";
                                document.getElementsByClassName('myDeleteButton')[0].style.visibility = "visible";

                                document.getElementsByClassName('myMoveButton')[0].style.backgroundColor = "#ff8400";
                            }
                            
                        });
                        $('.myIntervalsButton').click(function(e){
                            L.DomEvent.stopPropagation(e);

                            if(document.getElementById("sliderRadius").style.display=='none'){
                                if(lens.getType() == "Vel_avg") {

                                    if(document.getElementById("sliderIntervalVel").style.display=='none'){
                                        lens.areaQuery.setStyle({fillOpacity: 0.6})
                                        document.getElementsByClassName('myIntervalsButton')[0].style.backgroundColor = "#ff0000";
                                        document.getElementById("sliderIntervalVel").style.display="block";

                                        let $sliderIntervalVel = $('#sliderIntervalVel');
                                        $sliderIntervalVel.mousedown( function (e){
                                            //TODO VELOCITY REMOVING BADLY??
                                            L.DomEvent.stopPropagation(e);
                                            map.dragging.disable();
                                            e.originalEvent.preventDefault();
                                        });
                                    }
                                    else {
                                        document.getElementById("sliderIntervalVel").style.display="none";
                                        lens.areaQuery.setStyle({fillOpacity: 0.0})
                                        document.getElementsByClassName('myIntervalsButton')[0].style.backgroundColor = "#ff8400";
                                    }
                                }
                                else if(lens.getType() == "Length") {
                                    if(document.getElementById("sliderIntervalLength").style.display=='none'){
                                        lens.areaQuery.setStyle({fillOpacity: 0.6})
                                        document.getElementsByClassName('myIntervalsButton')[0].style.backgroundColor = "#ff0000";
                                        document.getElementById("sliderIntervalLength").style.display="block";

                                        let $sliderIntervalLength = $('#sliderIntervalLength');
                                        $sliderIntervalLength.mousedown( function (e){
                                            //TODO VELOCITY REMOVING BADLY??
                                            L.DomEvent.stopPropagation(e);
                                            map.dragging.disable();
                                            e.originalEvent.preventDefault();
                                        });
                                    }
                                    else {
                                        document.getElementById("sliderIntervalLength").style.display="none";
                                        lens.areaQuery.setStyle({fillOpacity: 0.0})
                                        document.getElementsByClassName('myIntervalsButton')[0].style.backgroundColor = "#ff8400";
                                    }
                                }
                                else if(lens.getType() == "Time_Duration") {
                                    if(document.getElementById("sliderIntervalDuration").style.display=='none'){
                                        lens.areaQuery.setStyle({fillOpacity: 0.6})
                                        document.getElementsByClassName('myIntervalsButton')[0].style.backgroundColor = "#ff0000";
                                        document.getElementById("sliderIntervalDuration").style.display="block";

                                        let $sliderIntervalDuration = $('#sliderIntervalDuration');
                                        $sliderIntervalDuration.mousedown( function (e){
                                            //TODO VELOCITY REMOVING BADLY??
                                            L.DomEvent.stopPropagation(e);
                                            map.dragging.disable();
                                            e.originalEvent.preventDefault();
                                        });
                                    }
                                    else {
                                        document.getElementById("sliderIntervalDuration").style.display="none";
                                        lens.areaQuery.setStyle({fillOpacity: 0.0})
                                        document.getElementsByClassName('myIntervalsButton')[0].style.backgroundColor = "#ff8400";
                                    }
                                }
                                else if(lens.getType() == "Time_Interval") {
                                    if(document.getElementById("sliderIntervalTime").style.display=='none'){
                                        lens.areaQuery.setStyle({fillOpacity: 0.6})
                                        document.getElementsByClassName('myIntervalsButton')[0].style.backgroundColor = "#ff0000";
                                        document.getElementById("sliderIntervalTime").style.display="block";

                                        let $sliderIntervalTime = $('#sliderIntervalTime');
                                        $sliderIntervalTime.mousedown( function (e){
                                            //TODO VELOCITY REMOVING BADLY??
                                            L.DomEvent.stopPropagation(e);
                                            map.dragging.disable();
                                            e.originalEvent.preventDefault();
                                        });
                                    }
                                    else {
                                        document.getElementById("sliderIntervalTime").style.display="none";
                                        lens.areaQuery.setStyle({fillOpacity: 0.0})
                                        document.getElementsByClassName('myIntervalsButton')[0].style.backgroundColor = "#ff8400";
                                    }
                                }
                                else{
                                    console.log("Lens not of the type that allows for intervals");
                                }
                            } 
                        
                            $(function(){
                                $("#sliderIntervalVel").roundSlider({
                                    sliderType: "range",
                                    radius: "130px",
                                    value: lens.getMinV() + "," + lens.getMaxV(),
                                    min: 0,
                                    max: 250,
                                    
                                    //lineCap: "round",
                                    width: 5,
                                    handleSize: "+10",
                                    handleShape: "dot",
                                    tooltipFormat: function (e) {
                                        return e.value + "Km/h";
                                    },
                                    drag: function (e) {
                                        L.DomEvent.stopPropagation(e);
                                        
                                        let index = e.value.indexOf(",");  // Gets the first index where a , occours
                                        let firstPart = e.value.substr(0, index); // Gets the first part
                                        let secondPart = e.value.substr(index + 1);  // Gets the text part
                                        lens.setMinV(firstPart);
                                        lens.setMaxV(secondPart);
                                        console.log(lens.getMinV());
                                        console.log(lens.getMaxV());
                                    },
                                    start: function(e) {
                                        
                                    },
                                    stop: function (e) {
                                        L.DomEvent.stopPropagation(e);
                                        map.dragging.enable();
                                        lens.updateLENS();
                                        lens.setMinVOLD(lens.getMinV());
                                        lens.setMaxVOLD(lens.getMaxV());
                                    }
                                });
                                
                                $("#sliderIntervalLength").roundSlider({
                                    sliderType: "range",
                                    radius: "130px",
                                    value: lens.getMinV() + "," + lens.getMaxV(),
                                    min: 1,
                                    max: 500000,
                                    //lineCap: "round",
                                    width: 5,
                                    handleSize: "+10",
                                    handleShape: "dot",
                                    tooltipFormat: function (e) {
                                        return e.value/1000 + "Km";
                                    },
                                    drag: function (e) {
                                        L.DomEvent.stopPropagation(e);
                                        
                                        let index = e.value.indexOf(",");  // Gets the first index where a , occours
                                        let firstPart = e.value.substr(0, index); // Gets the first part
                                        let secondPart = e.value.substr(index + 1);  // Gets the text part
                                        lens.setMinV(firstPart);
                                        lens.setMaxV(secondPart);
                                        console.log(lens.getMinV());
                                        console.log(lens.getMaxV());
                                    },
                                    start: function(e) {
                                        
                                    },
                                    stop: function (e) {
                                        L.DomEvent.stopPropagation(e);
                                        map.dragging.enable();
                                        lens.updateLENS();
                                        lens.setMinVOLD(lens.getMinV());
                                        lens.setMaxVOLD(lens.getMaxV());
                                    }
                                });
                                
                                $("#sliderIntervalDuration").roundSlider({
                                    sliderType: "range",
                                    radius: "130px",
                                    value: lens.getMinV() + "," + lens.getMaxV(),
                                    min: 0, // 2008-02-02 13:30:44
                                    max: 85839, // 2008-02-08 17:39:18
                                    //lineCap: "round",
                                    width: 5,
                                    handleSize: "+10",
                                    handleShape: "dot",
                                    tooltipFormat: function (e) {
                                        let delta = e.value;
                                        let days = Math.floor(delta / 86400);
                                        delta -= days * 86400;

                                        // calculate (and subtract) whole hours
                                        let hours = Math.floor(delta / 3600) % 24;
                                        delta -= hours * 3600;

                                        // calculate (and subtract) whole minutes
                                        let minutes = Math.floor(delta / 60) % 60;
                                        delta -= minutes * 60;

                                        // what's left is seconds
                                        let seconds = delta % 60;  // in theory the modulus is not required
                                        return hours + 'h ' + minutes + 'm ' + seconds + 's';
                                    },
                                    drag: function (e) {
                                        L.DomEvent.stopPropagation(e);
                                        
                                        let index = e.value.indexOf(",");  // Gets the first index where a , occours
                                        let firstPart = e.value.substr(0, index); // Gets the first part
                                        let secondPart = e.value.substr(index + 1);  // Gets the text part
                                        lens.setMinV(firstPart);
                                        lens.setMaxV(secondPart);
                                        console.log(lens.getMinV());
                                        console.log(lens.getMaxV());
                                    },
                                    start: function(e) {
                                        
                                    },
                                    stop: function (e) {
                                        L.DomEvent.stopPropagation(e);
                                        map.dragging.enable();
                                        lens.updateLENS();
                                        lens.setMinVOLD(lens.getMinV());
                                        lens.setMaxVOLD(lens.getMaxV());
                                    }
                                });
                                
                                $("#sliderIntervalTime").roundSlider({
                                    sliderType: "range",
                                    radius: "130px",
                                    value: lens.getMinV() + "," + lens.getMaxV(),
                                    min: minTimeValue , // 2008-02-02 13:30:44
                                    max: maxTimeValue , // 2008-02-08 17:39:18
                                    //lineCap: "round",
                                    width: 5,
                                    handleSize: "+10",
                                    handleShape: "dot",
                                    tooltipFormat: function (e) {
                                        // Unixtimestamp
                                        let unixtimestamp = e.value;
                                        // Convert timestamp to milliseconds
                                        let date = new Date(unixtimestamp*1000);
                                        // Year
                                        let year = date.getFullYear();
                                        // Month
                                        let month = date.getMonth();
                                        // Day
                                        let day = date.getDate();
                                        // Hours
                                        let hours = date.getHours();
                                        // Minutes
                                        let minutes = "0" + date.getMinutes();
                                        // Seconds
                                        let seconds = "0" + date.getSeconds();
                                        // Display date time in MM-dd-yyyy h:m:s format
                                        let convdataTime = month+'-'+day+'-'+year+' '+hours + ':' + minutes.substr(-2);
                                        
                                        return convdataTime;
                                    },
                                    drag: function (e) {
                                        L.DomEvent.stopPropagation(e);
                                        
                                        let index = e.value.indexOf(",");  // Gets the first index where a , occours
                                        let firstPart = e.value.substr(0, index); // Gets the first part
                                        let secondPart = e.value.substr(index + 1);  // Gets the text part
                                        lens.setMinV(firstPart);
                                        lens.setMaxV(secondPart);
                                        console.log(lens.getMinV());
                                        console.log(lens.getMaxV());
                                    },
                                    start: function(e) {
                                        
                                    },
                                    stop: function (e) {
                                        L.DomEvent.stopPropagation(e);
                                        map.dragging.enable();
                                        lens.updateLENS();
                                        lens.setMinVOLD(lens.getMinV());
                                        lens.setMaxVOLD(lens.getMaxV());
                                    }
                                });
                            });
                        });*/
                        
                        /*$('.myRadiusButton').click(function (ev) {
                            L.DomEvent.stopPropagation(ev);
                            clicked=false;
                            changeRadius = !changeRadius;
                            
                            if(changeRadius){
                                lens.setRadiusFlag(true);
                                map.zoomOut(1, true);
                                document.getElementsByClassName('myMoveButton')[0].style.visibility = "hidden";
                                document.getElementsByClassName('dropdown')[0].style.visibility = "hidden";
                                document.getElementsByClassName('myIntervalsButton')[0].style.visibility = "hidden";
                                document.getElementsByClassName('myDeleteButton')[0].style.visibility = "hidden";

                                document.getElementsByClassName('myRadiusButton')[0].style.backgroundColor = "#ff0000";
                                lens.outsideCircle.on({
                                    click: function(e){
                                        L.DomEvent.stopPropagation(e);
                                        mapPressForCreation = false;
                                        correctSizeVar = false;
                                    },
                                    mousedown: function (e) {
                                        L.DomEvent.stopPropagation(e);
                                        console.log(lens.getRadiusFlag())
                                        if(changeRadius){    
                                            let from = turf.point(lens.getLngLat());
                                            let optionsCreateCirc = {units: 'kilometers'};

                                            mapPressForCreation = true;
                                            map.on('mousemove', function (event) {
                                                
                                                if(lens.getRadiusFlag()){
                                                    L.DomEvent.stopPropagation(event);

                                                    if (mapPressForCreation && changeRadius) {

                                                        map.dragging.disable();

                                                        let to = turf.point([event.latlng.lat, event.latlng.lng]);

                                                        let distance = turf.distance(from, to, optionsCreateCirc);
                                                        radiusValue = distance * 1000;
                                                        if (radiusValue >= 50 && radiusValue <= 25000) {
                                                            correctSizeVar = true;
                                                            lens.colorSuccess();
                                                            lens.setRadius(radiusValue);
                                                        } else {
                                                            correctSizeVar = false;
                                                            lens.areaQuery.setStyle({fillColor: 'DarkRed',color:'red'});
                                                        }
                                                    }
                                                    else
                                                        console.log("Mouse down but flags are false :S");
                                                }
                                            });
                                        }
                                    },
                                    mouseup: function (e) {
                                        L.DomEvent.stopPropagation(e);
                                        map.removeEventListener('mousemove');
                                        
                                        if(changeRadius && lens.getRadiusFlag()){
                                            
                                            console.log(correctSizeVar);
                                            if (mapPressForCreation && correctSizeVar) {

                                                lens.updateLENS();
                                                lens.setBounds(lens.areaQuery.getBounds());
                                                
                                                for (i = 0; i < attLensesArray.length; i++) {
                                                    attLensesArray[i].updateALL();
                                                }
                                                lens.setRadiusOLD(lens.getRadius());
                                            }
                                            else{
                                                lens.setRadius(lens.getRadiusOLD());
                                            }

                                            map.fitBounds(lens.getBound());
                                            mapPressForCreation = false;
                                            correctSizeVar = false;
                                        }

                                    }
                                });
                            } else {
                                lens.setRadiusFlag(false);
                                map.fitBounds(lens.getBound());
                                map.dragging.enable();
                                document.getElementsByClassName('myMoveButton')[0].style.visibility = "visible";
                                document.getElementsByClassName('dropdown')[0].style.visibility = "visible";
                                document.getElementsByClassName('myIntervalsButton')[0].style.visibility = "visible";
                                document.getElementsByClassName('myDeleteButton')[0].style.visibility = "visible";
                                document.getElementsByClassName('myRadiusButton')[0].style.backgroundColor = "#ff8400";
                            }
                            /*if(document.getElementById("sliderRadius").style.display=='none'){
                                document.getElementsByClassName('myRadiusButton')[0].style.backgroundColor = "#ff0000";

                                document.getElementById("sliderRadius").style.display="block";
                                let $sliderRadius = $('#sliderRadius');
                                $sliderRadius.mousedown( function (e){
                                    //TODO VELOCITY REMOVING BADLY??
                                    L.DomEvent.stopPropagation(e);
                                    map.dragging.disable();
                                    e.originalEvent.preventDefault();
                                });
                                $(function(){
                                    $("#sliderRadius").roundSlider({
                                        sliderType: "min-range",
                                        radius: "130px",
                                        value: lens.getRadius(),
                                        min: 50,
                                        max: 25000,
                                        //lineCap: "round",
                                        width: 5,
                                        handleSize: "+10",
                                        handleShape: "dot",
                                        tooltipFormat: function (e) {
                                            return e.value + "m";
                                        },
                                        drag: function (e) {
                                            L.DomEvent.stopPropagation(e);
                                            lens.setRadius(e.value); 
                                        },
                                        start: function(e) {
                                        },
                                        stop: function (e) {
                                            L.DomEvent.stopPropagation(e);
                                            map.dragging.enable();
                                            lens.updateLENS();
                                            lens.setBounds(lens.areaQuery.getBounds());
                                            for(i = 0; i < attLensesArray.length; i++){
                                                attLensesArray[i].updateALL();
                                            };
                                            lens.setRadiusOLD(lens.getRadius());
                                        }
                                    });
                                });
                                
                            }
                            else{
                                document.getElementById("sliderRadius").style.display="none";
                                document.getElementsByClassName('myRadiusButton')[0].style.backgroundColor = "#ff8400";
                            }
                        }); */
                        $('.dropbtnOpt-default').click(function (e) {
                            L.DomEvent.stopPropagation(e);
                            if(lens.getType() != "Default"){
                                lens.setType("Default");
                                document.getElementsByClassName('dropbtnOpt-default')[0].style.background= "#0c270093";

                                document.getElementsByClassName('dropbtnOpt-start')[0].style.background= "#44444493";

                                document.getElementsByClassName('dropbtnOpt-end')[0].style.background= "#44444493";

                                document.getElementsByClassName('dropbtnOpt-duration')[0].style.background= "#44444493";

                                document.getElementsByClassName('dropbtnOpt-length')[0].style.background= "#44444493";

                                document.getElementsByClassName('dropbtnOpt-time')[0].style.background= "#44444493";

                                document.getElementsByClassName('dropbtnOpt-velocity')[0].style.background= "#44444493";

                                lens.setMinV(0);
                                lens.setMaxV(0);
                                lens.updateLENS();
                                lens.setTypeOLD("Default");
                                lens.setMinVOLD(0);
                                lens.setMaxVOLD(0);
                                lens.colorSuccess();
                                lens.areaQuery.setStyle({fillOpacity:0.3})
                            }
                        });
                        $('.dropbtnOpt-start').click(function (e) {
                            L.DomEvent.stopPropagation(e);
                            if(lens.getType() != "Start"){
                                lens.setType("Start");
                                
                                document.getElementsByClassName('dropbtnOpt-default')[0].style.background= "#44444493";

                                document.getElementsByClassName('dropbtnOpt-start')[0].style.background= "#0c270093";

                                document.getElementsByClassName('dropbtnOpt-end')[0].style.background= "#44444493";

                                document.getElementsByClassName('dropbtnOpt-duration')[0].style.background= "#44444493";

                                document.getElementsByClassName('dropbtnOpt-length')[0].style.background= "#44444493";

                                document.getElementsByClassName('dropbtnOpt-time')[0].style.background= "#44444493";

                                document.getElementsByClassName('dropbtnOpt-velocity')[0].style.background= "#44444493";
                                lens.setMinV(0);
                                lens.setMaxV(0);
                                lens.updateLENS();
                                lens.setTypeOLD("Start");
                                lens.setMinVOLD(0);
                                lens.setMaxVOLD(0);
                                lens.colorSuccess();
                                lens.areaQuery.setStyle({fillOpacity:0.3})
                            }
                        });
                        $('.dropbtnOpt-end').click(function (e) {
                            L.DomEvent.stopPropagation(e);
                            if(lens.getType() != "End"){
                                lens.setType("End");
                                
                                document.getElementsByClassName('dropbtnOpt-default')[0].style.background= "#44444493";

                                document.getElementsByClassName('dropbtnOpt-start')[0].style.background= "#44444493";

                                document.getElementsByClassName('dropbtnOpt-end')[0].style.background= "#0c270093";

                                document.getElementsByClassName('dropbtnOpt-duration')[0].style.background= "#44444493";

                                document.getElementsByClassName('dropbtnOpt-length')[0].style.background= "#44444493";

                                document.getElementsByClassName('dropbtnOpt-time')[0].style.background= "#44444493";

                                document.getElementsByClassName('dropbtnOpt-velocity')[0].style.background= "#44444493";
                                lens.setMinV(0);
                                lens.setMaxV(0);
                                lens.updateLENS();
                                lens.setTypeOLD("End");
                                lens.setMinVOLD(0);
                                lens.setMaxVOLD(0);
                                lens.colorSuccess();
                                lens.areaQuery.setStyle({fillOpacity:0.3})
                            }
                        });
                        $('.dropbtnOpt-length').click(function (e) {
                            L.DomEvent.stopPropagation(e);
                            if(lens.getType() != "Length"){
                                lens.setType("Length");
                                
                                document.getElementsByClassName('dropbtnOpt-default')[0].style.background= "#44444493";

                                document.getElementsByClassName('dropbtnOpt-start')[0].style.background= "#44444493";

                                document.getElementsByClassName('dropbtnOpt-end')[0].style.background= "#44444493";

                                document.getElementsByClassName('dropbtnOpt-duration')[0].style.background= "#44444493";

                                document.getElementsByClassName('dropbtnOpt-length')[0].style.background= "#0c270093";

                                document.getElementsByClassName('dropbtnOpt-time')[0].style.background= "#44444493";

                                document.getElementsByClassName('dropbtnOpt-velocity')[0].style.background= "#44444493";
                                lens.setMinV(1);
                                lens.setMaxV(500000);
                                lens.updateLENS();
                                lens.setTypeOLD("Length");
                                lens.setMinVOLD(1);
                                lens.setMaxVOLD(500000);
                                lens.colorSuccess();
                                lens.areaQuery.setStyle({fillOpacity:0.3})
                            }
                        });
                        $('.dropbtnOpt-velocity').click(function (e) {
                            L.DomEvent.stopPropagation(e);
                            if(lens.getType() != "Vel_avg"){
                                lens.setType("Vel_avg");
                                
                                document.getElementsByClassName('dropbtnOpt-default')[0].style.background= "#44444493";

                                document.getElementsByClassName('dropbtnOpt-start')[0].style.background= "#44444493";

                                document.getElementsByClassName('dropbtnOpt-end')[0].style.background= "#44444493";

                                document.getElementsByClassName('dropbtnOpt-duration')[0].style.background= "#44444493";

                                document.getElementsByClassName('dropbtnOpt-length')[0].style.background= "#44444493";

                                document.getElementsByClassName('dropbtnOpt-time')[0].style.background= "#44444493";

                                document.getElementsByClassName('dropbtnOpt-velocity')[0].style.background= "#0c270093";
                                lens.setMinV(0);
                                lens.setMaxV(250);
                                lens.updateLENS();
                                lens.setTypeOLD("Vel_avg");
                                lens.setMinVOLD(0);
                                lens.setMaxVOLD(250);
                                lens.colorSuccess();
                                lens.areaQuery.setStyle({fillOpacity:0.3})
                            }
                        });
                        $('.dropbtnOpt-time').click(function (e) {
                            L.DomEvent.stopPropagation(e);
                            if(lens.getType() != "Time_Interval"){
                                lens.setType("Time_Interval");
                                
                                document.getElementsByClassName('dropbtnOpt-default')[0].style.background= "#44444493";

                                document.getElementsByClassName('dropbtnOpt-start')[0].style.background= "#44444493";

                                document.getElementsByClassName('dropbtnOpt-end')[0].style.background= "#44444493";

                                document.getElementsByClassName('dropbtnOpt-duration')[0].style.background= "#44444493";

                                document.getElementsByClassName('dropbtnOpt-length')[0].style.background= "#44444493";

                                document.getElementsByClassName('dropbtnOpt-time')[0].style.background= "#0c270093";

                                document.getElementsByClassName('dropbtnOpt-velocity')[0].style.background= "#44444493";
                                lens.setMinV(new Date(maxArrayValuesGlobal.timemin).getTime()/1000);
                                lens.setMaxV(new Date(maxArrayValuesGlobal.timemax).getTime()/1000);
                                lens.updateLENS();
                                lens.setTypeOLD("Time_Interval");
                                lens.setMinVOLD(new Date(maxArrayValuesGlobal.timemin).getTime()/1000);
                                lens.setMaxVOLD(new Date(maxArrayValuesGlobal.timemax).getTime()/1000);
                                lens.colorSuccess();
                                lens.areaQuery.setStyle({fillOpacity:0.3})
                                
                            }
                        });
                        $('.dropbtnOpt-duration').click(function (e) {
                            L.DomEvent.stopPropagation(e);
                            if(lens.getType() != "Time_Duration"){
                                lens.setType("Time_Duration");
                                
                                document.getElementsByClassName('dropbtnOpt-default')[0].style.background= "#44444493";

                                document.getElementsByClassName('dropbtnOpt-start')[0].style.background= "#44444493";

                                document.getElementsByClassName('dropbtnOpt-end')[0].style.background= "#44444493";

                                document.getElementsByClassName('dropbtnOpt-duration')[0].style.background= "#0c270093";

                                document.getElementsByClassName('dropbtnOpt-length')[0].style.background= "#44444493";

                                document.getElementsByClassName('dropbtnOpt-time')[0].style.background= "#44444493";

                                document.getElementsByClassName('dropbtnOpt-velocity')[0].style.background= "#44444493";
                                lens.setMinV(0);
                                lens.setMaxV(85839);
                                lens.updateLENS();
                                lens.setTypeOLD("Time_Duration");
                                lens.setMinVOLD(0);
                                lens.setMaxVOLD(85839);
                                lens.colorSuccess();
                                lens.areaQuery.setStyle({fillOpacity:0.3})
                            }
                        });  
        
                    }
                    //}); 
                  
                }
            });
            return lens;
        }
        
        function createALens(lngLat, radiusQuery, _attribute, _encoding){
            let lens = { 
                areaQuery : L.circle([lngLat.lat, lngLat.lng], {
                    color: 'DarkRed',
                    fillColor: 'red',
                    fillOpacity: 0.6,
                    radius: radiusQuery,
                    pane: 'lensPane'
                }).addTo(lensesLayer),
                idOfHistogram:"",
                outsideCircle : null,
                outsideCircleHistogram : null,
                visibleOutsideMenuFlag : false,
                lngLat : lngLat,
                radiusQuery : radiusQuery,
                radiusQueryOLD : radiusQuery,
                lID : null,
                att : _attribute,
                enc : _encoding,
                intersections: [],
                overallArea : null,
                hasBeenOpacity: false,
                areas: [],
                opacityLensArray: [],
                bounds : null,
                radiusChangeFlag: false,
                attArrayCircHistogram:{},
                getRadiusFlag(){
                    return this.radiusChangeFlag;
                },
                setRadiusFlag(value){
                    if(value == true || value == false)
                        this.radiusChangeFlag = value;
                },
                setRadiusOLD : function (value){
                    this.radiusQueryOLD = value;
                },
                getRadiusOLD : function (){
                    return this.radiusQueryOLD;
                },
                addIntersection: function (obj){
                    this.intersections.push(obj);
                },
                removeIntersection: function (obj){
                    for(let i = this.intersections.length - 1; i >= 0; i--) {
                        if(this.intersections[i] === obj) {
                            this.intersections.splice(i, 1);
                            return true;
                        }
                    }
                    return false;
                },
                addArea: function (obj){
                    this.areas.push(obj);
                },
                removeArea: function (obj){
                    for(let i = this.areas.length - 1; i >= 0; i--) {
                        if(this.areas[i] === obj) {
                            this.areas.splice(i, 1);
                            return true;
                        }
                    }
                    return false;
                },
                setLngLat : function (value){
                    this.lngLat = value;
                },
                setBounds : function (value){
                    this.bounds = value;
                },
                setlID : function (value){
                    this.lID = value;
                },
                getLngLat : function (){
                    return this.lngLat;
                },
                getBound : function (){
                    return this.bounds;
                },
                getlID : function (){
                    return this.lID;
                },
                setOutsideCircle: function(circle){
                    this.outsideCircle = circle;
                },
                setOutsideCircleHistogram: function(circle){
                    this.outsideCircleHistogram = circle;
                },
                setRadius : function (value){
                    this.areaQuery.setRadius(value);
                    this.radiusQuery = value;
                },
                getRadius : function (){
                    return this.radiusQuery;
                },
                insertZORDER(){
                    if(lensArrayZORDER.length == 0){
                        lensArrayZORDER.push(this)
                    }
                    else{
                        let flagMeteu = false
                        for(let ind = 0;ind <= lensArrayZORDER.length-1;ind++){
                            if (lensArrayZORDER[ind].getRadius()>this.getRadius()) continue;
                            else if (lensArrayZORDER[ind].getRadius() <= this.getRadius()){
                                flagMeteu = true;
                                lensArrayZORDER.splice(ind, 0, this);
                                console.log("ZORDER")
                                console.log(lensArrayZORDER)
                                
                                break;
                            }
                        }

                        if(!flagMeteu){
                            lensArrayZORDER.push(this)
                        }
                        updateZORDER()
                        
                    }

                },
                deleteFromZORDER(){
                    for(let i = 0;i <= lensArrayZORDER.length - 1; i++) {
                        if(lensArrayZORDER[i] === this) {
                            lensArrayZORDER.splice(i, 1);
                            console.log(lensArrayZORDER);
                            break;
                        }
                    }
                },
                addOpacityLens : function(opacLens){
                    this.opacityLensArray.push(opacLens);
                    for(let i = this.areas.length - 1; i >= 0; i--) {
                        this.areas[i].opacityLensArray = Array.from(this.opacityLensArray);
                    }
                },
                removeOpacityLens : function(opacLens){
                    for(let i = this.opacityLensArray.length - 1; i >= 0; i--) {
                        if(this.opacityLensArray[i] === opacLens) {
                            this.opacityLensArray.splice(i, 1);
                        }
                    }
                    for(let j = this.areas.length - 1; j >= 0; j--) {
                        this.areas[j].opacityLensArray = Array.from(this.opacityLensArray);
                    }
                },
                colorSuccess : function() {
                    //if(_attribute == "length"){
                    console.log("I will now paint the Pass by circle again ....")
                    this.areaQuery.setStyle({color: '#FFFFFF', fillColor: '#FFFFFF', fillOpacity: 0});
                    
                },
                updateLayer : function(layer, value){
                    //let layersActive = layersWithin(map, layer, lngLat, pixelsInRadius)
                    //TODO
                    switch(this.att) {
                        case "length":
                            lengthAtt(layer, value,this.enc,this.attArrayCircHistogram);
                            break;
                        case "duration":
                            durationAtt(layer,value, this.enc,this.attArrayCircHistogram);
                            break;
                        case "velocity":
                            velocityAtt(layer,value,this.enc,this.attArrayCircHistogram);
                            break;
                        case "time":
                            timeAtt(layer,value, this.enc,this.attArrayCircHistogram);
                            break;
                        case "weekday":
                            weekdayAtt(layer,value, this.enc,this.attArrayCircHistogram);
                            break;

                        case "hourday":
                            hourdayAtt(layer,value, this.enc,this.attArrayCircHistogram);
                            break;
                    }   
                },
                addIntersections : function(){

                    for(i=0; i< attLensesArray.length;i++){
                        if(this.areaQuery.getBounds().intersects(attLensesArray[i].areaQuery.getBounds())){
                            this.addIntersection(attLensesArray[i]);
                        }
                    }
                    attLensesArray.push(this);
                },
                createAreas : function(){
                    this.insertZORDER();
                    this.overallArea = null;
                    this.intersections.splice(0,this.intersections.length);
                    this.addIntersections();

                    let radius = this.getRadius()/1000;
                    let options = {steps: 32,units: 'kilometers'};
                    let circle = turf.circle([this.getLngLat().lng, this.getLngLat().lat], radius, options);
                    this.overallArea = circle;
                    let firstArea = creaAttAreas(circle);
                    firstArea.addLens(this);
                    this.addArea(firstArea);
                    let areaCounnt =1;
                    let numberOfAreasVisited = 0;
                    let thisVar = this;
                    recursiveArea(thisVar, this.intersections.length - 1, 0);
                    
                   
                    return thisVar;
                },
                createLayers : function(){
                    
                    this.assignCircHistogram()
                    this.areas.forEach(function(eachArea, index, array) {
                        eachArea.createLayers();
                    });
                    this.colorSuccess();
                    
                    
                },
                updateALL : function (){
                    //TODO CHAMAR ARRAY DE TRAS PARA A FRENTE PARA NAO TER DE FAZER VERIFICACOES  
                    this.deleteLayers();
                    /*this.updateOthersV2(false);
                    this.createAreas();*/
                    this.createLayers();
                },
                updateLENS : function(attORenc , value){
                    //clean array for circ histogram
                    //Will check if any of the lenses if any of the intersections has an area wich recieves the styling from it
                    //True for attriute
                    if(attORenc){
                        this.att = value;
                        
                    }
                    //False for encoding
                    else{
                        this.enc = value;
                    }
                    this.assignCircHistogram() 
                    this.areas.forEach( function(item,index,array){
                        console.log(item.getlID());
                        if(item.getlID() != null){
                            item.updateLayer();
                        }
                    });
                    let foundMyself = false;
                    console.log(attLensesArray);
                    for(let i = 0;i<attLensesArray.length ;i++) {
                        console.log("I entered the array");
                        console.log(attLensesArray[i]);
                        if(attLensesArray[i] === this) {
                            console.log("Found the lens");
                            foundMyself = true;
                        }
                        else if(foundMyself){
                            for(let j = 0; j < attLensesArray[i].intersections.length; j++) {
                                if(attLensesArray[i].intersections[j] === this){
                                    if(attORenc){
                                        attLensesArray[i].intersections[j].att = value;
                                    }
                                    //False for encoding
                                    else{
                                        attLensesArray[i].intersections[j].enc = value;
                                    }
                                    attLensesArray[i].areas.forEach( function(item,index,array){
                                        console.log(item)
                                        console.log(item.getlID())
                                        item.updateLayer();
                                    });
                                }
                            }
                        }

                    }
                    
                    
                },
                delete: function(){
                    for(let areaIndex = this.areas.length - 1;areaIndex>=0; areaIndex--){
                        this.areas[areaIndex].delete();  
                    }

                    this.areas.splice(0,this.areas.length);
                    console.log(this.areas.length);

                    
                },
                deleteLayers: function(){
                    for(let areaIndex = this.areas.length - 1;areaIndex>=0; areaIndex--){
                        this.areas[areaIndex].delete();
                    }
                },
                removeOpacityArray: function(){
                    for(let i = attOPACITYLensesArray.length - 1; i >= 0; i--) {
                            if(attOPACITYLensesArray[i] === this) {
                                attOPACITYLensesArray.splice(i, 1);
                                console.log(attOPACITYLensesArray);
                                break;
                            }
                    }
                },
                removeFromAttLen : function(){
                    for(let i = attLensesArray.length - 1; i >= 0; i--) {
                        if(attLensesArray[i] === this) {
                            attLensesArray.splice(i, 1);
                            console.log(attLensesArray);
                            break;
                        }
                    }    
                },
                updateOthersV2 : function( onlyRemoveInter ){
                    //true if areas need to e updated
                    this.removeFromAttLen();
                    this.deleteFromZORDER();
                    this.assignCircHistogram()
                    if(this.enc == "opacity"){
                        this.removeOpacityArray();
                    }
                    for(i = 0; i<attLensesArray.length; i++){
                        console.log(attLensesArray[i]);
                        if(attLensesArray[i].removeIntersection(this)) {
                            if(onlyRemoveInter){
                                for(let areaIndex = 1;areaIndex < attLensesArray[i].areas.length; areaIndex++){
                                    let flag = attLensesArray[i].areas[areaIndex].removeLens(this);
                                    console.log(flag);
                                }
                                for(let areaIndex = 1;areaIndex < attLensesArray[i].areas.length; areaIndex++){
                                    if(attLensesArray[i].areas[areaIndex].getLensArray().length == 1){
                                        //IF ERROR APPEArS WHERE SOME PARTS ARE somewhat forgotten it might mean that splice allows for a jump?
                                        console.log("AGORA VOU MOSTRAR Os ARRAYs a JUNTAR");
                                        console.log(attLensesArray[i].areas[0].area);
                                        console.log(attLensesArray[i].areas[areaIndex].area);
                                        console.log("Before union");
                                        let unionVar = turf.union(attLensesArray[i].areas[0].area, attLensesArray[i].areas[areaIndex].area);
                                        console.log("After union");
                                        attLensesArray[i].areas[0].setArea(unionVar);
                                        attLensesArray[i].areas[areaIndex].delete();
                                        attLensesArray[i].areas[0].delete();
                                        attLensesArray[i].areas.splice(areaIndex, 1);
                                        attLensesArray[i].areas[0].createLayers();
                                    }
                                    else{
                                        for(let ind = 1;ind < attLensesArray[i].areas.length; ind++){
                                            if(areaIndex != ind) {  

                                                if(isEqual(attLensesArray[i].areas[areaIndex].getLensArray(),attLensesArray[i].areas[ind].getLensArray())){
                                                    console.log("isEQUAL ALRIGHTY");
                                                    console.log(attLensesArray[i].areas[ind].getLensArray());
                                                    console.log(attLensesArray[i].areas[areaIndex].getLensArray());
                                                    console.log("Before union");
                                                    let unionVar = turf.union(attLensesArray[i].areas[ind].area, attLensesArray[i].areas[areaIndex].area);
                                                    console.log("After union");
                                                    attLensesArray[i].areas[ind].setArea(unionVar);
                                                    attLensesArray[i].areas[areaIndex].delete();
                                                    attLensesArray[i].areas[ind].delete();
                                                    attLensesArray[i].areas.splice(areaIndex, 1);
                                                    attLensesArray[i].areas[ind].createLayers();
                                                }
                                            }
                                        }
                                        
                                    }
                                    
                                }
                            }
                        }
                    }
                },
                assignCircHistogram: function(){
                    if(this.att == "velocity") 
                        lens.attArrayCircHistogram = [{name:"[0-9]", value:0},{name:"[10-16]",value:0},{name:"[17-25]",value:0},{name:"[26-40]",value:0},{name:"[41-50]",value:0},{name:"[51-60]" ,value:0},{name:"[61-70]" ,value:0},{name:"[71-80]"  ,value:0},{name:"[81-90]" , value:0},{name:"[91-300]" , value:0}];
                    else if(this.att == "length")
                        lens.attArrayCircHistogram = [{name:"[0-1]km", value:0},{name:"[2-4]km",value:0},{name:"[5-7]km",value:0},{name:"[8-10]km",value:0},{name:"[11-15]km",value:0},{name:"[16-20]km" ,value:0},{name:"[21-35]km" ,value:0},{name:"[36-60]km"  ,value:0},{name:"[61-100]km" , value:0},{name:"[100-]km" , value:0}];
                    else if(this.att == "duration")
                        lens.attArrayCircHistogram = [{name:"00:00-05:00", value:0},{name:"05:00-10:00",value:0},{name:"10:00-30:00",value:0},{name:"30:00-45:00",value:0},{name:"45:00-01:30:00",value:0},{name:"01:30:00- " ,value:0}];
                    else if(this.att == "time")
                        lens.attArrayCircHistogram = [{name:"Newest bin", value:0},{name:"bin-2",value:0},{name:"bin-3",value:0},{name:"bin-4",value:0},{name:"bin-5",value:0},{name:"bin-6" ,value:0},{name:"bin-7" ,value:0},{name:"bin-8" ,value:0},{name:"bin-9" ,value:0},{name:"bin-10" ,value:0},{name:"bin-11" ,value:0},{name:"bin-12" ,value:0},{name:"bin-13" ,value:0},{name:"bin-14" ,value:0},{name:"bin-15" ,value:0},{name:"bin-16" ,value:0},{name:"bin-17" ,value:0},{name:"bin-18" ,value:0},{name:"bin-19" ,value:0},{name:"bin-20" ,value:0},{name:"bin-21" ,value:0},{name:"bin-22" ,value:0},{name:"bin-23" ,value:0},{name:"Oldest bin" ,value:0}];
                    else if(this.att == "weekday")
                        lens.attArrayCircHistogram = [{name:"Monday", value:0},{name:"Thuesday",value:0},{name:"Wednesday",value:0},{name:"Thursday",value:0},{name:"Friday",value:0},{name:"Saturday" ,value:0},{name:"Sunday" ,value:0}];
                    else if(this.att == "hourday")
                        lens.attArrayCircHistogram = [{name:"00", value:0},{name:"1",value:0},{name:"2",value:0},{name:"3",value:0},{name:"4",value:0},{name:"5" ,value:0},{name:"6" ,value:0},{name:"7" ,value:0},{name:"8" ,value:0},{name:"9" ,value:0},{name:"10" ,value:0},{name:"11" ,value:0},{name:"12" ,value:0},{name:"13" ,value:0},{name:"14" ,value:0},{name:"15" ,value:0},{name:"16" ,value:0},{name:"17" ,value:0},{name:"18" ,value:0},{name:"19" ,value:0},{name:"20" ,value:0},{name:"21" ,value:0},{name:"22" ,value:0},{name:"23" ,value:0}];
                },
                color(index){
                    if(this.att == "velocity" || this.att == "length"){ 
                        let colorArrayHist =['#ff3232','#ff6928','#fcb42f','#fcce28','#fcd62f','#fcf528','#d5fc28','#b9fc28','#80fc28','#00ff00']
                        return colorArrayHist[index];
                    }
                    else if(this.att == "duration"){ 
                        let colorArrayHist =['#ff3232','#fcb42f','#fcd62f','#fcf528','#b9fc28','#00ff00']
                        return colorArrayHist[index];
                    }
                    else if(this.att == "time" || this.att == "hourday"){ 
                        let colorArrayHist =['#49BC01','#57BD01','#66BE01','#75BF01','#84C101','#94C201','#A3C301','#B3C501','#C3C601','#C7BB01','#C9AD01','#CA9F01','#CB9101','#CC8201','#CE7401','#CF6501','#D05601','#D24701','#D33701','#D42801','#D61801','#D70801','#D80109','#DA0019']
                        return colorArrayHist[index];
                    }
                    else if(this.att == "weekday"){ 
                        let colorArrayHist =['#49BC01','#82C101','#BEC601','#CB9801','#D06001','#D52501','#DA0019']
                        return colorArrayHist[index];
                    }
                
                }
            
            };

            lens.setBounds(lens.areaQuery.getBounds());

            
                    

            //CALCULATE THE DISTANCE FROM ONE POINT TO ANOTHER IN PIXELS
            
            
            lens.areaQuery.on({
                dbclick:function(e){
                    L.DomEvent.stopPropagation(e);
                },
                click: function(clickEven){
                    L.DomEvent.stopPropagation(clickEven);
                    createQueryLensesFlag = false;
                    createAttributeLensesFlag = false;
                    document.getElementsByClassName("not-tabFilter")[0].style.backgroundColor ="#14599100"
                    document.getElementsByClassName("not-tabAttr")[0].style.backgroundColor ="#14599100"
                    /*container1.style.backgroundColor = 'white'; 
                    container2.style.backgroundColor = 'white';*/
                    outterLensesLayer.clearLayers();
                    clicked = true;
                    let once = true;
                    /*map.fitBounds(lens.getBound());
                    
                    
                    map.on('moveend', function(ev) {*/
                        
                    if(clicked && once){
                        once = false;
                        console.log("Im on the move event again...");
                        if(activeLENSNEWMENU != null){
                            activeLENSNEWMENU.areaQuery.setStyle({fillOpacity:0})
                            if(activeLENSNEWMENU.visibleOutsideMenuFlag == false){
                                outterLensesCircularHistoLayer.removeLayer(activeLENSNEWMENU.outsideCircleHistogram)
                            }
                        }
                        lens.areaQuery.setStyle({fillOpacity:0.3})
                        //L.DomEvent.stopPropagation(ev);

                        idOfHistogram = "my_datavizCIRCULAR"+iDOfHisto
                        lens.idOfHistogram = idOfHistogram
                        iDOfHisto += 1
                        
                            // code stuff
                        let northVar = map.latLngToLayerPoint(lens.areaQuery.getBounds().getNorthWest());
                        let southVar = map.latLngToLayerPoint(lens.areaQuery.getBounds().getSouthWest());
                        let numOfPixl = northVar.distanceTo(southVar);
                        let myOutsideCircle = L.divIcon({className: 'outside-Circle', iconSize: [300,200], html: 
                        "<div id='piemenu' data-wheelnav "+
                        "data-wheelnav-slicepath='DonutSlice' "+
                        "data-wheelnav-spreader data-wheelnav-spreaderpath='PieSpreader' "+
                        "data-wheelnav-marker data-wheelnav-markerpath='PieLineMarker' "+
                        "data-wheelnav-rotateoff "+
                        "data-wheelnav-navangle='9' "+
                        "data-wheelnav-titleheight='18' "+
                        "data-wheelnav-cssmode "+
                        "data-wheelnav-init>"+
                        "<div data-wheelnav-navitemimg='images/attribute.png' onmouseup='attLENSNEWMENU(activeLENSNEWMENU,activeLENSNEWMENU.idOfHistogram)'></div>"+
                        "<div data-wheelnav-navitemimg='images/encoding.png' onmouseup='encLENSNEWMENU(activeLENSNEWMENU,activeLENSNEWMENU.idOfHistogram)'></div>"+
                        "<div data-wheelnav-navitemimg='images/statistics.png' onmouseup='statsLENSNEWMENU(activeLENSNEWMENU,activeLENSNEWMENU.idOfHistogram)'></div>"+
                        "<div data-wheelnav-navitemimg='images/move.png' onmouseup='moveATTLENSNEWMENU(activeLENSNEWMENU,activeLENSNEWMENU.idOfHistogram)'></div>"+
                        "<div data-wheelnav-navitemimg='images/radius.png' onmouseup='radiusATTLENSNEWMENU(activeLENSNEWMENU,activeLENSNEWMENU.idOfHistogram)'></div>"+
                        "<div data-wheelnav-navitemimg='images/trash.png'  onmouseup='deleteATTLENSNEWMENU(activeLENSNEWMENU,activeLENSNEWMENU.idOfHistogram)'></div>"+
                        "</div>"+ 
                        "<div id='attribute' style='margin-left: 88%;margin-top: -40%;visibility:hidden'><ul>"+
                            "<lu><a style='color:#FFF' class='dropbtnOpt-length'>Length</a></lu>"+
                            "<lu><a style='color:#FFF' class='dropbtnOpt-duration'>Duration</a></lu>"+
                            "<lu><a style='color:#FFF' class='dropbtnOpt-velocity'>Velocity</a></lu>"+
                            "<lu><a style='color:#FFF' class='dropbtnOpt-time'>Time</a></lu>"+
                            "<lu><a style='color:#FFF' class='dropbtnOpt-weekDay'>Weekday</a></lu>"+
                            "<lu><a style='color:#FFF' class='dropbtnOpt-hourDay'>Hour</a></lu>"+
                        "</ul></div>"+
                        "<div id='encoding' style='margin-left: 88%;margin-top: -40%;visibility:hidden'><ul>"+
                            "<lu><a style='color:#FFF' class='dropbtnOpt-color'>Color</a></lu>"+
                            "<lu><a style='color:#FFF' class='dropbtnOpt-width'>Width</a></lu>"+
                            "<lu><a style='color:#FFF' class='dropbtnOpt-brightness'>Brightness</a></lu>"+
                            "<lu><a style='color:#FFF' class='dropbtnOpt-opacity'>Opacity</a></lu>"+
                        "</ul></div>"+
                        "<span class='explanationATT' style='color:"+ colorToUseWithMap+ ";margin-top: -5%;position: absolute;margin-left: 62%;visibility: hidden;'> \n"+lens.getRadius().toFixed(0)/1000+"Kilometers</span>"
                        });

                        if(lens.outsideCircleHistogram != null){
                            outterLensesCircularHistoLayer.removeLayer(lens.outsideCircleHistogram)
                        }
                        
                        let myOutsideCircleCircularHist = L.divIcon({className: 'outside-Circle', iconSize: [300,200], html: 
                        "<div id='"+lens.idOfHistogram+"' style='margin-top:  -117.5%;margin-left: -83.9%;visibility:hidden'></div>"})
                        let outsideCircVar = L.marker(lens.getLngLat(), {icon: myOutsideCircle, pane: 'outtterLensPane'});
                        let outsideCircHistogramVar = L.marker(lens.getLngLat(), {icon: myOutsideCircleCircularHist, pane: 'outtterLensPane2'});
                        lens.setOutsideCircle(outsideCircVar);
                        lens.setOutsideCircleHistogram(outsideCircHistogramVar);
                        
                        
                        outterLensesCircularHistoLayer.addLayer(lens.outsideCircleHistogram)
                        outterLensesLayer.addLayer(lens.outsideCircle);

                        activeLENSNEWMENU = lens;
                        var piemenu = new wheelnav('piemenu');
                        piemenu.wheelRadius = piemenu.wheelRadius * 0.83;
                        piemenu.navItemsContinuous = true;
                        piemenu.sliceAngle = 15;
                        piemenu.createWheel();
                        
                        document.getElementById("wheelnav-piemenu-slice-5").style.fill = "#94342b"
                        if(lens.visibleOutsideMenuFlag == true){
                            document.getElementById("wheelnav-piemenu-slice-2").style.fill = "#879489"
                            document.getElementById(lens.idOfHistogram).style.visibility = "visible"
                        }

                        if(lens.att == "length")
                            document.getElementsByClassName('dropbtnOpt-length')[0].style.background = "#0c270093";
                        else if(lens.att == "velocity")
                            document.getElementsByClassName('dropbtnOpt-velocity')[0].style.background = "#0c270093";
                        else if(lens.att == "time")
                            document.getElementsByClassName('dropbtnOpt-time')[0].style.background = "#0c270093";
                        else if(lens.att == "duration")
                            document.getElementsByClassName('dropbtnOpt-duration')[0].style.background = "#0c270093";
                        else if(lens.att == "weekDay")
                            document.getElementsByClassName('dropbtnOpt-weekDay')[0].style.background = "#0c270093";
                        else 
                            document.getElementsByClassName('dropbtnOpt-hourDay')[0].style.background = "#0c270093";
                        
                        if (lens.enc == "color")
                            document.getElementsByClassName('dropbtnOpt-color')[0].style.background = "#0c270093";
                        else if (lens.enc == "width")
                            document.getElementsByClassName('dropbtnOpt-width')[0].style.background = "#0c270093";
                        else if (lens.enc == "brightness")
                            document.getElementsByClassName('dropbtnOpt-brightness')[0].style.background = "#0c270093";
                        else
                            document.getElementsByClassName('dropbtnOpt-opacity')[0].style.background = "#0c270093";
                        
                        /*$('.myDeleteButton').click(function (e) {
                            L.DomEvent.stopPropagation(e); 
                            clicked= false;
                            outterLensesLayer.removeLayer(lens.outsideCircle);
                            lensesLayer.removeLayer(lens.areaQuery);
                            
                            lens.delete();
                            lens.updateOthersV2(true);
                            if(lens.hasBeenOpacity){
                                attLensArrayToServer();
                                for(let j = 0; j < lens.intersections.length; j++){
                                    lens.intersections[j].removeOpacityLens(lens);
                                    for(let i = 0; i < lens.intersections[j].areas.length; i++){
                                        lens.intersections[j].areas[i].delete();
                                        lens.intersections[j].areas[i].createLayers();
                                    }
                                }
                                
                            }
                            
                        });
                        $('.myMoveButton').click(function (e) {
                            L.DomEvent.stopPropagation(e);
                            clicked = false; 
                            lensCanMove = !lensCanMove;
                            if(lensCanMove){
                                map.zoomOut(1,true);
                                document.getElementsByClassName('myMoveButton')[0].style.backgroundColor = "#ff0000";
                                document.getElementsByClassName('myRadiusButton')[0].style.visibility = "hidden";
                                document.getElementsByClassName('dropdown')[0].style.visibility = "hidden";
                                document.getElementsByClassName('dropdown')[1].style.visibility = "hidden";
                                document.getElementsByClassName('myDeleteButton')[0].style.visibility = "hidden";
                            }
                            else{
                                map.fitBounds(lens.getBound());
                                document.getElementsByClassName('myMoveButton')[0].style.backgroundColor = "#ff8400";
                                document.getElementsByClassName('myRadiusButton')[0].style.visibility = "visible";
                                document.getElementsByClassName('dropdown')[0].style.visibility = "visible";
                                document.getElementsByClassName('dropdown')[1].style.visibility = "visible";
                                document.getElementsByClassName('myDeleteButton')[0].style.visibility = "visible";
                            }
                            let mouseDown = false;
                            lens.outsideCircle.on({
                                dbclick:function(e){
                                    L.DomEvent.stopPropagation(e);
                                },
                                click : function(e){
                                    L.DomEvent.stopPropagation(e);
                                },
                                mousedown: function (event) {
                                    L.DomEvent.stopPropagation(event);
                                    mouseDown = true;
                                    notClickedLens = false;
                                        
                                    
                                    map.on('mousemove', function (e) {
                                        document.getElementsByClassName('myMoveButton')[0].style.visibility = "hidden";
                                        createQueryLensesFlag = false;
                                        createAttributeLensesFlag = false;
                                        document.getElementsByClassName("not-tabFilter")[0].style.backgroundColor ="#14599100"
                                        document.getElementsByClassName("not-tabAttr")[0].style.backgroundColor ="#14599100"
                                        /*container1.style.backgroundColor = 'white'; 
                                        container2.style.backgroundColor = 'white';*/
                                        /*L.DomEvent.stopPropagation(e);
                                        if(lensCanMove && mouseDown){
                                            
                                            if(!(moved)){
                                                
                                                lens.delete();
                                                lens.updateOthersV2(true);
                                                if(lens.hasBeenOpacity){
                                                    for(let j = 0; j < lens.intersections.length; j++){
                                                        lens.intersections[j].removeOpacityLens(lens);
                                                        for(let i = 0; i < lens.intersections[j].areas.length; i++){
                                                            lens.intersections[j].areas[i].delete();
                                                            lens.intersections[j].areas[i].createLayers();
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            map.dragging.disable();
                                            moved = true;
                                            lens.areaQuery.setLatLng(e.latlng);
                                            lens.outsideCircle.setLatLng(e.latlng);
                                            lens.lngLat = e.latlng;
                                            lens.setBounds(lens.areaQuery.getBounds());
                                            map.panInside(lens.getLngLat(),{padding:[200,200],duration:0.3});
                                        }
                                    });
                                },
                                mouseup: function(e){
                                    mouseDown = false;
                                    L.DomEvent.stopPropagation(e);
                                    
                                    document.getElementsByClassName('myMoveButton')[0].style.visibility = "visible"; 
                                    if(lensCanMove){
                                        map.removeEventListener('mousemove');
                                        if(moved){ 
                                            moved = false;   
                                            map.dragging.enable();
                                            
                                            //lens.delete();

                            
                                            lens.createAreas();
                                            console.log(lens.hasBeenOpacity)
                                            if(lens.hasBeenOpacity){
                                                console.log(attOPACITYLensesArray);
                                                if(lens.enc != "opacity"){
                                                    lens.hasBeenOpacity = false;
                                                }
                                                else{
                                                    attOPACITYLensesArray.push(lens);
                                                    for(let j = 0; j < lens.intersections.length; j++){
                                                        lens.intersections[j].addOpacityLens(lens);
                                                        for(let i = 0; i < lens.intersections[j].areas.length; i++){
                                                            lens.intersections[j].areas[i].delete();
                                                            lens.intersections[j].areas[i].createLayers();
                                                        }
                                                    }
                                                }
                                                
                                                attLensArrayToServer();
                                            }
                                            //lens.createLayers();
                                            lens.setBounds(lens.areaQuery.getBounds());

                                        }
                                    }
                                },
                                mouseout:function(){
                                    console.log("Bellow is the attLensesArray");
                                    console.log(attLensesArray);
                                    //outterLensesLayer.removeLayer(lens.outsideCircle);
                                    
                                }
                            });
                        });
                        $('.myRadiusButton').click(function (ev) {
                            L.DomEvent.stopPropagation(ev);
                            clicked = false;
                            changeRadius = !changeRadius;
                            
                            if(changeRadius){
                                lens.setRadiusFlag(true);
                                map.zoomOut(1, true);
                                document.getElementsByClassName('myMoveButton')[0].style.visibility = "hidden";
                                document.getElementsByClassName('dropdown')[0].style.visibility = "hidden";
                                document.getElementsByClassName('dropdown')[1].style.visibility = "hidden";
                                document.getElementsByClassName('myDeleteButton')[0].style.visibility = "hidden";

                                document.getElementsByClassName('myRadiusButton')[0].style.backgroundColor = "#ff0000";
                                map.on({
                                    click: function(e){
                                        L.DomEvent.stopPropagation(e);
                                        mapPressForCreation = false;
                                        correctSizeVar = false;
                                    },
                                    mousedown: function (e) {
                                        L.DomEvent.stopPropagation(e);

                                        if(changeRadius){    
                                            let from = turf.point([lens.getLngLat().lat,lens.getLngLat().lng]);
                                            let optionsCreateCirc = {units: 'kilometers'};
                                            let once = true;
                                            mapPressForCreation = true;
                                            map.on('mousemove', function (event) {
                                                if(lens.getRadiusFlag()){

                                                    L.DomEvent.stopPropagation(event);
                                                    if(once){
                                                        lens.delete();
                                                        lens.updateOthersV2(true);
                                                        if(lens.hasBeenOpacity){
                                                            for(let j = 0; j < lens.intersections.length; j++){
                                                                lens.intersections[j].removeOpacityLens(lens);
                                                                for(let i = 0; i < lens.intersections[j].areas.length; i++){
                                                                    lens.intersections[j].areas[i].delete();
                                                                    lens.intersections[j].areas[i].createLayers();
                                                                }
                                                            }
                                                        }
                                                        once = false;
                                                    }
                                                    if (mapPressForCreation && changeRadius) {

                                                        map.dragging.disable();

                                                        let to = turf.point([event.latlng.lat, event.latlng.lng]);

                                                        let distance = turf.distance(from, to, optionsCreateCirc);
                                                        radiusValue = distance * 1000;
                                                        if (radiusValue >= 50 && radiusValue <= 25000) {
                                                            correctSizeVar = true;
                                                            lens.colorSuccess();
                                                            lens.setRadius(radiusValue);
                                                        } else {
                                                            correctSizeVar = false;
                                                            lens.areaQuery.setStyle({fillColor: 'DarkRed',color:'red'});
                                                        }
                                                    }
                                                    else
                                                        console.log("Mouse down but flags are false :S");
                                                }
                                            });
                                        }
                                    },
                                    mouseup: function (e) {
                                        L.DomEvent.stopPropagation(e);
                                        map.removeEventListener('mousemove');
                                        map.dragging.enable();
                                        if(changeRadius && lens.getRadiusFlag()){
                                            
                                            console.log(correctSizeVar);
                                            if (mapPressForCreation,correctSizeVar) {
                                                

                                                lens.createAreas();
                                                if(lens.hasBeenOpacity){
                                                    console.log("EPA FDS FUNCIONA CARALHO")
                                                    if(lens.enc != "opacity"){
                                                        lens.hasBeenOpacity = false;
                                                    }
                                                    else{
                                                        attOPACITYLensesArray.push(lens);
                                                        for(let j = 0; j < lens.intersections.length; j++){
                                                            lens.intersections[j].addOpacityLens(lens);
                                                            for(let i = 0; i < lens.intersections[j].areas.length; i++){
                                                                lens.intersections[j].areas[i].delete();
                                                                lens.intersections[j].areas[i].createLayers();
                                                            }
                                                        }
                                                    }
                                                    attLensArrayToServer();
                                                }
                                                lens.setBounds(lens.areaQuery.getBounds());
                                                
                                                lens.setRadiusOLD(lens.getRadius());
                                            }
                                            else{
                                                lens.setRadius(lens.getRadiusOLD());
                                            }

                                            map.fitBounds(lens.getBound());
                                            mapPressForCreation = false;
                                            correctSizeVar = false;
                                        }

                                    }
                                });
                            } else {
                                lens.setRadiusFlag(false);
                                map.fitBounds(lens.getBound());
                                document.getElementsByClassName('myMoveButton')[0].style.visibility = "visible";
                                document.getElementsByClassName('dropdown')[0].style.visibility = "visible";
                                document.getElementsByClassName('dropdown')[1].style.visibility = "visible";
                                document.getElementsByClassName('myDeleteButton')[0].style.visibility = "visible";
                                document.getElementsByClassName('myRadiusButton')[0].style.backgroundColor = "#ff8400";
                            }
                        }); */
                        $('.dropbtnOpt-length').click(function (e) {
                            L.DomEvent.stopPropagation(e);
                            if(lens.att != "length"){
                                //lens.updateOthers();
                                clearBox(idOfHistogram)
                                lens.updateLENS(true,"length");
                                //document.getElementsByClassName('explanation')[0].innerText=capitalizeFirstLetter(lens.att);
                                
                                document.getElementsByClassName('dropbtnOpt-length')[0].style.background = "#0c270093";                        
                                document.getElementsByClassName('dropbtnOpt-velocity')[0].style.background = "#44444493";                                
                                document.getElementsByClassName('dropbtnOpt-time')[0].style.background = "#44444493";                            
                                document.getElementsByClassName('dropbtnOpt-duration')[0].style.background = "#44444493";
                                document.getElementsByClassName('dropbtnOpt-weekDay')[0].style.background = "#44444493";
                                document.getElementsByClassName('dropbtnOpt-hourDay')[0].style.background = "#44444493";

                                circularHistogram(lens)
                            }
                        });
                        $('.dropbtnOpt-velocity').click(function (e) {
                            L.DomEvent.stopPropagation(e);
                            if(lens.att != "velocity"){
                                //lens.updateOthers();
                                clearBox(idOfHistogram)
                                lens.updateLENS(true,"velocity");
                                //document.getElementsByClassName('explanation')[0].innerText=capitalizeFirstLetter(lens.att);
                                document.getElementsByClassName('dropbtnOpt-length')[0].style.background = "#44444493";                        
                                document.getElementsByClassName('dropbtnOpt-velocity')[0].style.background = "#0c270093";                                
                                document.getElementsByClassName('dropbtnOpt-time')[0].style.background = "#44444493";                            
                                document.getElementsByClassName('dropbtnOpt-duration')[0].style.background = "#44444493";
                                document.getElementsByClassName('dropbtnOpt-weekDay')[0].style.background = "#44444493";
                                document.getElementsByClassName('dropbtnOpt-hourDay')[0].style.background = "#44444493";
                                console.log(lens.attArrayCircHistogram)
                                circularHistogram(lens)
                            }
                        });
                        $('.dropbtnOpt-time').click(function (e) {
                            L.DomEvent.stopPropagation(e);
                            if(lens.att != "time"){
                                //lens.updateOthers();
                                //lens.att = "time"
                                clearBox(idOfHistogram)
                                lens.updateLENS(true,"time");
                                //document.getElementsByClassName('explanation')[0].innerText=capitalizeFirstLetter(lens.att);
                                document.getElementsByClassName('dropbtnOpt-length')[0].style.background = "#44444493";                        
                                document.getElementsByClassName('dropbtnOpt-velocity')[0].style.background = "#44444493";                                
                                document.getElementsByClassName('dropbtnOpt-time')[0].style.background = "#0c270093";                            
                                document.getElementsByClassName('dropbtnOpt-duration')[0].style.background = "#44444493";
                                document.getElementsByClassName('dropbtnOpt-weekDay')[0].style.background = "#44444493";
                                document.getElementsByClassName('dropbtnOpt-hourDay')[0].style.background = "#44444493";
                                circularHistogram(lens)
                            }
                        });
                        $('.dropbtnOpt-duration').click(function (e) {
                            L.DomEvent.stopPropagation(e);

                            if(lens.att != "duration"){
                                //lens.updateOthers();
                                //lens.att = "duration"
                                clearBox(idOfHistogram)
                                lens.updateLENS(true,"duration");
                                //document.getElementsByClassName('explanation')[0].innerText=capitalizeFirstLetter(lens.att);
                                document.getElementsByClassName('dropbtnOpt-length')[0].style.background = "#44444493";                        
                                document.getElementsByClassName('dropbtnOpt-velocity')[0].style.background = "#44444493";                                
                                document.getElementsByClassName('dropbtnOpt-time')[0].style.background = "#44444493";                            
                                document.getElementsByClassName('dropbtnOpt-duration')[0].style.background = "#0c270093";
                                document.getElementsByClassName('dropbtnOpt-weekDay')[0].style.background = "#44444493";
                                document.getElementsByClassName('dropbtnOpt-hourDay')[0].style.background = "#44444493";
                                circularHistogram(lens)
                            }
                        });
                        $('.dropbtnOpt-weekDay').click(function (e) {
                            L.DomEvent.stopPropagation(e);

                            if(lens.att != "weekday"){
                                //lens.updateOthers();
                                //lens.att = "duration"
                                clearBox(idOfHistogram)
                                lens.updateLENS(true,"weekday");
                                //document.getElementsByClassName('explanation')[0].innerText=capitalizeFirstLetter(lens.att);
                                document.getElementsByClassName('dropbtnOpt-length')[0].style.background = "#44444493";                        
                                document.getElementsByClassName('dropbtnOpt-velocity')[0].style.background = "#44444493";                                
                                document.getElementsByClassName('dropbtnOpt-time')[0].style.background = "#44444493";                            
                                document.getElementsByClassName('dropbtnOpt-duration')[0].style.background = "#44444493";
                                document.getElementsByClassName('dropbtnOpt-weekDay')[0].style.background = "#0c270093";
                                document.getElementsByClassName('dropbtnOpt-hourDay')[0].style.background = "#44444493";
                                circularHistogram(lens)
                            }
                        });
                        $('.dropbtnOpt-hourDay').click(function (e) {
                            L.DomEvent.stopPropagation(e);

                            if(lens.att != "hourday"){
                                //lens.updateOthers();
                                //lens.att = "duration"
                                clearBox(idOfHistogram)
                                lens.updateLENS(true,"hourday");
                                //document.getElementsByClassName('explanation')[0].innerText=capitalizeFirstLetter(lens.att);
                                document.getElementsByClassName('dropbtnOpt-length')[0].style.background = "#44444493";                        
                                document.getElementsByClassName('dropbtnOpt-velocity')[0].style.background = "#44444493";                                
                                document.getElementsByClassName('dropbtnOpt-time')[0].style.background = "#44444493";                            
                                document.getElementsByClassName('dropbtnOpt-duration')[0].style.background = "#44444493";
                                document.getElementsByClassName('dropbtnOpt-weekDay')[0].style.background = "#44444493";
                                document.getElementsByClassName('dropbtnOpt-hourDay')[0].style.background = "#0c270093";
                                circularHistogram(lens)
                            }
                        });
                        $('.dropbtnOpt-color').click(function (e) {
                            L.DomEvent.stopPropagation(e);

                            if(lens.enc != "color"){
                                //lens.updateOthers();
                                //lens.enc = "color"
                                if(lens.enc == "opacity"){
                                    lens.removeOpacityArray();
                                    for(let j = 0; j < lens.intersections.length; j++){
                                        lens.intersections[j].removeOpacityLens(lens);  
                                    }
                                }
                                lens.updateLENS(false,"color");
                                //document.getElementsByClassName('explanation')[1].innerText=capitalizeFirstLetter(lens.enc);
                                document.getElementsByClassName('dropbtnOpt-color')[0].style.background = "#0c270093";             
                                document.getElementsByClassName('dropbtnOpt-width')[0].style.background = "#44444493";                              
                                document.getElementsByClassName('dropbtnOpt-brightness')[0].style.background = "#44444493";                              
                                document.getElementsByClassName('dropbtnOpt-opacity')[0].style.background = "#44444493";
                            }
                        });
                        $('.dropbtnOpt-width').click(function (e) {
                            L.DomEvent.stopPropagation(e);

                            if(lens.enc != "width"){
                                //lens.updateOthers();
                                //lens.enc = "width"
                                if(lens.enc == "opacity"){
                                    lens.removeOpacityArray();
                                    for(let j = 0; j < lens.intersections.length; j++){
                                        lens.intersections[j].removeOpacityLens(lens);  
                                    }
                                }
                                lens.updateLENS(false,"width");
                                //document.getElementsByClassName('explanation')[1].innerText=capitalizeFirstLetter(lens.enc);
                                document.getElementsByClassName('dropbtnOpt-color')[0].style.background = "#44444493";             
                                document.getElementsByClassName('dropbtnOpt-width')[0].style.background = "#0c270093";                              
                                document.getElementsByClassName('dropbtnOpt-brightness')[0].style.background = "#44444493";                              
                                document.getElementsByClassName('dropbtnOpt-opacity')[0].style.background = "#44444493";
                            }
                        });
                        $('.dropbtnOpt-brightness').click(function (e) {
                            L.DomEvent.stopPropagation(e);

                            if(lens.enc != "brightness"){
                                //lens.updateOthers();
                                //lens.enc = "brightness"
                                if(lens.enc == "opacity"){
                                    for(let j = 0; j < lens.intersections.length; j++){
                                        lens.intersections[j].removeOpacityLens(lens);  
                                    }
                                    lens.removeOpacityArray();
                                }
                                lens.updateLENS(false,"brightness");
                                //document.getElementsByClassName('explanation')[1].innerText=capitalizeFirstLetter(lens.enc);
                                document.getElementsByClassName('dropbtnOpt-color')[0].style.background = "#44444493";             
                                document.getElementsByClassName('dropbtnOpt-width')[0].style.background = "#44444493";                              
                                document.getElementsByClassName('dropbtnOpt-brightness')[0].style.background = "#0c270093";                              
                                document.getElementsByClassName('dropbtnOpt-opacity')[0].style.background = "#44444493";
                            }
                        });
                        $('.dropbtnOpt-opacity').click(async function (e) {
                            L.DomEvent.stopPropagation(e);

                            if(lens.enc != "opacity"){
                                //lens.updateOthers();
                                //lens.enc = "opacity"
                                
                                //document.getElementsByClassName('explanation')[1].innerText=capitalizeFirstLetter(lens.enc);
                                document.getElementsByClassName('dropbtnOpt-color')[0].style.background = "#44444493";             
                                document.getElementsByClassName('dropbtnOpt-width')[0].style.background = "#44444493";                              
                                document.getElementsByClassName('dropbtnOpt-brightness')[0].style.background = "#44444493";                              
                                document.getElementsByClassName('dropbtnOpt-opacity')[0].style.background = "#0c270093";
                                console.log(attLensesArray)
                                console.log(lens.hasBeenOpacity);
                                attOPACITYLensesArray.push(lens);
                                if(!lens.hasBeenOpacity){
                                    lens.hasBeenOpacity = true;

                                    console.log("Here is opc Array")
                                    console.log(attOPACITYLensesArray);
                                    attLensArrayToServer();
                                    
                                    
                                    for(let j = 0; j < lens.intersections.length; j++){
                                        lens.intersections[j].addOpacityLens(lens);
                                        for(let i = 0; i < lens.intersections[j].areas.length; i++){
                                            lens.intersections[j].areas[i].delete();
                                            lens.intersections[j].areas[i].createLayers();
                                        }
                                    }
                                }
                                
                                lens.updateLENS(false,"opacity");
                            }
                            
                        }); 
                        circularHistogram(lens)
                    }     
                    //});
                   
                }
                 
            }); 
            console.log(attLensesArray);
            return lens
        }

        function creaAttAreas(areaOfQuery){
            let attLayer = L.featureGroup({pane: 'attLensPane'}).addTo(attLenResults);
                    
                   
            let areaObj = {
                area:areaOfQuery,
                lensArray: [],
                lID:attLayer._leaflet_id,
                opacityLensArray: [],
                setArea: function(newValue){

                    //this.area = turf.clone(newValue);
                    this.area = newValue;
                },
                addLens: function (obj){
                    this.lensArray.push(obj);
                },
                removeLens: function (obj){
                    for(let i = this.lensArray.length - 1; i >= 0; i--) {
                        if(this.lensArray[i] === obj) {
                            this.lensArray.splice(i, 1);
                            return true;
                        }
                    }
                    return false;
                },
                setlID : function(value){
                    this.lID = value;
                },
                getlID : function(){
                    return this.lID;
                },
                getLensArray : function(){
                    return this.lensArray;
                },
                createLayers : function(){
                    let areasArrayIntersections = [];
                    this.opacityLensArray.forEach(function(arrayElement){
                        arrayElement.areas.forEach(function (areasElement){
                            areasArrayIntersections.push(areasElement.area.geometry);
                        })
                        
                    })
                    let _attLayer = L.featureGroup({pane: 'attLensPane'}).addTo(attLayer);
                    let _attLayer1 = L.featureGroup({pane: 'attLensPane'}).addTo(attLayer);
                    let _attLayer2 = L.featureGroup({pane: 'attLensPane'}).addTo(attLayer);
                    let _attLayer3 = L.featureGroup({pane: 'attLensPane'}).addTo(attLayer);
                    

                        // Create URL
                    let urlString3 = "attQueryNEW/trajectory_lines/"  + JSON.stringify(this.area.geometry);
                    let urlString2 = "attQueryNEW/trajectory_lines1/" + JSON.stringify(this.area.geometry);
                    let urlString1 = "attQueryNEW/trajectory_lines2/" + JSON.stringify(this.area.geometry);
                    let urlString  = "attQueryNEW/trajectory_lines3/" + JSON.stringify(this.area.geometry);
                    
                    let contadorLayer = 0
                    
                    let thisVar = this;
                    let newData = $.ajax({
                        url: urlString,
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({areasArrayIntersections}),
                        success: console.log("Data successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    }) 
                    $.when(newData).done(function() {
                        contadorLayer += 1
                        if(newData.responseJSON.features != null){
                            newData.responseJSON.features.forEach(function(item, index, array) {
                                let tracksToDraw = L.geoJson(item,firstStyleATT);
                                thisVar.getLensArray().forEach(function(lens,index,array){
                                    lens.updateLayer(tracksToDraw,item.properties);
                                });
                                tracksToDraw.addTo(_attLayer);
                                
                            });
                            
                        }
                        if(contadorLayer == 4){
                            if(thisVar.lensArray[0].idOfHistogram != "" && thisVar.lensArray[0].visibleOutsideMenuFlag == true){
                                clearBox(thisVar.lensArray[0].idOfHistogram)
                                circularHistogram(thisVar.lensArray[0])
                            }
                        }
                    }); 
                    let newData1 = $.ajax({
                        url: urlString1,
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({areasArrayIntersections}),
                        success: console.log("Data successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    }) 
                    $.when(newData1).done(function() {
                        contadorLayer += 1
                        if(newData1.responseJSON.features != null){
                            newData1.responseJSON.features.forEach(function(item, index, array) {
                                let tracksToDraw = L.geoJson(item,firstStyleATT1);
                                thisVar.getLensArray().forEach(function(lens,index,array){
                                    lens.updateLayer(tracksToDraw,item.properties);
                                });
                                tracksToDraw.addTo(_attLayer1);
                                
                            });
                            
                        }
                        if(contadorLayer == 4){
                            if(thisVar.lensArray[0].idOfHistogram != "" && thisVar.lensArray[0].visibleOutsideMenuFlag == true){
                                clearBox(thisVar.lensArray[0].idOfHistogram)
                                circularHistogram(thisVar.lensArray[0])
                            }
                        }
                    });
                    let newData2 = $.ajax({
                        url: urlString2,
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({areasArrayIntersections}),
                        success: console.log("Data successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    }) 
                    $.when(newData2).done(function() {
                        contadorLayer += 1
                        if(newData2.responseJSON.features != null){
                            newData2.responseJSON.features.forEach(function(item, index, array) {
                                let tracksToDraw = L.geoJson(item,firstStyleATT2);
                                thisVar.getLensArray().forEach(function(lens,index,array){
                                    lens.updateLayer(tracksToDraw,item.properties); 
                                });
                                tracksToDraw.addTo(_attLayer2);
                                
                            });
                            
                        }
                        if(contadorLayer == 4){
                            if(thisVar.lensArray[0].idOfHistogram != "" && thisVar.lensArray[0].visibleOutsideMenuFlag == true){
                                clearBox(thisVar.lensArray[0].idOfHistogram)
                                circularHistogram(thisVar.lensArray[0])
                            }
                        }
                    });
                    let newData3 = $.ajax({
                        url: urlString3,
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({areasArrayIntersections}),
                        success: console.log("Data successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    }) 
                    $.when(newData3).done(function() {
                        contadorLayer += 1
                        if(newData3.responseJSON.features != null){
                            newData3.responseJSON.features.forEach(function(item, index, array) {
                                let tracksToDraw = L.geoJson(item,firstStyleATT3);
                                thisVar.getLensArray().forEach(function(lens,index,array){
                                    lens.updateLayer(tracksToDraw,item.properties); 
                                });
                                tracksToDraw.addTo(_attLayer3);
                                
                            });
                            
                            
                        }
                        if(contadorLayer == 4){
                            if(thisVar.lensArray[0].idOfHistogram != "" && thisVar.lensArray[0].visibleOutsideMenuFlag == true){
                                clearBox(thisVar.lensArray[0].idOfHistogram)
                                circularHistogram(thisVar.lensArray[0])
                            }
                        }
                    });
                    
                },
                updateLayer : function(){
                    let thisVar = this;
                    //if(this.getlID() != null){
                    let contador = 0
                    var styleOfThis
                    attLenResults.getLayer(this.getlID()).eachLayer(function(oneOfFourATTLayers){

                        if(contador == 0)
                            styleOfThis = firstStyleATT;
                        else if(contador == 0)
                            styleOfThis = firstStyleATT1;
                        else if(contador == 0)
                            styleOfThis = firstStyleATT2;
                        else
                            styleOfThis = firstStyleATT3;

                        oneOfFourATTLayers.eachLayer(function(oneOfSmallLayerContainer){
                            oneOfSmallLayerContainer.eachLayer(function(oneOfSmallLayers) {
                                oneOfSmallLayers.setStyle(firstStyleATT);
                                thisVar.getLensArray().forEach(function(lens,index,array){
                                    lens.updateLayer(oneOfSmallLayers,oneOfSmallLayers.feature.properties);
                                });
                            });
                        });
                    });
                    /*}
                    else{
                        console.log("This area has no lID");
                    }*/
                },
                delete : function(){
                    attLenResults.getLayer(this.getlID()).clearLayers();
                    //this.setlID(null);
                }


            };
            return areaObj;
        }

        /////
        /////
        /////

        /////
        /////  Functions per attribute
        /////

        function velocityAtt(layer, properties, encoding, attArrayCircHistogram){
             // code block
            let velAtt = properties.f4;
            //{"[0-9[":0,"[9-16[":0,"[16-25[":0,"[25-40[":0,"[40-50[":0,"[50-60[":0,"[60-70[":0,"[70-80[" :0,"[80-90[" :0,"[90-200[" :0}
            switch(encoding){
                case "color":
                    if(velAtt <= 9)          {
                        attArrayCircHistogram[0].value = attArrayCircHistogram[0].value  + 1
                        layer.setStyle({color :'#ff3232'});
                    }
                    else if(velAtt <= 16)     {
                        attArrayCircHistogram[1].value  = attArrayCircHistogram[1].value  + 1
                        layer.setStyle({color :'#ff6928'});
                    }
                    else if(velAtt <= 25)    {
                        attArrayCircHistogram[2].value  = attArrayCircHistogram[2].value  + 1
                        layer.setStyle({color :'#fcb42f'});
                    }
                    else if(velAtt <= 40)    {
                        attArrayCircHistogram[3].value  = attArrayCircHistogram[3].value  + 1
                        layer.setStyle({color :'#fcce28'});
                    }
                    else if(velAtt <= 50)    {
                        attArrayCircHistogram[4].value  = attArrayCircHistogram[4].value  + 1
                        layer.setStyle({color :'#fcd62f'});
                    }
                    else if(velAtt <= 60)    {
                        attArrayCircHistogram[5].value  = attArrayCircHistogram[5].value  + 1
                        layer.setStyle({color :'#fcf528'});
                    }
                    else if(velAtt <=  70)   {
                        attArrayCircHistogram[6].value  = attArrayCircHistogram[6].value  + 1
                        layer.setStyle({color :'#d5fc28'});
                    }
                    else if(velAtt <=  80)   {
                        attArrayCircHistogram[7].value  = attArrayCircHistogram[7].value  + 1
                        layer.setStyle({color :'#b9fc28'});
                    }
                    else if(velAtt <=  90)   {
                        attArrayCircHistogram[8].value  = attArrayCircHistogram[8].value  + 1
                        layer.setStyle({color :'#80fc28'});
                    }
                    else    {
                        attArrayCircHistogram[9].value  = attArrayCircHistogram[9].value  + 1
                        layer.setStyle({color :'#00ff00'});}
                    break;
                    
                case "brightness":
                    if(velAtt <= 10)          {
                        attArrayCircHistogram[0].value = attArrayCircHistogram[0].value  + 1
                        let colr = ColorLuminance(layer.options.color,-0.9);
                        layer.setStyle({"color":colr});
                    }
                    else if(velAtt <= 20)     {
                        attArrayCircHistogram[1].value = attArrayCircHistogram[1].value  + 1
                        let colr = ColorLuminance(layer.options.color,-0.7);
                        layer.setStyle({"color":colr});
                    }
                    else if(velAtt <= 30)    {
                        attArrayCircHistogram[2].value = attArrayCircHistogram[2].value  + 1
                        let colr = ColorLuminance(layer.options.color,-0.5);
                        layer.setStyle({"color":colr});
                    }
                    else if(velAtt <= 40)    {
                        attArrayCircHistogram[3].value = attArrayCircHistogram[3].value  + 1
                        let colr = ColorLuminance(layer.options.color,-0.3);
                        layer.setStyle({"color":colr});
                    }
                    else if(velAtt <= 50)    {
                        attArrayCircHistogram[4].value = attArrayCircHistogram[4].value  + 1
                        let colr = ColorLuminance(layer.options.color,-0.1);
                        layer.setStyle({"color":colr});
                    }
                    else if(velAtt <= 60)    {
                        attArrayCircHistogram[5].value = attArrayCircHistogram[5].value  + 1
                        let colr = ColorLuminance(layer.options.color,+0.1);
                        layer.setStyle({"color":colr});
                    }
                    else if(velAtt <=  70)   {
                        attArrayCircHistogram[6].value = attArrayCircHistogram[6].value  + 1
                        let colr = ColorLuminance(layer.options.color,+0.3);
                        layer.setStyle({"color":colr});
                    }
                    else if(velAtt <=  80)   {
                        attArrayCircHistogram[7].value = attArrayCircHistogram[7].value  + 1
                        let colr = ColorLuminance(layer.options.color,+0.5);
                        layer.setStyle({"color":colr});
                    }
                    else if(velAtt <=  90)   {
                        attArrayCircHistogram[8].value = attArrayCircHistogram[8].value  + 1
                        let colr = ColorLuminance(layer.options.color,+0.7);
                        layer.setStyle({"color":colr});
                    }
                    else    {
                        attArrayCircHistogram[9].value = attArrayCircHistogram[9].value  + 1
                        let colr = ColorLuminance(layer.options.color,+0.9);
                        layer.setStyle({"color":colr});
                    }            
                    break;
                case "opacity":
                    if(velAtt <= 10)          {
                        attArrayCircHistogram[0].value = attArrayCircHistogram[0].value  + 1
                        layer.setStyle({opacity : 0.1});
                    }
                    else if(velAtt <= 20)     {
                        attArrayCircHistogram[1].value = attArrayCircHistogram[1].value  + 1
                        layer.setStyle({opacity : 0.2});
                    }
                    else if(velAtt <= 30)    {
                        attArrayCircHistogram[2].value = attArrayCircHistogram[2].value  + 1
                        layer.setStyle({opacity : 0.3});
                    }
                    else if(velAtt <= 40)    {
                        attArrayCircHistogram[3].value = attArrayCircHistogram[3].value  + 1
                        layer.setStyle({opacity : 0.4});
                    }
                    else if(velAtt <= 50)    {
                        attArrayCircHistogram[4].value = attArrayCircHistogram[4].value  + 1
                        layer.setStyle({opacity : 0.5});
                    }
                    else if(velAtt <= 60)    {
                        attArrayCircHistogram[5].value = attArrayCircHistogram[5].value  + 1
                        layer.setStyle({opacity : 0.6});
                    }
                    else if(velAtt <=  70)   {
                        attArrayCircHistogram[6].value = attArrayCircHistogram[6].value  + 1
                        layer.setStyle({opacity : 0.7});
                    }
                    else if(velAtt <=  80)   {
                        attArrayCircHistogram[7].value = attArrayCircHistogram[7].value  + 1
                        layer.setStyle({opacity : 0.8});
                    }
                    else if(velAtt <=  90)   {
                        attArrayCircHistogram[8].value = attArrayCircHistogram[8].value  + 1
                        layer.setStyle({opacity : 0.9});
                    }
                    else    {
                        attArrayCircHistogram[9].value = attArrayCircHistogram[9].value  + 1
                        layer.setStyle({opacity : 1});
                    }
                    break;
                case "width":
                    if(velAtt <= 10)        {
                        attArrayCircHistogram[0].value = attArrayCircHistogram[0].value  + 1
                        layer.setStyle({"weight": 1});
                        }
                    else if(velAtt <= 20)   {
                        attArrayCircHistogram[1].value = attArrayCircHistogram[1].value  + 1
                        layer.setStyle({"weight": 2});
                        }
                    else if(velAtt <= 30)   {
                        attArrayCircHistogram[2].value = attArrayCircHistogram[2].value  + 1
                        layer.setStyle({"weight": 2.5});
                        }
                    else if(velAtt <= 40)   {
                        attArrayCircHistogram[3].value = attArrayCircHistogram[3].value  + 1
                        layer.setStyle({"weight": 2.8});
                        }
                    else if(velAtt <= 50)   {
                        attArrayCircHistogram[4].value = attArrayCircHistogram[4].value  + 1
                        layer.setStyle({"weight": 3.3});
                        }
                    else if(velAtt <= 60)   {
                        attArrayCircHistogram[5].value = attArrayCircHistogram[5].value  + 1
                        layer.setStyle({"weight": 3.6});
                        }
                    else if(velAtt <= 70)   {
                        attArrayCircHistogram[6].value = attArrayCircHistogram[6].value  + 1
                        layer.setStyle({"weight": 4});
                        }
                    else if(velAtt <= 80)   {
                        attArrayCircHistogram[7].value = attArrayCircHistogram[7].value  + 1
                        layer.setStyle({"weight": 4.5});
                        }
                    else if(velAtt <= 90)   {
                        attArrayCircHistogram[8].value = attArrayCircHistogram[8].value  + 1
                        layer.setStyle({"weight": 5});
                        }
                    else                    {
                        attArrayCircHistogram[9].value = attArrayCircHistogram[9].value  + 1
                        layer.setStyle({"weight": 6});
                        }
                    break;
            }
        }

        function lengthAtt(layer,properties, encoding, attArrayCircHistogram){
             // code block
            let len = properties.f1;
            
            switch(encoding){
                case "color":
                    if(len <= 1000)          {
                        attArrayCircHistogram[0].value = attArrayCircHistogram[0].value  + 1
                        layer.setStyle({color :'#ff3232'}) 
                        }
                    else if(len <= 4000)     {
                        attArrayCircHistogram[1].value = attArrayCircHistogram[1].value  + 1
                        layer.setStyle({color :'#ff6928'})
                        }
                    else if(len <= 7000)    {
                        attArrayCircHistogram[2].value = attArrayCircHistogram[2].value  + 1
                        layer.setStyle({color :'#fcb42f'}) 
                        }
                    else if(len <= 10000)    {
                        attArrayCircHistogram[3].value = attArrayCircHistogram[3].value  + 1
                        layer.setStyle({color :'#fcce28'})
                        }
                    else if(len <= 15000)   { 
                        attArrayCircHistogram[4].value = attArrayCircHistogram[4].value  + 1
                        layer.setStyle({color :'#fcd62f'}) 
                        }
                    else if(len <= 20000)    {
                        attArrayCircHistogram[5].value = attArrayCircHistogram[5].value  + 1
                        layer.setStyle({color :'#fcf528'}) 
                        }
                    else if(len <= 35000)   {
                        attArrayCircHistogram[6].value = attArrayCircHistogram[6].value  + 1
                        layer.setStyle({color :'#d5fc28'})
                        }
                    else if(len <= 60000)   {
                        attArrayCircHistogram[7].value = attArrayCircHistogram[7].value  + 1
                        layer.setStyle({color :'#b9fc28'})
                        }
                    else if (len <= 100000) {
                        attArrayCircHistogram[8].value = attArrayCircHistogram[8].value  + 1
                        layer.setStyle({color :'#80fc28'})
                        }
                    else                    {
                        attArrayCircHistogram[9].value = attArrayCircHistogram[9].value  + 1
                        layer.setStyle({color :'#00ff00'})
                        }
                    break;
                case "brightness":
                    if(len <= 1000)          {
                        attArrayCircHistogram[0].value = attArrayCircHistogram[0].value  + 1
                        let colr = ColorLuminance(layer.options.color,-0.95);
                        layer.setStyle({"color":colr});
                    }
                  else if(len <= 4000)     {
                        attArrayCircHistogram[1].value = attArrayCircHistogram[1].value  + 1
                        let colr = ColorLuminance(layer.options.color,-0.8);
                        layer.setStyle({"color":colr});
                    }
                  else if(len <= 7000)    {
                        attArrayCircHistogram[2].value = attArrayCircHistogram[2].value  + 1
                        let colr = ColorLuminance(layer.options.color,-0.6);
                        layer.setStyle({"color":colr});
                    }
                  else if(len <= 10000)    {
                        attArrayCircHistogram[3].value = attArrayCircHistogram[3].value  + 1
                        let colr = ColorLuminance(layer.options.color,-0.4);
                        layer.setStyle({"color":colr});
                    }
                  else if(len <= 20000)    {
                        attArrayCircHistogram[4].value = attArrayCircHistogram[4].value  + 1
                        let colr = ColorLuminance(layer.options.color,-0.2);
                        layer.setStyle({"color":colr});
                    }
                  else if(len <= 30000)    {
                        attArrayCircHistogram[5].value = attArrayCircHistogram[5].value  + 1
                        console.log("brightness already at 1")
                    }
                  else if(len <=  50000)   {
                        attArrayCircHistogram[6].value = attArrayCircHistogram[6].value  + 1
                        let colr = ColorLuminance(layer.options.color,+0.2);
                        layer.setStyle({"color":colr});
                    }
                  else if(len <=  75000)   {
                        attArrayCircHistogram[7].value = attArrayCircHistogram[7].value  + 1
                        let colr = ColorLuminance(layer.options.color,+0.4);
                        layer.setStyle({"color":colr});
                    }
                  else if(len <=  100000)   {
                        attArrayCircHistogram[8].value = attArrayCircHistogram[8].value  + 1
                        let colr = ColorLuminance(layer.options.color,+0.6);
                        layer.setStyle({"color":colr});
                    }
                    else {
                        attArrayCircHistogram[9].value = attArrayCircHistogram[9].value  + 1
                        let colr = ColorLuminance(layer.options.color,+0.8);
                        layer.setStyle({"color":colr});
                    }                   
                    break;
                case "opacity":
                    if(len <= 1000)          {
                        attArrayCircHistogram[0].value = attArrayCircHistogram[0].value  + 1
                        layer.setStyle({opacity:0.05});
                        }
                  else if(len <= 4000)     {
                        attArrayCircHistogram[1].value = attArrayCircHistogram[1].value  + 1
                        layer.setStyle({opacity:0.10});
                        }
                  else if(len <= 7000)    {
                        attArrayCircHistogram[2].value = attArrayCircHistogram[2].value  + 1
                        layer.setStyle({opacity:0.20}); 
                        }
                  else if(len <= 10000)    {
                        attArrayCircHistogram[3].value = attArrayCircHistogram[3].value  + 1
                        layer.setStyle({opacity:0.35});
                        }
                  else if(len <= 20000)    {
                        attArrayCircHistogram[4].value = attArrayCircHistogram[4].value  + 1
                        layer.setStyle({opacity:0.5});
                        }
                  else if(len <= 30000)    {
                        attArrayCircHistogram[5].value = attArrayCircHistogram[5].value  + 1
                        layer.setStyle({opacity:0.65});
                        }
                  else if(len <= 50000)   {
                        attArrayCircHistogram[6].value = attArrayCircHistogram[6].value  + 1
                        layer.setStyle({opacity:0.8});
                        }

                  else if(len <= 75000)   {
                        attArrayCircHistogram[7].value = attArrayCircHistogram[7].value  + 1
                        layer.setStyle({opacity:0.9});
                        }

                  else if(len <= 100000)  {
                        attArrayCircHistogram[8].value = attArrayCircHistogram[8].value  + 1
                        layer.setStyle({opacity:0.95});
                        }

                    else                    {
                        attArrayCircHistogram[9].value = attArrayCircHistogram[9].value  + 1
                        console.log("Opcacity already at 1")}
                    break;
                case "width":
                  if(len <= 1000)              {
                        attArrayCircHistogram[0].value = attArrayCircHistogram[0].value  + 1
                        layer.setStyle({"weight": 1});
                        }
                  else if(len <= 4000)     {
                        attArrayCircHistogram[1].value = attArrayCircHistogram[1].value  + 1
                        layer.setStyle({"weight": 1.4});
                        }
                  else if(len <= 7000)    {
                        attArrayCircHistogram[2].value = attArrayCircHistogram[2].value  + 1
                        layer.setStyle({"weight": 1.8});
                        }
                  else if(len <= 10000)    {
                        attArrayCircHistogram[3].value = attArrayCircHistogram[3].value  + 1
                        layer.setStyle({"weight": 2.2});
                        }
                  else if(len <= 20000)    {
                        attArrayCircHistogram[4].value = attArrayCircHistogram[4].value  + 1
                        layer.setStyle({"weight": 2.6});
                        }
                  else if(len <= 30000)    {
                        attArrayCircHistogram[5].value = attArrayCircHistogram[5].value  + 1
                        layer.setStyle({"weight": 3});
                        }
                  else if(len <= 50000)   {
                        attArrayCircHistogram[6].value = attArrayCircHistogram[6].value  + 1
                        layer.setStyle({"weight": 3.4});
                        }
                  else if(len <= 75000)   {
                        attArrayCircHistogram[7].value = attArrayCircHistogram[7].value  + 1
                        layer.setStyle({"weight": 3.8});
                        }
                  else if(len <= 100000)  {
                        attArrayCircHistogram[8].value = attArrayCircHistogram[8].value  + 1
                        layer.setStyle({"weight": 4.2});
                        }
                  else                    {
                        attArrayCircHistogram[9].value = attArrayCircHistogram[9].value  + 1
                        layer.setStyle({"weight": 4.6});
                        }
                  break;
            }
        }
        
        function durationAtt(layer, properties, encoding, attArrayCircHistogram){
             // code block
            let dur = properties.f2;
            switch(encoding){
                case "color":
                    if(dur <= "00:05:00")           {
                        attArrayCircHistogram[0].value = attArrayCircHistogram[0].value  + 1
                        layer.setStyle({color :'#ff3232'})
                        }
                    else if(dur <= "00:10:00")      {
                        attArrayCircHistogram[1].value = attArrayCircHistogram[1].value  + 1
                        layer.setStyle({color :'#fcb42f'})
                        }
                    else if(dur <= "00:30:00")      {
                        attArrayCircHistogram[2].value = attArrayCircHistogram[2].value  + 1
                        layer.setStyle({color :'#fcd62f'})
                        }
                    else if(dur <= "00:45:00")     {
                        attArrayCircHistogram[3].value = attArrayCircHistogram[3].value  + 1
                        layer.setStyle({color :'#fcf528'})
                        }
                    else if(dur <=  "01:30:00")     {
                        attArrayCircHistogram[4].value = attArrayCircHistogram[4].value  + 1
                        layer.setStyle({color :'#b9fc28'})
                        }
                    else                            {
                        attArrayCircHistogram[5].value = attArrayCircHistogram[5].value  + 1
                        layer.setStyle({color :'#00ff00'})
                        }
                    break;
                case "brightness":
                    if(dur <= "00:05:00")          {
                        attArrayCircHistogram[0].value = attArrayCircHistogram[0].value  + 1
                        let colr = ColorLuminance(layer.options.color,-0.9);
                        layer.setStyle({"color":colr});
                    }
                    else if(dur <= "00:10:00")     {
                        attArrayCircHistogram[1].value = attArrayCircHistogram[1].value  + 1
                        let colr = ColorLuminance(layer.options.color,-0.6);
                        layer.setStyle({"color":colr});
                    }
                    else if(dur <= "00:30:00")    {
                        attArrayCircHistogram[2].value = attArrayCircHistogram[2].value  + 1
                        console.log("brightness already at 1")
                    }
                    else if(dur <= "00:45:00")    {
                        attArrayCircHistogram[3].value = attArrayCircHistogram[3].value  + 1
                        let colr = ColorLuminance(layer.options.color,+0.3);
                        layer.setStyle({"color":colr});
                    }
                    else if(dur <=  "01:30:00")   {
                        attArrayCircHistogram[4].value = attArrayCircHistogram[4].value  + 1
                        let colr = ColorLuminance(layer.options.color,+0.6);
                        layer.setStyle({"color":colr});
                    }
                    else  {
                        attArrayCircHistogram[5].value = attArrayCircHistogram[5].value  + 1
                        let colr = ColorLuminance(layer.options.color,+0.9);
                        layer.setStyle({"color":colr});
                        }                  
                    break;
                case "opacity":
                    if(dur <= "00:05:00")           {
                        attArrayCircHistogram[0].value = attArrayCircHistogram[0].value  + 1
                        layer.setStyle({opacity:0.05});
                        }
                    else if(dur <= "00:10:00")      {
                        attArrayCircHistogram[1].value = attArrayCircHistogram[1].value  + 1
                        layer.setStyle({opacity:0.15}); 
                        }
                    else if(dur <= "00:30:00")      {
                        attArrayCircHistogram[2].value = attArrayCircHistogram[2].value  + 1
                        layer.setStyle({opacity:0.3});
                        }
                    else if(dur <= "00:45:00")      {
                        attArrayCircHistogram[3].value = attArrayCircHistogram[3].value  + 1
                        layer.setStyle({opacity:0.55});
                        }
                    else if(dur <=  "01:30:00")     {
                        attArrayCircHistogram[4].value = attArrayCircHistogram[4].value  + 1
                        layer.setStyle({opacity:0.8});
                        }
                    else                            {
                        attArrayCircHistogram[5].value = attArrayCircHistogram[5].value  + 1
                        console.log("Opcacity already at 1")
                        }
                    break;
                case "width":
                    if(dur <= "00:05:00")           {
                        attArrayCircHistogram[0].value = attArrayCircHistogram[0].value  + 1
                        layer.setStyle({"weight": 1});
                        }
                    else if(dur <= "00:10:00")      {
                        attArrayCircHistogram[1].value = attArrayCircHistogram[1].value  + 1
                        layer.setStyle({"weight": 1.5});
                        }
                    else if(dur <= "00:30:00")      {
                        attArrayCircHistogram[2].value = attArrayCircHistogram[2].value  + 1
                        layer.setStyle({"weight": 2});
                        }
                    else if(dur <= "00:45:00")      {
                        attArrayCircHistogram[3].value = attArrayCircHistogram[3].value  + 1
                        layer.setStyle({"weight": 2.5});
                        }
                    else if(dur <=  "01:30:00")    { 
                        attArrayCircHistogram[4].value = attArrayCircHistogram[4].value  + 1
                        layer.setStyle({"weight": 3});
                        }
                    else                            {
                        attArrayCircHistogram[5].value = attArrayCircHistogram[5].value  + 1
                        layer.setStyle({"weight": 3.5});
                        }
                    break;
            }
        }

         function timeAtt(layer, properties, encoding, attArrayCircHistogram){
            // 2008-02-02 13:30:44
            // 2008-02-08 17:39:18
            // code block
            let tim = new Date(properties.f3)/1000;
            var timeNow = new Date(Date.now());
            var diffIntervals = (maxTimeValue - minTimeValue)/24
            switch(encoding){
                case "color":
                    if (tim >= timeNow.setUTCHours(timeNow.getHours()-2)) layer.setStyle({color :'#01BC86'})
                    
                    else if (tim >= timeNow.setHours(timeNow.getHours()-12)) layer.setStyle({color :'#1EC79F'})
                    
                    else if (tim >= timeNow.setDate(timeNow.getDate()-1)) layer.setStyle({color :'#3ED2B6'})
                    
                    else if (tim >= timeNow.setDate(timeNow.getDate()-2)) layer.setStyle({color :'#62DDCC'})
                    
                    else if (tim >= timeNow.setDate(timeNow.getDate()-3)) layer.setStyle({color :'#89E8DF'})
                    
                    else if (tim >= timeNow.setDate(timeNow.getDate()-7)) layer.setStyle({color :'#B3F3F0'})
                    
                    else if (tim >= timeNow.setMonth(timeNow.getMonth() - 1)) layer.setStyle({color :'#E1FFFF'})
                    
                    else if(tim >= maxTimeValue - diffIntervals)       {
                        attArrayCircHistogram[0].value = attArrayCircHistogram[0].value  + 1
                        layer.setStyle({color :'#49BC01'})
                    }
                    else if(tim >= maxTimeValue - 2*diffIntervals)       {
                        attArrayCircHistogram[1].value = attArrayCircHistogram[1].value  + 1
                        layer.setStyle({color :'#57BD01'})
                    }
                    else if(tim >= maxTimeValue - 3*diffIntervals)       {
                        attArrayCircHistogram[2].value = attArrayCircHistogram[2].value  + 1
                        layer.setStyle({color :'#66BE01'})
                    }
                    else if(tim >= maxTimeValue - 4*diffIntervals)      {
                        attArrayCircHistogram[3].value = attArrayCircHistogram[3].value  + 1
                        layer.setStyle({color :'#75BF01'})
                    }
                    else if(tim >= maxTimeValue - 5*diffIntervals)      {
                        attArrayCircHistogram[4].value = attArrayCircHistogram[4].value  + 1
                        layer.setStyle({color :'#84C101'})
                    }
                    else if(tim >= maxTimeValue - 6*diffIntervals)      {
                        attArrayCircHistogram[5].value = attArrayCircHistogram[5].value  + 1
                        layer.setStyle({color :'#94C201'})
                    }
                    else if(tim >= maxTimeValue - 7*diffIntervals)      {
                        attArrayCircHistogram[6].value = attArrayCircHistogram[6].value  + 1
                        layer.setStyle({color :'#A3C301'})
                    }
                    else if(tim >= maxTimeValue - 8*diffIntervals)      {
                        attArrayCircHistogram[7].value = attArrayCircHistogram[7].value  + 1
                        layer.setStyle({color :'#B3C501'})
                    }
                    else if(tim >= maxTimeValue - 9*diffIntervals)      {
                        attArrayCircHistogram[8].value = attArrayCircHistogram[8].value  + 1
                        layer.setStyle({color :'#C3C601'})
                    }
                    else if(tim >= maxTimeValue - 10*diffIntervals)      {
                        attArrayCircHistogram[9].value = attArrayCircHistogram[9].value  + 1
                        layer.setStyle({color :'#C7BB01'})
                    }
                    else if(tim >= maxTimeValue - 11*diffIntervals)      {
                        attArrayCircHistogram[10].value = attArrayCircHistogram[10].value  + 1
                        layer.setStyle({color :'#C9AD01'})
                    }
                    else if(tim >= maxTimeValue - 12*diffIntervals)      {
                        attArrayCircHistogram[11].value = attArrayCircHistogram[11].value  + 1
                        layer.setStyle({color :'#CA9F01'})
                    }
                    else if(tim >= maxTimeValue - 13*diffIntervals)      {
                        attArrayCircHistogram[12].value = attArrayCircHistogram[12].value  + 1
                        layer.setStyle({color :'#CB9101'})
                    }
                    else if(tim >= maxTimeValue - 14*diffIntervals)       {
                        attArrayCircHistogram[13].value = attArrayCircHistogram[13].value  + 1
                        layer.setStyle({color :'#CC8201'})
                    }
                    else if(tim >= maxTimeValue - 15*diffIntervals)       {
                        attArrayCircHistogram[14].value = attArrayCircHistogram[14].value  + 1
                        layer.setStyle({color :'#CE7401'})
                    }
                    else if(tim >= maxTimeValue - 16*diffIntervals)       {
                        attArrayCircHistogram[15].value = attArrayCircHistogram[15].value  + 1
                        layer.setStyle({color :'#CF6501'})
                    }
                    else if(tim >= maxTimeValue - 17*diffIntervals)      {
                        attArrayCircHistogram[16].value = attArrayCircHistogram[16].value  + 1
                        layer.setStyle({color :'#D05601'})
                    }
                    else if(tim >= maxTimeValue - 18*diffIntervals)      {
                        attArrayCircHistogram[17].value = attArrayCircHistogram[17].value  + 1
                        layer.setStyle({color :'#D24701'})
                    }
                    else if(tim >= maxTimeValue - 19*diffIntervals)      {
                        attArrayCircHistogram[18].value = attArrayCircHistogram[18].value  + 1
                        layer.setStyle({color :'#D33701'})
                    }
                    else if(tim >= maxTimeValue - 20*diffIntervals)      {
                        attArrayCircHistogram[19].value = attArrayCircHistogram[19].value  + 1
                        layer.setStyle({color :'#D42801'})
                    }
                    else if(tim >= maxTimeValue - 21*diffIntervals)      {
                        attArrayCircHistogram[20].value = attArrayCircHistogram[20].value  + 1
                        layer.setStyle({color :'#D61801'})
                    }
                    else if(tim >= maxTimeValue - 22*diffIntervals)      {
                        attArrayCircHistogram[21].value = attArrayCircHistogram[21].value  + 1
                        layer.setStyle({color :'#D70801'})
                    }
                    else if(tim >= maxTimeValue - 23*diffIntervals)      {
                        attArrayCircHistogram[22].value = attArrayCircHistogram[22].value  + 1
                        layer.setStyle({color :'#D80109'})
                    }
                    else                    {
                        attArrayCircHistogram[23].value = attArrayCircHistogram[23].value  + 1
                        layer.setStyle({color :'#DA0019'})
                        }
                    break;
                case "brightness":
                    if(tim <= minTimeValue + diffIntervals)          {
                        attArrayCircHistogram[0].value = attArrayCircHistogram[0].value  + 1
                        let colr = ColorLuminance(layer.options.color,-0.92);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= minTimeValue + 2*diffIntervals)     {
                        attArrayCircHistogram[1].value = attArrayCircHistogram[1].value  + 1
                        let colr = ColorLuminance(layer.options.color,-0.84);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= minTimeValue + 3*diffIntervals)    {
                        attArrayCircHistogram[2].value = attArrayCircHistogram[2].value  + 1
                        let colr = ColorLuminance(layer.options.color,-0.76);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= minTimeValue + 4*diffIntervals)   {
                        attArrayCircHistogram[3].value = attArrayCircHistogram[3].value  + 1
                        let colr = ColorLuminance(layer.options.color,-0.68);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= minTimeValue + 5*diffIntervals)   {
                        attArrayCircHistogram[4].value = attArrayCircHistogram[4].value  + 1
                        let colr = ColorLuminance(layer.options.color,-0.60);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= minTimeValue + 6*diffIntervals)     {
                        attArrayCircHistogram[5].value = attArrayCircHistogram[5].value  + 1
                        let colr = ColorLuminance(layer.options.color,-0.52);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= minTimeValue + 7*diffIntervals)    {
                        attArrayCircHistogram[6].value = attArrayCircHistogram[6].value  + 1
                        let colr = ColorLuminance(layer.options.color,-0.44);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= minTimeValue + 8*diffIntervals)   {
                        attArrayCircHistogram[7].value = attArrayCircHistogram[7].value  + 1
                        let colr = ColorLuminance(layer.options.color,-0.36);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= minTimeValue + 9*diffIntervals)   {
                        attArrayCircHistogram[8].value = attArrayCircHistogram[8].value  + 1
                        let colr = ColorLuminance(layer.options.color,-0.28);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= minTimeValue + 10*diffIntervals)          {
                        attArrayCircHistogram[9].value = attArrayCircHistogram[9].value  + 1
                        let colr = ColorLuminance(layer.options.color,-0.20);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= minTimeValue + 11*diffIntervals)     {
                        attArrayCircHistogram[10].value = attArrayCircHistogram[10].value  + 1
                        let colr = ColorLuminance(layer.options.color,-0.12);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= minTimeValue + 12*diffIntervals)    {
                        attArrayCircHistogram[11].value = attArrayCircHistogram[11].value  + 1
                        let colr = ColorLuminance(layer.options.color,-0.6);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= minTimeValue + 13*diffIntervals)   {
                        attArrayCircHistogram[12].value = attArrayCircHistogram[12].value  + 1
                        let colr = ColorLuminance(layer.options.color,+0.02);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= minTimeValue + 14*diffIntervals)   {
                        attArrayCircHistogram[13].value = attArrayCircHistogram[13].value  + 1
                        let colr = ColorLuminance(layer.options.color,+0.1);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= minTimeValue + 15*diffIntervals)     {
                        attArrayCircHistogram[14].value = attArrayCircHistogram[14].value  + 1
                        let colr = ColorLuminance(layer.options.color,+0.18);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= minTimeValue + 16*diffIntervals)    {
                        attArrayCircHistogram[15].value = attArrayCircHistogram[15].value  + 1
                        let colr = ColorLuminance(layer.options.color,+0.26);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= minTimeValue + 17*diffIntervals)   {
                        attArrayCircHistogram[16].value = attArrayCircHistogram[16].value  + 1
                        let colr = ColorLuminance(layer.options.color,+0.34);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= minTimeValue + 18*diffIntervals)   {
                        attArrayCircHistogram[17].value = attArrayCircHistogram[17].value  + 1
                        let colr = ColorLuminance(layer.options.color,+0.42);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= minTimeValue + 19*diffIntervals)   {
                        attArrayCircHistogram[18].value = attArrayCircHistogram[18].value  + 1
                        let colr = ColorLuminance(layer.options.color,+0.5);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= minTimeValue + 20*diffIntervals)   {
                        attArrayCircHistogram[19].value = attArrayCircHistogram[19].value  + 1
                        let colr = ColorLuminance(layer.options.color,+0.58);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= minTimeValue + 21*diffIntervals)     {
                        attArrayCircHistogram[20].value = attArrayCircHistogram[20].value  + 1
                        let colr = ColorLuminance(layer.options.color,+0.66);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= minTimeValue + 22*diffIntervals)    {
                        attArrayCircHistogram[21].value = attArrayCircHistogram[21].value  + 1
                        let colr = ColorLuminance(layer.options.color,+0.74);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= minTimeValue + 23*diffIntervals)   {
                        attArrayCircHistogram[22].value = attArrayCircHistogram[22].value  + 1
                        let colr = ColorLuminance(layer.options.color,+0.82);
                        layer.setStyle({"color":colr});
                    }
                    else  {
                        attArrayCircHistogram[23].value = attArrayCircHistogram[23].value  + 1
                        let colr = ColorLuminance(layer.options.color,+0.9);
                        layer.setStyle({"color":colr});
                    }
                    break;
                case "opacity":
                    if(tim <= minTimeValue + diffIntervals)       {
                        attArrayCircHistogram[0].value = attArrayCircHistogram[0].value  + 1
                        layer.setStyle({opacity :0.04})
                    }
                    else if(tim <= minTimeValue + 2*diffIntervals)       {
                        attArrayCircHistogram[1].value = attArrayCircHistogram[1].value  + 1
                        layer.setStyle({opacity :0.08})
                    }
                    else if(tim <= minTimeValue + 3*diffIntervals)       {
                        attArrayCircHistogram[2].value = attArrayCircHistogram[2].value  + 1
                        layer.setStyle({opacity :0.12})
                    }
                    else if(tim <= minTimeValue + 4*diffIntervals)      {
                        attArrayCircHistogram[3].value = attArrayCircHistogram[3].value  + 1
                        layer.setStyle({opacity :0.16})
                    }
                    else if(tim <= minTimeValue + 5*diffIntervals)      {
                        attArrayCircHistogram[4].value = attArrayCircHistogram[4].value  + 1
                        layer.setStyle({opacity :0.20})
                    }
                    else if(tim <= minTimeValue + 6*diffIntervals)      {
                        attArrayCircHistogram[5].value = attArrayCircHistogram[5].value  + 1
                        layer.setStyle({opacity :0.24})
                    }
                    else if(tim <= minTimeValue + 7*diffIntervals)      {
                        attArrayCircHistogram[6].value = attArrayCircHistogram[6].value  + 1
                        layer.setStyle({opacity :0.28})
                    }
                    else if(tim <= minTimeValue + 8*diffIntervals)      {
                        attArrayCircHistogram[7].value = attArrayCircHistogram[7].value  + 1
                        layer.setStyle({opacity :0.32})
                    }
                    else if(tim <= minTimeValue + 9*diffIntervals)      {
                        attArrayCircHistogram[8].value = attArrayCircHistogram[8].value  + 1
                        layer.setStyle({opacity :0.36})
                    }
                    else if(tim <= minTimeValue + 10*diffIntervals)      {
                        attArrayCircHistogram[9].value = attArrayCircHistogram[9].value  + 1
                        layer.setStyle({opacity :0.40})
                    }
                    else if(tim <= minTimeValue + 11*diffIntervals)      {
                        attArrayCircHistogram[10].value = attArrayCircHistogram[10].value  + 1
                        layer.setStyle({opacity :0.44})
                    }
                    else if(tim <= minTimeValue + 12*diffIntervals)      {
                        attArrayCircHistogram[11].value = attArrayCircHistogram[11].value  + 1
                        layer.setStyle({opacity :0.48})
                    }
                    else if(tim <= minTimeValue + 13*diffIntervals)      {
                        attArrayCircHistogram[12].value = attArrayCircHistogram[12].value  + 1
                        layer.setStyle({opacity :0.52})
                    }
                    else if(tim <= minTimeValue + 14*diffIntervals)       {
                        attArrayCircHistogram[13].value = attArrayCircHistogram[13].value  + 1
                        layer.setStyle({opacity :0.56})
                    }
                    else if(tim <= minTimeValue + 15*diffIntervals)       {
                        attArrayCircHistogram[14].value = attArrayCircHistogram[14].value  + 1
                        layer.setStyle({opacity :0.6})
                    }
                    else if(tim <= minTimeValue + 16*diffIntervals)       {
                        attArrayCircHistogram[15].value = attArrayCircHistogram[15].value  + 1
                        layer.setStyle({opacity :0.64})
                    }
                    else if(tim <= minTimeValue + 17*diffIntervals)      {
                        attArrayCircHistogram[16].value = attArrayCircHistogram[16].value  + 1
                        layer.setStyle({opacity :0.68})
                    }
                    else if(tim <= minTimeValue + 18*diffIntervals)      {
                        attArrayCircHistogram[17].value = attArrayCircHistogram[17].value  + 1
                        layer.setStyle({opacity :0.72})
                    }
                    else if(tim <= minTimeValue + 19*diffIntervals)      {
                        attArrayCircHistogram[18].value = attArrayCircHistogram[18].value  + 1
                        layer.setStyle({opacity :0.76})
                    }
                    else if(tim <= minTimeValue + 20*diffIntervals)      {
                        attArrayCircHistogram[19].value = attArrayCircHistogram[19].value  + 1
                        layer.setStyle({opacity :0.8})
                    }
                    else if(tim <= minTimeValue + 21*diffIntervals)      {
                        attArrayCircHistogram[20].value = attArrayCircHistogram[20].value  + 1
                        layer.setStyle({opacity :0.84})
                    }
                    else if(tim <= minTimeValue + 22*diffIntervals)      {
                        attArrayCircHistogram[21].value = attArrayCircHistogram[21].value  + 1
                        layer.setStyle({opacity :0.88})
                    }
                    else if(tim <= minTimeValue + 23*diffIntervals)      {
                        attArrayCircHistogram[22].value = attArrayCircHistogram[22].value  + 1
                        layer.setStyle({opacity :0.92})
                    }
                    else                    {
                        attArrayCircHistogram[23].value = attArrayCircHistogram[23].value  + 1
                        layer.setStyle({opacity :0.96})
                        }
                    break;
                case "width":
                    if(tim <= minTimeValue + diffIntervals)       {
                        attArrayCircHistogram[0].value = attArrayCircHistogram[0].value  + 1
                        layer.setStyle({weight :1})
                    }
                    else if(tim <= minTimeValue + 2*diffIntervals)       {
                        attArrayCircHistogram[1].value = attArrayCircHistogram[1].value  + 1
                        layer.setStyle({weight :1.15})
                    }
                    else if(tim <= minTimeValue + 3*diffIntervals)       {
                        attArrayCircHistogram[2].value = attArrayCircHistogram[2].value  + 1
                        layer.setStyle({weight :1.3})
                    }
                    else if(tim <= minTimeValue + 4*diffIntervals)      {
                        attArrayCircHistogram[3].value = attArrayCircHistogram[3].value  + 1
                        layer.setStyle({weight :1.45})
                    }
                    else if(tim <= minTimeValue + 5*diffIntervals)      {
                        attArrayCircHistogram[4].value = attArrayCircHistogram[4].value  + 1
                        layer.setStyle({weight :1.6})
                    }
                    else if(tim <= minTimeValue + 6*diffIntervals)      {
                        attArrayCircHistogram[5].value = attArrayCircHistogram[5].value  + 1
                        layer.setStyle({weight :1.75})
                    }
                    else if(tim <= minTimeValue + 7*diffIntervals)      {
                        attArrayCircHistogram[6].value = attArrayCircHistogram[6].value  + 1
                        layer.setStyle({weight :1.9})
                    }
                    else if(tim <= minTimeValue + 8*diffIntervals)      {
                        attArrayCircHistogram[7].value = attArrayCircHistogram[7].value  + 1
                        layer.setStyle({weight :2.05})
                    }
                    else if(tim <= minTimeValue + 9*diffIntervals)      {
                        attArrayCircHistogram[8].value = attArrayCircHistogram[8].value  + 1
                        layer.setStyle({weight :2.2})
                    }
                    else if(tim <= minTimeValue + 10*diffIntervals)      {
                        attArrayCircHistogram[9].value = attArrayCircHistogram[9].value  + 1
                        layer.setStyle({weight :2.35})
                    }
                    else if(tim <= minTimeValue + 11*diffIntervals)      {
                        attArrayCircHistogram[10].value = attArrayCircHistogram[10].value  + 1
                        layer.setStyle({weight :2.5})
                    }
                    else if(tim <= minTimeValue + 12*diffIntervals)      {
                        attArrayCircHistogram[11].value = attArrayCircHistogram[11].value  + 1
                        layer.setStyle({weight :2.65})
                    }
                    else if(tim <= minTimeValue + 13*diffIntervals)      {
                        attArrayCircHistogram[12].value = attArrayCircHistogram[12].value  + 1
                        layer.setStyle({weight :2.8})
                    }
                    else if(tim <= minTimeValue + 14*diffIntervals)       {
                        attArrayCircHistogram[13].value = attArrayCircHistogram[13].value  + 1
                        layer.setStyle({weight :2.95})
                    }
                    else if(tim <= minTimeValue + 15*diffIntervals)       {
                        attArrayCircHistogram[14].value = attArrayCircHistogram[14].value  + 1
                        layer.setStyle({weight :3.1})
                    }
                    else if(tim <= minTimeValue + 16*diffIntervals)       {
                        attArrayCircHistogram[15].value = attArrayCircHistogram[15].value  + 1
                        layer.setStyle({weight :3.25})
                    }
                    else if(tim <= minTimeValue + 17*diffIntervals)      {
                        attArrayCircHistogram[16].value = attArrayCircHistogram[16].value  + 1
                        layer.setStyle({weight :3.4})
                    }
                    else if(tim <= minTimeValue + 18*diffIntervals)      {
                        attArrayCircHistogram[17].value = attArrayCircHistogram[17].value  + 1
                        layer.setStyle({weight :3.55})
                    }
                    else if(tim <= minTimeValue + 19*diffIntervals)      {
                        attArrayCircHistogram[18].value = attArrayCircHistogram[18].value  + 1
                        layer.setStyle({weight :3.70})
                    }
                    else if(tim <= minTimeValue + 20*diffIntervals)      {
                        attArrayCircHistogram[19].value = attArrayCircHistogram[19].value  + 1
                        layer.setStyle({weight :3.85})
                    }
                    else if(tim <= minTimeValue + 21*diffIntervals)      {
                        attArrayCircHistogram[20].value = attArrayCircHistogram[20].value  + 1
                        layer.setStyle({weight :4})
                    }
                    else if(tim <= minTimeValue + 22*diffIntervals)      {
                        attArrayCircHistogram[21].value = attArrayCircHistogram[21].value  + 1
                        layer.setStyle({weight :4.15})
                    }
                    else if(tim <= minTimeValue + 23*diffIntervals)      {
                        attArrayCircHistogram[22].value = attArrayCircHistogram[22].value  + 1
                        layer.setStyle({weight :4.3})
                    }
                    else                    {
                        attArrayCircHistogram[23].value = attArrayCircHistogram[23].value  + 1
                        layer.setStyle({weight :4.45})
                        }
                    break;
            }
        }

         function weekdayAtt(layer, properties, encoding, attArrayCircHistogram){
            // 2008-02-02 13:30:44
            // 2008-02-08 17:39:18
            // code block
            let d = new Date(properties.f3)/1000;
            let d1 = new Date(properties.f3);
            var weekday = new Array(7);
            weekday[0] =  "Sunday";
            weekday[1] = "Monday";
            weekday[2] = "Tuesday";
            weekday[3] = "Wednesday";
            weekday[4] = "Thursday";
            weekday[5] = "Friday";
            weekday[6] = "Saturday";

            
            var day = weekday[d1.getUTCDay()];
            //console.log(day1);

            var diffIntervals = (maxTimeValue - minTimeValue)/10
            switch(encoding){
                case "color":
                    if(day == "Monday")             {
                        attArrayCircHistogram[0].value = attArrayCircHistogram[0].value  + 1
                        layer.setStyle({color :'#49BC01'})
                        }
                    else if(day == "Tuesday")       {
                        attArrayCircHistogram[1].value = attArrayCircHistogram[1].value  + 1
                        layer.setStyle({color :'#82C101'})
                        }
                    else if(day == "Wednesday")     {
                        attArrayCircHistogram[2].value = attArrayCircHistogram[2].value  + 1
                        layer.setStyle({color :'#BEC601'})
                        }
                    else if(day == "Thursday")      {
                        attArrayCircHistogram[3].value = attArrayCircHistogram[3].value  + 1
                        layer.setStyle({color :'#CB9801'})
                        }
                    else if(day == "Friday")        {
                        attArrayCircHistogram[4].value = attArrayCircHistogram[4].value  + 1
                        layer.setStyle({color :'#D06001'})
                        }
                    else if(day == "Saturday")      {
                        attArrayCircHistogram[5].value = attArrayCircHistogram[5].value  + 1
                        layer.setStyle({color :'#D52501'})
                        }
                    else if(day == "Sunday")        {
                        attArrayCircHistogram[6].value = attArrayCircHistogram[6].value  + 1
                        layer.setStyle({color :'#DA0019'})
                        }
                    break;
                case "brightness":
                    if(day == "Monday") {
                        attArrayCircHistogram[0].value = attArrayCircHistogram[0].value  + 1
                        let colr = ColorLuminance(layer.options.color,-0.9);
                        layer.setStyle({"color":colr});
                    }
                    else if(day == "Tuesday") {
                        attArrayCircHistogram[1].value = attArrayCircHistogram[1].value  + 1
                        let colr = ColorLuminance(layer.options.color,-0.6);
                        layer.setStyle({"color":colr});
                    }
                    else if(day == "Wednesday") {
                        attArrayCircHistogram[2].value = attArrayCircHistogram[2].value  + 1
                        let colr = ColorLuminance(layer.options.color,-0.3);
                        layer.setStyle({"color":colr});
                    }
                    else if(day == "Thursday") {
                        attArrayCircHistogram[3].value = attArrayCircHistogram[3].value  + 1
                        let colr = ColorLuminance(layer.options.color,0.0);
                        layer.setStyle({"color":colr});
                    }
                    else if(day == "Friday") {
                        attArrayCircHistogram[4].value = attArrayCircHistogram[4].value  + 1
                        let colr = ColorLuminance(layer.options.color,+0.3);
                        layer.setStyle({"color":colr});
                    }
                    else if(day == "Saturday") {
                        attArrayCircHistogram[5].value = attArrayCircHistogram[5].value  + 1
                        let colr = ColorLuminance(layer.options.color,+0.6);
                        layer.setStyle({"color":colr});
                    }
                    else if(day == "Sunday") {
                        attArrayCircHistogram[6].value = attArrayCircHistogram[6].value  + 1
                        let colr = ColorLuminance(layer.options.color,+0.9);
                        layer.setStyle({"color":colr});
                    }
                    break;
                case "opacity":
                    if(day == "Monday")             {
                        attArrayCircHistogram[0].value = attArrayCircHistogram[0].value  + 1
                        layer.setStyle({opacity:0.90});
                        }
                    else if(day == "Tuesday")       {
                        attArrayCircHistogram[1].value = attArrayCircHistogram[1].value  + 1
                        layer.setStyle({opacity:0.77}); 
                        }
                    else if(day == "Wednesday")       {
                        attArrayCircHistogram[2].value = attArrayCircHistogram[2].value  + 1
                        layer.setStyle({opacity:0.64});
                        } 
                    else if(day == "Thursday")       {
                        attArrayCircHistogram[3].value = attArrayCircHistogram[3].value  + 1
                        layer.setStyle({opacity:0.51}); 
                        }
                    else if(day == "Friday")       {
                        attArrayCircHistogram[4].value = attArrayCircHistogram[4].value  + 1
                        layer.setStyle({opacity:0.38}); 
                        }
                    else if(day == "Saturday")      { 
                        attArrayCircHistogram[5].value = attArrayCircHistogram[5].value  + 1
                        layer.setStyle({opacity:0.25}); 
                        }
                    else if(day == "Sunday")       {
                        attArrayCircHistogram[6].value = attArrayCircHistogram[6].value  + 1
                        layer.setStyle({opacity:0.12}); 
                        }
                    break;
                case "width":
                    if(day == "Monday")             {
                        attArrayCircHistogram[0].value = attArrayCircHistogram[0].value  + 1
                        layer.setStyle({"weight":4});
                        }
                    else if(day == "Tuesday")       {
                        attArrayCircHistogram[1].value = attArrayCircHistogram[1].value  + 1
                        layer.setStyle({"weight":3.5});
                        }
                    else if(day == "Wednesday")     {
                        attArrayCircHistogram[2].value = attArrayCircHistogram[2].value  + 1
                        layer.setStyle({"weight":3});
                        }
                    else if(day == "Thursday")      {
                        attArrayCircHistogram[3].value = attArrayCircHistogram[3].value  + 1
                        layer.setStyle({"weight":2.5});
                        }
                    else if(day == "Friday")        {
                        attArrayCircHistogram[4].value = attArrayCircHistogram[4].value  + 1
                        layer.setStyle({"weight":2});
                        }
                    else if(day == "Saturday")      {
                        attArrayCircHistogram[5].value = attArrayCircHistogram[5].value  + 1
                        layer.setStyle({"weight":1.5});
                        }
                    else if(day == "Sunday")        {
                        attArrayCircHistogram[6].value = attArrayCircHistogram[6].value  + 1
                        layer.setStyle({"weight":1});
                        }
                    break;
            }
        }

        function hourdayAtt(layer, properties, encoding, attArrayCircHistogram){
            // 2008-02-02 13:30:44
            // 2008-02-08 17:39:18
            // code block
            let time = new Date(properties.f3);
            var tim = time.getHours();
            var diffIntervals = (maxTimeValue - minTimeValue)/10
            switch(encoding){
                case "color":
                    if(tim <= 1)      {
                        attArrayCircHistogram[0].value = attArrayCircHistogram[0].value  + 1
                        layer.setStyle({color :'#49BC01'})
                        }
                    else if(tim <= 2)       {
                        attArrayCircHistogram[1].value = attArrayCircHistogram[1].value  + 1
                        layer.setStyle({color :'#57BD01'})}
                    else if(tim <= 3)       {
                        attArrayCircHistogram[2].value = attArrayCircHistogram[2].value  + 1
                        layer.setStyle({color :'#66BE01'})}
                    else if(tim <= 4)       {
                        attArrayCircHistogram[3].value = attArrayCircHistogram[3].value  + 1
                        layer.setStyle({color :'#75BF01'})}
                    else if(tim <= 5)       {
                        attArrayCircHistogram[4].value = attArrayCircHistogram[4].value  + 1
                        layer.setStyle({color :'#84C101'})}
                    else if(tim <= 6)       {
                        attArrayCircHistogram[5].value = attArrayCircHistogram[5].value  + 1
                        layer.setStyle({color :'#94C201'})}
                    else if(tim <= 7)       {
                        attArrayCircHistogram[6].value = attArrayCircHistogram[6].value  + 1
                        layer.setStyle({color :'#A3C301'})}
                    else if(tim <= 8)       {
                        attArrayCircHistogram[7].value = attArrayCircHistogram[7].value  + 1
                        layer.setStyle({color :'#B3C501'})}
                    else if(tim <= 9)       {
                        attArrayCircHistogram[8].value = attArrayCircHistogram[8].value  + 1
                        layer.setStyle({color :'#C3C601'})}
                    else if(tim <= 10)       {
                        attArrayCircHistogram[9].value = attArrayCircHistogram[9].value  + 1
                        layer.setStyle({color :'#C7BB01'})}
                    else if(tim <= 11)       {
                        attArrayCircHistogram[10].value = attArrayCircHistogram[10].value  + 1
                        layer.setStyle({color :'#C9AD01'})}
                    else if(tim <= 12)       {
                        attArrayCircHistogram[11].value = attArrayCircHistogram[11].value  + 1
                        layer.setStyle({color :'#CA9F01'})}
                    else if(tim <= 13)       {
                        attArrayCircHistogram[12].value = attArrayCircHistogram[12].value  + 1
                        layer.setStyle({color :'#CB9101'})}
                    else if(tim <= 14)       {
                        attArrayCircHistogram[13].value = attArrayCircHistogram[13].value  + 1
                        layer.setStyle({color :'#CC8201'})}
                    else if(tim <= 15)       {
                        attArrayCircHistogram[14].value = attArrayCircHistogram[14].value  + 1
                        layer.setStyle({color :'#CE7401'})}
                    else if(tim <= 16)       {
                        attArrayCircHistogram[15].value = attArrayCircHistogram[15].value  + 1
                        layer.setStyle({color :'#CF6501'})}
                    else if(tim <= 17)       {
                        attArrayCircHistogram[16].value = attArrayCircHistogram[16].value  + 1
                        layer.setStyle({color :'#D05601'})}
                    else if(tim <= 18)       {
                        attArrayCircHistogram[17].value = attArrayCircHistogram[17].value  + 1
                        layer.setStyle({color :'#D24701'})}
                    else if(tim <= 19)       {
                        attArrayCircHistogram[18].value = attArrayCircHistogram[18].value  + 1
                        layer.setStyle({color :'#D33701'})}
                    else if(tim <= 20)       {
                        attArrayCircHistogram[19].value = attArrayCircHistogram[19].value  + 1
                        layer.setStyle({color :'#D42801'})}
                    else if(tim <= 21)       {
                        attArrayCircHistogram[20].value = attArrayCircHistogram[20].value  + 1
                        layer.setStyle({color :'#D61801'})}
                    else if(tim <= 22)       {
                        attArrayCircHistogram[21].value = attArrayCircHistogram[21].value  + 1
                        layer.setStyle({color :'#D70801'})}
                    else if(tim <= 23)       {
                        attArrayCircHistogram[22].value = attArrayCircHistogram[22].value  + 1
                        layer.setStyle({color :'#D80109'})}
                    else                    {
                        attArrayCircHistogram[23].value = attArrayCircHistogram[23].value  + 1
                        layer.setStyle({color :'#DA0019'})
                        }
                    break;
                case "brightness":
                    if(tim <= 1)          {
                        attArrayCircHistogram[0].value = attArrayCircHistogram[0].value  + 1
                        let colr = ColorLuminance(layer.options.color,-0.92);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= 2)     {
                        attArrayCircHistogram[1].value = attArrayCircHistogram[1].value  + 1
                        let colr = ColorLuminance(layer.options.color,-0.84);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= 3)    {
                        attArrayCircHistogram[2].value = attArrayCircHistogram[2].value  + 1
                        let colr = ColorLuminance(layer.options.color,-0.76);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= 4)   {
                        attArrayCircHistogram[3].value = attArrayCircHistogram[3].value  + 1
                        let colr = ColorLuminance(layer.options.color,-0.68);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= 5)   {
                        attArrayCircHistogram[4].value = attArrayCircHistogram[4].value  + 1
                        let colr = ColorLuminance(layer.options.color,-0.60);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= 6)     {
                        attArrayCircHistogram[5].value = attArrayCircHistogram[5].value  + 1
                        let colr = ColorLuminance(layer.options.color,-0.52);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= 7)    {
                        attArrayCircHistogram[6].value = attArrayCircHistogram[6].value  + 1
                        let colr = ColorLuminance(layer.options.color,-0.44);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= 8)   {
                        attArrayCircHistogram[7].value = attArrayCircHistogram[7].value  + 1
                        let colr = ColorLuminance(layer.options.color,-0.36);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= 9)   {
                        attArrayCircHistogram[8].value = attArrayCircHistogram[8].value  + 1
                        let colr = ColorLuminance(layer.options.color,-0.28);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= 10)   {
                        attArrayCircHistogram[9].value = attArrayCircHistogram[9].value  + 1
                        let colr = ColorLuminance(layer.options.color,-0.20);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= 11)   {
                        attArrayCircHistogram[10].value = attArrayCircHistogram[10].value  + 1
                        let colr = ColorLuminance(layer.options.color,-0.12);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= 12)   {
                        attArrayCircHistogram[11].value = attArrayCircHistogram[11].value  + 1
                        let colr = ColorLuminance(layer.options.color,-0.04);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= 13)   {
                        attArrayCircHistogram[12].value = attArrayCircHistogram[12].value  + 1
                        let colr = ColorLuminance(layer.options.color,+0.04);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= 14)   {
                        attArrayCircHistogram[13].value = attArrayCircHistogram[13].value  + 1
                        let colr = ColorLuminance(layer.options.color,+0.12);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= 15)   {
                        attArrayCircHistogram[14].value = attArrayCircHistogram[14].value  + 1
                        let colr = ColorLuminance(layer.options.color,+0.2);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= 16)     {
                        attArrayCircHistogram[15].value = attArrayCircHistogram[15].value  + 1
                        let colr = ColorLuminance(layer.options.color,+0.28);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= 17)    {
                        attArrayCircHistogram[16].value = attArrayCircHistogram[16].value  + 1
                        let colr = ColorLuminance(layer.options.color,+0.36);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= 18)   {
                        attArrayCircHistogram[17].value = attArrayCircHistogram[17].value  + 1
                        let colr = ColorLuminance(layer.options.color,+0.44);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= 19)   {
                        attArrayCircHistogram[18].value = attArrayCircHistogram[18].value  + 1
                        let colr = ColorLuminance(layer.options.color,+0.52);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= 20)   {
                        attArrayCircHistogram[19].value = attArrayCircHistogram[19].value  + 1
                        let colr = ColorLuminance(layer.options.color,+0.6);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= 21)   {
                        attArrayCircHistogram[20].value = attArrayCircHistogram[20].value  + 1
                        let colr = ColorLuminance(layer.options.color,+0.68);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= 22)   {
                        attArrayCircHistogram[21].value = attArrayCircHistogram[21].value  + 1
                        let colr = ColorLuminance(layer.options.color,+0.76);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= 23)   {
                        attArrayCircHistogram[22].value = attArrayCircHistogram[22].value  + 1
                        let colr = ColorLuminance(layer.options.color,+0.84);
                        layer.setStyle({"color":colr});
                    }
                    else  {
                        attArrayCircHistogram[23].value = attArrayCircHistogram[23].value  + 1
                        let colr = ColorLuminance(layer.options.color,+0.92);
                        layer.setStyle({"color":colr});
                    }
                    break;
                case "opacity":
                    if(tim <= 1)       {
                        attArrayCircHistogram[0].value = attArrayCircHistogram[0].value  + 1
                        layer.setStyle({opacity :0.04})}
                    else if(tim <= 2)       {
                        attArrayCircHistogram[1].value = attArrayCircHistogram[1].value  + 1
                        layer.setStyle({opacity :0.08})}
                    else if(tim <= 3)       {
                        attArrayCircHistogram[2].value = attArrayCircHistogram[2].value  + 1
                        layer.setStyle({opacity :0.12})}
                    else if(tim <= 4)       {
                        attArrayCircHistogram[3].value = attArrayCircHistogram[3].value  + 1
                        layer.setStyle({opacity :0.16})}
                    else if(tim <= 5)       {
                        attArrayCircHistogram[4].value = attArrayCircHistogram[4].value  + 1
                        layer.setStyle({opacity :0.20})}
                    else if(tim <= 6)       {
                        attArrayCircHistogram[5].value = attArrayCircHistogram[5].value  + 1
                        layer.setStyle({opacity :0.24})}
                    else if(tim <= 7)       {
                        attArrayCircHistogram[6].value = attArrayCircHistogram[6].value  + 1
                        layer.setStyle({opacity :0.28})}
                    else if(tim <= 8)       {
                        attArrayCircHistogram[7].value = attArrayCircHistogram[7].value  + 1
                        layer.setStyle({opacity :0.32})}
                    else if(tim <= 9)       {
                        attArrayCircHistogram[8].value = attArrayCircHistogram[8].value  + 1
                        layer.setStyle({opacity :0.36})}
                    else if(tim <= 10)       {
                        attArrayCircHistogram[9].value = attArrayCircHistogram[9].value  + 1
                        layer.setStyle({opacity :0.40})}
                    else if(tim <= 11)       {
                        attArrayCircHistogram[10].value = attArrayCircHistogram[10].value  + 1
                        layer.setStyle({opacity :0.44})}
                    else if(tim <= 12)       {
                        attArrayCircHistogram[11].value = attArrayCircHistogram[11].value  + 1
                        layer.setStyle({opacity :0.48})}
                    else if(tim <= 13)       {
                        attArrayCircHistogram[12].value = attArrayCircHistogram[12].value  + 1
                        layer.setStyle({opacity :0.52})}
                    else if(tim <= 14)       {
                        attArrayCircHistogram[13].value = attArrayCircHistogram[13].value  + 1
                        layer.setStyle({opacity :0.56})}
                    else if(tim <= 15)       {
                        attArrayCircHistogram[14].value = attArrayCircHistogram[14].value  + 1
                        layer.setStyle({opacity :0.6})}
                    else if(tim <= 16)       {
                        attArrayCircHistogram[15].value = attArrayCircHistogram[15].value  + 1
                        layer.setStyle({opacity :0.64})}
                    else if(tim <= 17)       {
                        attArrayCircHistogram[16].value = attArrayCircHistogram[16].value  + 1
                        layer.setStyle({opacity :0.68})}
                    else if(tim <= 18)       {
                        attArrayCircHistogram[17].value = attArrayCircHistogram[17].value  + 1
                        layer.setStyle({opacity :0.72})}
                    else if(tim <= 19)       {
                        attArrayCircHistogram[18].value = attArrayCircHistogram[18].value  + 1
                        layer.setStyle({opacity :0.76})}
                    else if(tim <= 20)       {
                        attArrayCircHistogram[19].value = attArrayCircHistogram[19].value  + 1
                        layer.setStyle({opacity :0.8})}
                    else if(tim <= 21)       {
                        attArrayCircHistogram[20].value = attArrayCircHistogram[20].value  + 1
                        layer.setStyle({opacity :0.84})}
                    else if(tim <= 22)       {
                        attArrayCircHistogram[21].value = attArrayCircHistogram[21].value  + 1
                        layer.setStyle({opacity :0.88})}
                    else if(tim <= 23)       {
                        attArrayCircHistogram[22].value = attArrayCircHistogram[22].value  + 1
                        layer.setStyle({opacity :0.92})}
                    else                    {
                        attArrayCircHistogram[23].value = attArrayCircHistogram[23].value  + 1
                        layer.setStyle({opacity :0.96})
                        }
                    break;
                case "width":
                    if(tim <= 1)       {
                        attArrayCircHistogram[0].value = attArrayCircHistogram[0].value  + 1
                        layer.setStyle({weight :1})}
                    else if(tim <= 2)       {
                        attArrayCircHistogram[1].value = attArrayCircHistogram[1].value  + 1
                        layer.setStyle({weight :1.15})}
                    else if(tim <= 3)       {
                        attArrayCircHistogram[2].value = attArrayCircHistogram[2].value  + 1
                        layer.setStyle({weight :1.3})}
                    else if(tim <= 4)       {
                        attArrayCircHistogram[3].value = attArrayCircHistogram[3].value  + 1
                        layer.setStyle({weight :1.45})}
                    else if(tim <= 5)       {
                        attArrayCircHistogram[4].value = attArrayCircHistogram[4].value  + 1
                        layer.setStyle({weight :1.6})}
                    else if(tim <= 6)       {
                        attArrayCircHistogram[5].value = attArrayCircHistogram[5].value  + 1
                        layer.setStyle({weight :1.75})}
                    else if(tim <= 7)       {
                        attArrayCircHistogram[6].value = attArrayCircHistogram[6].value  + 1
                        layer.setStyle({weight :1.9})}
                    else if(tim <= 8)       {
                        attArrayCircHistogram[7].value = attArrayCircHistogram[7].value  + 1
                        layer.setStyle({weight :2.05})}
                    else if(tim <= 9)       {
                        attArrayCircHistogram[8].value = attArrayCircHistogram[8].value  + 1
                        layer.setStyle({weight :2.2})}
                    else if(tim <= 10)       {
                        attArrayCircHistogram[9].value = attArrayCircHistogram[9].value  + 1
                        layer.setStyle({weight :2.35})}
                    else if(tim <= 11)       {
                        attArrayCircHistogram[10].value = attArrayCircHistogram[10].value  + 1
                        layer.setStyle({weight :2.5})}
                    else if(tim <= 12)       {
                        attArrayCircHistogram[11].value = attArrayCircHistogram[11].value  + 1
                        layer.setStyle({weight :2.65})}
                    else if(tim <= 13)       {
                        attArrayCircHistogram[12].value = attArrayCircHistogram[12].value  + 1
                        layer.setStyle({weight :2.8})}
                    else if(tim <= 14)       {
                        attArrayCircHistogram[13].value = attArrayCircHistogram[13].value  + 1
                        layer.setStyle({weight :2.95})}
                    else if(tim <= 15)       {
                        attArrayCircHistogram[14].value = attArrayCircHistogram[14].value  + 1
                        layer.setStyle({weight :3.1})}
                    else if(tim <= 16)       {
                        attArrayCircHistogram[15].value = attArrayCircHistogram[15].value  + 1
                        layer.setStyle({weight :3.25})}
                    else if(tim <= 17)       {
                        attArrayCircHistogram[16].value = attArrayCircHistogram[16].value  + 1
                        layer.setStyle({weight :3.4})}
                    else if(tim <= 18)       {
                        attArrayCircHistogram[17].value = attArrayCircHistogram[17].value  + 1
                        layer.setStyle({weight :3.55})}
                    else if(tim <= 19)       {
                        attArrayCircHistogram[18].value = attArrayCircHistogram[18].value  + 1
                        layer.setStyle({weight :3.70})}
                    else if(tim <= 20)       {
                        attArrayCircHistogram[19].value = attArrayCircHistogram[19].value  + 1
                        layer.setStyle({weight :3.85})}
                    else if(tim <= 21)       {
                        attArrayCircHistogram[20].value = attArrayCircHistogram[20].value  + 1
                        layer.setStyle({weight :4})}
                    else if(tim <= 22)       {
                        attArrayCircHistogram[21].value = attArrayCircHistogram[21].value  + 1
                        layer.setStyle({weight :4.15})}
                    else if(tim <= 23)       {
                        attArrayCircHistogram[22].value = attArrayCircHistogram[22].value  + 1
                        layer.setStyle({weight :4.3})}
                    else                    {
                        attArrayCircHistogram[23].value = attArrayCircHistogram[23].value  + 1
                        layer.setStyle({weight :4.45})}
                    break;
            }
        }

        
        /////
        ///// Area calculation
        /////

        function recursiveArea(thisVar, indexI, j){ 
            console.log([indexI, j]);
            console.log("Look alive");
            if(indexI >= 0){

                console.log("Before intersection and difference");
                //let optionsTruncate = {coordinates: 2};
                let urlIntersectDifference = "interdif/"  + JSON.stringify(thisVar.areas[0].area) + "/" +  JSON.stringify(thisVar.intersections[indexI].areas[j].area);
                console.log(thisVar.areas[0].area);
                //let thisVar = this;
                //let thisAreasZero = this.areas[0];
                //let oneOfAreasFromIntersection = this.intersections[indexI].areas[j];
                let interDifPromise = intersectionServer(urlIntersectDifference);
                interDifPromise.then(function(responseInter) {
                    console.log("After intersection and difference");
                    //let urlDifference = "difference/"  + JSON.stringify(thisVar.areas[0].area) + "/" +  JSON.stringify(thisVar.intersections[indexI].areas[j].area);
                    
                    if(responseInter[0] != null){
                        
                        //let differencePromise =  differenceServer(urlDifference);
                        //differencePromise.then(function(responseDiff) {
                        //let difference = turf.difference(turf.truncate(this.areas[0].area, optionsTruncate),turf.truncate(this.intersections[i].areas[j].area, optionsTruncate));
                        console.log("Intersection not null");
                        //let difference1 = turf.cleanCoords(difference)
                        //let intersection1 = turf.cleanCoords(intersection)
                        //console.log(thisAreasZero);
                        //console.log(responseDiff);
                        //thisAreasZero.setArea(responseDiff);
                        thisVar.areas[0].setArea(responseInter[1]);

                        let lensArrOfArea = thisVar.intersections[indexI].areas[j].getLensArray();
                        let newArea = creaAttAreas(responseInter[0]);
                        for(k = 0; k < lensArrOfArea.length;k++){
                            newArea.addLens(lensArrOfArea[k]);
                        }
                        newArea.addLens(thisVar);
                        thisVar.addArea(newArea);
                        /*let color2;
                        let r = Math.min(Math.max(Math.floor(Math.random() * 255), 55), 200);
                        let g = Math.min(Math.max(Math.floor(Math.random() * 255), 75), 255);
                        let b = Math.min(Math.max(Math.floor(Math.random() * 255), 100), 225);
                        
                        color2= "rgb("+r+" ,"+g+","+ b+")"; 
                        let randomColor = Math.floor(Math.random()*16777215).toString(16);
                        let cona = L.geoJson(responseInter[0], {
                            color: '#ff3636',
                            fillColor: color2,
                            fillOpacity:1
                        });
                        cona.addTo(areasLayer);*/
                        //})
                        
                        j++;
                        if(j==thisVar.intersections[indexI].areas.length){
                            return recursiveArea(thisVar,indexI - 1, 0);
                        }
                        else{
                            return recursiveArea(thisVar,indexI, j);
                        }
                    }
                    else{
                        console.log(responseInter);
                        console.log("There was no intersection");
                        
                        j++;
                        if(j==thisVar.intersections[indexI].areas.length){
                            return recursiveArea(thisVar,indexI - 1, 0);
                        }
                        else{
                            return recursiveArea(thisVar,indexI, j);
                        }
                    }
                }).catch(function(jqXHR) {
                    if (jqXHR instanceof ReferenceError) {
                        console.log('wow!');
                    }
                });
            } 
            else{
                return thisVar.createLayers();
            }     
        }
                

        /////
        /////
        /////

        /////
        ///// support
        /////
        
        function Unix_timestamp(t){
            let dt = new Date(t);
            let stringDate = dt.toUTCString();
            /*let year = dt.getFullYear();
            let month = dt.getMonth();
            let day = dt.getDay();
            let hour = dt.getHours();
            let minute = dt.getMinutes();
            let seconds = dt.getSeconds();*/

            return stringDate;
        }
        function getUnixTime(t){
            let dt = new Date(t);
            let stringDate = dt.getTime();
            /*let year = dt.getFullYear();
            let month = dt.getMonth();
            let day = dt.getDay();
            let hour = dt.getHours();
            let minute = dt.getMinutes();
            let seconds = dt.getSeconds();*/

            return stringDate;
        }

        function isEqual(a, b) { 
            // if length is not equal 
            if(a.length!=b.length) 
                return false; 
            else{ 
            // comapring each element of array 
                for(let i=0;i<a.length;i++){
                    if(a[i]!=b[i]) return false; 
                } 
                return true; 
            } 
        } 

        function ColorLuminance(hex, lum) {

            // validate hex string
            hex = String(hex).replace(/[^0-9a-f]/gi, '');
            if (hex.length < 6) {
                hex = hex[0]+hex[0]+hex[1]+hex[1]+hex[2]+hex[2];
            }
            lum = lum || 0;

            // convert to decimal and change luminosity
            let rgb = "#", c, i;
            for (i = 0; i < 3; i++) {
                c = parseInt(hex.substr(i*2,2), 16);
                c = Math.round(Math.min(Math.max(0, c + (c * lum)), 255)).toString(16);
                rgb += ("00"+c).substr(c.length);
            }

            return rgb;
        }

        function intersectionServer(urlIntersect){
            return new Promise((resolve, reject) => {
                $.ajax({
                    url: urlIntersect,
                    type: 'GET',
                    dataType:'json',
                    success: function(data){
                        resolve(data)
                    },
                    error: function(jqXHR, textStatus, errorThrown) {
                        alert('An error occurred... Look at the console (F12 or Ctrl+Shift+I, Console tab) for more information!');

                        $('#result').html('<p>status code: '+jqXHR.status+'</p><p>errorThrown: ' + errorThrown + '</p><p>jqXHR.responseText:</p><div>'+jqXHR.responseText + '</div>');
                        console.log('jqXHR:');
                        console.log(jqXHR);
                        console.log('textStatus:');
                        console.log(textStatus);
                        console.log('errorThrown:');
                        console.log(errorThrown);
                    }
                }) 
            });
        }

        function differenceServer(urlDifference){
            return new Promise((resolve, reject) => {
                $.ajax({
                    url: urlDifference,
                    type: 'GET',
                    dataType:'json',
                    success: function(data){
                        resolve(data)
                    },
                    error: function (req, status, err) {
                        reject(err);
                    } 
                }) 
            });
        }

        function capitalizeFirstLetter(string) {
            return string.charAt(0).toUpperCase() + string.slice(1);
        }

        function attLensArrayToServer(){
            console.log("Im in arraytoserver");
            console.log("Here is opc Array")
            console.log(attOPACITYLensesArray);
            let areasArray = [];
            attOPACITYLensesArray.forEach(function(lensInOpacArray){
                areasArray.push(lensInOpacArray.overallArea.geometry);
            })
            console.log("Here come the areasd in the array to pass to server")
            console.log(areasArray)
            if(defaultLayerFlag){
                if (defaultLayer != null) {
                    defaultLayerFlag = false;
                    map.removeLayer(defaultLayer);
                }
            }

            if(lastMarkerGroupID !=null){
                markerGroup.removeLayer(lastMarkerGroupID);
                lastMarkerGroupID = null;
            }
            if(lastMarkerGroupID1 !=null){
                markerGroup1.removeLayer(lastMarkerGroupID1);
                lastMarkerGroupID1 = null;
            }
            if(lastMarkerGroupID2 !=null){
                markerGroup2.removeLayer(lastMarkerGroupID2);
                lastMarkerGroupID2 = null;
            }
            if(lastMarkerGroupID3 !=null){
                markerGroup3.removeLayer(lastMarkerGroupID3);
                lastMarkerGroupID3 = null;
            }
            let object = $.ajax({
                type: 'POST',
                url: '/updateBaseLayer/trajectory_lines3',
                contentType: 'application/json',
                data: JSON.stringify({areasArray}),
                success: function(){
                    console.log("fcking work ffs");
                }
            })
            $.when(object).done(function() {
                if(object.responseJSON.features != null){
                    let tracksToDraw = L.geoJson(object.responseJSON,firstStyle);
                    tracksToDraw.addTo(markerGroup);
                    lastMarkerGroupID = tracksToDraw._leaflet_id;
                }
                lensesLayer.bringToFront();
            }); 
            let object1 = $.ajax({
                type: 'POST',
                url: '/updateBaseLayer/trajectory_lines2',
                contentType: 'application/json',
                data: JSON.stringify({areasArray}),
                success: function(){
                    console.log("fcking work ffs");
                }
            })
            $.when(object1).done(function() {
                if(object1.responseJSON.features != null){
                    let tracksToDraw = L.geoJson(object1.responseJSON,firstStyle);
                    tracksToDraw.addTo(markerGroup1);
                    lastMarkerGroupID1 = tracksToDraw._leaflet_id;
                }
                lensesLayer.bringToFront();
            }); 
            let object2 = $.ajax({
                type: 'POST',
                url: '/updateBaseLayer/trajectory_lines1',
                contentType: 'application/json',
                data: JSON.stringify({areasArray}),
                success: function(){
                    console.log("fcking work ffs");
                }
            })
            $.when(object2).done(function() {
                if(object2.responseJSON.features != null){
                    let tracksToDraw = L.geoJson(object2.responseJSON,firstStyle);
                    tracksToDraw.addTo(markerGroup2);
                    lastMarkerGroupID2 = tracksToDraw._leaflet_id;
                }
                lensesLayer.bringToFront();
            }); 
            let object3 = $.ajax({
                type: 'POST',
                url: '/updateBaseLayer/trajectory_lines',
                contentType: 'application/json',
                data: JSON.stringify({areasArray}),
                success: function(){
                    console.log("fcking work ffs");
                }
            })
            $.when(object3).done(function() {
                if(object3.responseJSON.features != null){
                    let tracksToDraw = L.geoJson(object3.responseJSON3,firstStyle);
                    tracksToDraw.addTo(markerGroup3);
                    lastMarkerGroupID3 = tracksToDraw._leaflet_id;
                }
                lensesLayer.bringToFront();
            }); 

           
        }

        $('#myform').submit(function() {
            $(this).ajaxSubmit({

                error: function(xhr) {
            
                },

                success: function(response) {
                    console.log(response);

                }

            });
            return false;
        });

        function getMinTimeVal() {
            let urlStringmin = "/minTimeVarValue";


            let newData = $.ajax({
                url: urlStringmin,
                type: 'GET',
                success: console.log("Minimum data value fetched"),
                error: function (xhr) {
                    alert(xhr.statusText)
                }

            })
            $.when(newData).done(function () {
                minTimeValue = new Date(newData.responseText)/1000
                console.log("Here is min")
                console.log(minTimeValue)
            });
        }

        function getMaxTimeVal() {
            let urlStringmax = "/maxTimeVarValue";


            let newData = $.ajax({
                url: urlStringmax,
                type: 'GET',
                success: console.log("Maximum data value fetched"),
                error: function (xhr) {
                    alert(xhr.statusText)
                }

            })
            $.when(newData).done(function () {
                
                maxTimeValue = new Date(newData.responseText)/1000
                console.log("Here is max")
                console.log(maxTimeValue)
            });
        }

        $('.filterLensBut').click(function (e) {
            clicked=false;
            changeRadius = false;
            lensCanMove = false;
            mapPressForCreation = false;
            outterLensesLayer.clearLayers();
            console.log(createQueryLensesFlag);
            createQueryLensesFlag = !createQueryLensesFlag;
            if(createQueryLensesFlag)
                document.getElementsByClassName("not-tabFilter")[0].style.backgroundColor ="#0074d9"
            else
                document.getElementsByClassName("not-tabFilter")[0].style.backgroundColor ="#14599100"
            createAttributeLensesFlag = false;
            tabZoom = false;
            zoomControlVar.remove()
            document.getElementsByClassName("not-tabAttr")[0].style.backgroundColor ="#14599100"
            
        });
        $('.attributeLensBut').click(function (e) {
            clicked=false;
            changeRadius = false;
            lensCanMove = false;
            mapPressForCreation = false;
            console.log(createAttributeLensesFlag);
            createQueryLensesFlag = false;
            tabZoom = false;
            outterLensesLayer.clearLayers();
            zoomControlVar.remove()
            document.getElementsByClassName("not-tabFilter")[0].style.backgroundColor ="#14599100"
            createAttributeLensesFlag = !createAttributeLensesFlag;
            if(createAttributeLensesFlag)
                document.getElementsByClassName("not-tabAttr")[0].style.backgroundColor ="#0074d9"
            else
                document.getElementsByClassName("not-tabAttr")[0].style.backgroundColor ="#14599100"
        });
        let tabZoom = false;
        $('.zoomBut').click(function (e) {
            tabZoom = !tabZoom;
            map.zoomControl.getContainer().style.visible = false;
            if(tabZoom){
                
                zoomControlVar.addTo(map)
                document.getElementsByClassName("not-tabZoom")[0].style.backgroundColor ="#0074d9"}
            else{
                
                zoomControlVar.remove()
                document.getElementsByClassName("not-tabZoom")[0].style.backgroundColor ="#14599100"}
            createQueryLensesFlag = false;
            createAttributeLensesFlag = false;
            document.getElementsByClassName("not-tabFilter")[0].style.backgroundColor ="#14599100"
            document.getElementsByClassName("not-tabAttr")[0].style.backgroundColor ="#14599100"
            
        });
        var elementIsClicked = false; // declare the variable that tracks the state
        function clickHandler(){ // declare a function that updates the state
            elementIsClicked = !elementIsClicked;
            //if (document.getElementById(elementID).innerHTML )
            /*clearBox("my_dataviz")
            clearBox("my_datavizLENGTH")
            clearBox("my_datavizDURATION")
            clearBox("my_datavizTIME")
            if(elementIsClicked){
                createVelocityHistogram();
                createLengthHistogram();
                createDurationHistogram();
               createTimeHistogram();
            }*/

        }

        var element = document.getElementById('statisticsBut'); // grab a reference to your element
        element.addEventListener('click', clickHandler);

        //////////////////////////////////////////        

        $(document).ready(function(){
        $('form input').change(function () {
            $('form p').text(this.files.length + " file(s) selected");
        });
        });

        //////////////////////////////////////////

        $('.firstMap').click(function (e) {
            changeRadius = false;  
            outterLensesLayer.clearLayers();
            moved = false;
            lensCanMove = false;
            clicked = false;
            if(activeLENSNEWMENU != null){
                activeLENSNEWMENU.areaQuery.setStyle({fillOpacity:0})
                outterLensesCircularHistoLayer.clearLayers()
                
            }
            map.removeLayer(activeMap);
            blackNoLabel.addTo(map);
            activeMap = blackNoLabel;
            colorToUseWithMap = "#FFF"
        }); 
        $('.secMap').click(function (e) {
            changeRadius = false;  
            outterLensesLayer.clearLayers();
            moved = false;
            lensCanMove = false;
            clicked = false;
            if(activeLENSNEWMENU != null){
                activeLENSNEWMENU.areaQuery.setStyle({fillOpacity:0})
                outterLensesCircularHistoLayer.clearLayers()
                
            }
            map.removeLayer(activeMap);
            CartoDB_DarkMatter.addTo(map);
            activeMap = CartoDB_DarkMatter;
            colorToUseWithMap = "#FFF"
        }); 
        $('.trdMap').click(function (e) {
            changeRadius = false;  
            outterLensesLayer.clearLayers();
            moved = false;
            lensCanMove = false;
            clicked = false;
            if(activeLENSNEWMENU != null){
                activeLENSNEWMENU.areaQuery.setStyle({fillOpacity:0})
                outterLensesCircularHistoLayer.clearLayers()
                
            }
            map.removeLayer(activeMap);
            Hydda_Full.addTo(map);
            activeMap = Hydda_Full;
            colorToUseWithMap = "#000"
        }); 
        $('.fourMap').click(function (e) {
            changeRadius = false;  
            outterLensesLayer.clearLayers();
            moved = false;
            lensCanMove = false;
            clicked = false;
            if(activeLENSNEWMENU != null){
                activeLENSNEWMENU.areaQuery.setStyle({fillOpacity:0})
                outterLensesCircularHistoLayer.clearLayers()
                
            }
            map.removeLayer(activeMap);
            CartoDB_Voyager.addTo(map);
            activeMap = CartoDB_Voyager;
            colorToUseWithMap = "#000"
        }); 
        $('.fiveMap').click(function (e) {
            changeRadius = false;  
            outterLensesLayer.clearLayers();
            moved = false;
            lensCanMove = false;
            clicked = false;
            if(activeLENSNEWMENU != null){
                activeLENSNEWMENU.areaQuery.setStyle({fillOpacity:0})
                outterLensesCircularHistoLayer.clearLayers()
                
            }
            map.removeLayer(activeMap);
            CartoDB_VoyagerNoLabels.addTo(map);
            activeMap = CartoDB_VoyagerNoLabels;
            colorToUseWithMap = "#000"
        }); 


        //////////////////////////////////////////
        //////////////////////////////////////////
        //////////////////////////////////////////


        function convertLeng(d) {
            return {
                len: +d.len         // convert string to number
            };
        } 
        function convertVel(d) {
            return {
                veloc_avg: +d.veloc_avg         // convert string to number
            };
        } 
        function convertDur(d) {
            return {
            };
        } 
        function convertTime(d) {
            var parseData2 = d3.utcParse("%Y-%m-%d %H:%M:%S");
            var formatDate = d3.timeFormat("%b-%Y")
            return {
                data_time_start: parseData2(d.data_time_start)     
            };
        } 
        async function createVelocityHistogram(dataInput){  
             
            // set the dimensions and margins of the graph
            var margin = {top: 10, right: 20, bottom: 30, left: 40},
                width = 410 - margin.left - margin.right,
                height = 280 - margin.top - margin.bottom;

            // append the svg object to the body of the page
            var svg = d3.select("#my_dataviz")
            .append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
            .append("g")
                .attr("transform",
                    "translate(" + margin.left + "," + margin.top + ")");

            // get the data
            d3.csv("activeCSV/velocityFinal.csv", function(data) {

            // X axis: scale and draw:
            var x = d3.scaleLinear()
                .domain([0, dataInput])     // can use this instead of 1000 to have the max of data: d3.max(data, function(d) { return +d.price })
                .range([0, width]);
            svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(d3.axisBottom(x));

            // set the parameters for the histogram
            var histogram = d3.histogram()
                .value(function(d) { return +d.veloc_avg; })   // I need to give the vector of value
                .domain(x.domain())  // then the domain of the graphic
                .thresholds(x.ticks(30)); // then the numbers of bins

            // And apply this function to data to get the bins
            var bins = histogram(data);

            // Y axis: scale and draw:
            var y = d3.scaleLinear()
                .range([height, 0]);
                y.domain([0, d3.max(bins, function(d) { return d.length; })]);   // d3.hist has to be called before the Y axis obviously
            svg.append("g")
                .call(d3.axisLeft(y));

            // Add a tooltip div. Here I define the general feature of the tooltip: stuff that do not depend on the data point.
            // Its opacity is set to 0: we don't see it by default.
            var tooltip = d3.select("#my_dataviz")
                .append("div")
                .style("opacity", 0)
                .attr("class", "tooltip")
                .style("background-color", "black")
                .style("color", "white")
                .style("border-radius", "5px")
                .style("padding", "10px")

            // A function that change this tooltip when the user hover a point.
            // Its opacity is set to 1: we can now see it. Plus it set the text and position of tooltip depending on the datapoint (d)
            var showTooltip = function(d) {
                tooltip
                .transition()
                .duration(100)
                .style("opacity", 1)
                tooltip
                .html("Range: " + d.x0 + "Km/h - " + d.x1+ "Km/h")
                .style("left", (d3.mouse(this)[0]+20) + "px")
                .style("top", (d3.mouse(this)[1]) + "px")
            }
            var moveTooltip = function(d) {
                tooltip
                .style("left", (d3.mouse(this)[0]+20) + "px")
                .style("top", (d3.mouse(this)[1]) + "px")
            }
            // A function that change this tooltip when the leaves a point: just need to set opacity to 0 again
            var hideTooltip = function(d) {
                tooltip
                .transition()
                .duration(100)
                .style("opacity", 0)
            }

            // append the bar rectangles to the svg element
            svg.selectAll("rect")
                .data(bins)
                .enter()
                .append("rect")
                    .attr("x", 1)
                    .attr("transform", function(d) { return "translate(" + x(d.x0) + "," + y(d.length) + ")"; })
                    .attr("width", function(d) { return x(d.x1) - x(d.x0) -1 ; })
                    .attr("height", function(d) { return height - y(d.length); })
                    .style("fill", "#69b3a2")
                    // Show tooltip on hover
                    .on("mouseover", showTooltip )
                    .on("mousemove", moveTooltip )
                    .on("mouseleave", hideTooltip )

            });
        }
        
        async function createLengthHistogram(dataInput){ 
            
            // set the dimensions and margins of the graph
            var margin = {top: 10, right: 20, bottom: 30, left: 40},
                width = 410 - margin.left - margin.right,
                height = 280 - margin.top - margin.bottom;

            // append the svg object to the body of the page
            var svg = d3.select("#my_datavizLENGTH")
            .append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
            .append("g")
                .attr("transform",
                    "translate(" + margin.left + "," + margin.top + ")");

            // get the data
            d3.csv("activeCSV/lengthFinal.csv", function(data) {

            // X axis: scale and draw:
            var x = d3.scaleLinear()
                .domain([0, dataInput])     // can use this instead of 1000 to have the max of data: d3.max(data, function(d) { return +d.price })
                .range([0, width]);
            svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(d3.axisBottom(x));

            // set the parameters for the histogram
            var histogram = d3.histogram()
                .value(function(d) { return +d.len; })   // I need to give the vector of value
                .domain(x.domain())  // then the domain of the graphic
                .thresholds(x.ticks(30)); // then the numbers of bins

            // And apply this function to data to get the bins
            var bins = histogram(data);

            // Y axis: scale and draw:
            var y = d3.scaleLinear()
                .range([height, 0]);
                y.domain([0, d3.max(bins, function(d) { return d.length; })]);   // d3.hist has to be called before the Y axis obviously
            svg.append("g")
                .call(d3.axisLeft(y));

            // Add a tooltip div. Here I define the general feature of the tooltip: stuff that do not depend on the data point.
            // Its opacity is set to 0: we don't see it by default.
            var tooltip = d3.select("#my_datavizLENGTH")
                .append("div")
                .style("opacity", 0)
                .attr("class", "tooltip")
                .style("background-color", "black")
                .style("color", "white")
                .style("border-radius", "5px")
                .style("padding", "10px")

            // A function that change this tooltip when the user hover a point.
            // Its opacity is set to 1: we can now see it. Plus it set the text and position of tooltip depending on the datapoint (d)
            var showTooltip = function(d) {
                tooltip
                .transition()
                .duration(100)
                .style("opacity", 1)
                tooltip
                .html("Range: " + d.x0/1000 + "Km - " + d.x1/1000 + "Km")
                .style("left", (d3.mouse(this)[0]+20) + "px")
                .style("top", (d3.mouse(this)[1]) + "px")
            }
            var moveTooltip = function(d) {
                tooltip
                .style("left", (d3.mouse(this)[0]+20) + "px")
                .style("top", (d3.mouse(this)[1]) + "px")
            }
            // A function that change this tooltip when the leaves a point: just need to set opacity to 0 again
            var hideTooltip = function(d) {
                tooltip
                .transition()
                .duration(100)
                .style("opacity", 0)
            }

            // append the bar rectangles to the svg element
            svg.selectAll("rect")
                .data(bins)
                .enter()
                .append("rect")
                    .attr("x", 1)
                    .attr("transform", function(d) { return "translate(" + x(d.x0) + "," + y(d.length) + ")"; })
                    .attr("width", function(d) { return x(d.x1) - x(d.x0) -1 ; })
                    .attr("height", function(d) { return height - y(d.length); })
                    .style("fill", "#69b3a2")
                    // Show tooltip on hover
                    .on("mouseover", showTooltip )
                    .on("mousemove", moveTooltip )
                    .on("mouseleave", hideTooltip )

            });

        }

        async function  createDurationHistogram(dataInput){
            var formatData = d3.timeParse("%H:%M:%S");
            var formatData1 = d3.timeFormat("%Hh:%Mm");
            var formatData2 = d3.timeFormat("%H:%M");
            
            var formatMillisecond = d3.timeFormat(".%L"),
                formatSecond = d3.timeFormat(":%S"),
                formatMinute = d3.timeFormat(" %H:%M "),
                formatHour = d3.timeFormat("%H"),
                formatDay = d3.timeFormat("%a %d"),
                formatWeek = d3.timeFormat("%b %d"),
                formatMonth = d3.timeFormat("%b"),
                formatYear = d3.timeFormat("%Y");
            
            // Define filter conditions
            function multiFormat(date) {
            return (d3.timeSecond(date) < date ? formatMillisecond
                : d3.timeMinute(date) < date ? formatSecond
                : d3.timeHour(date) < date ? formatMinute
                : d3.timeDay(date) < date ? formatHour
                : d3.timeMonth(date) < date ? (d3.timeWeek(date) < date ? formatDay : formatWeek)
                : d3.timeYear(date) < date ? formatMonth
                : formatYear)(date);
            }
            let maxDurationVal =dataInput.hours + ":" + dataInput.minutes + ":" + dataInput.seconds
            // set the dimensions and margins of the graph
            var margin = {top: 10, right: 20, bottom: 30, left: 40},
                width = 410 - margin.left - margin.right,
                height = 280 - margin.top - margin.bottom;

            // append the svg object to the body of the page
            var svg = d3.select("#my_datavizDURATION")
            .append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
            .append("g")
                .attr("transform",
                    "translate(" + margin.left + "," + margin.top + ")");

            // get the data
            d3.csv("activeCSV/durationFinal.csv", function(data) {
            
            // X axis: scale and draw:
            var x = d3.scaleTime()
                .domain([formatData("00:00:00").getTime(), formatData(maxDurationVal).getTime()])     // can use this instead of 1000 to have the max of data: d3.max(data, function(d) { return +d.price })
                .range([0, width]);
            svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(d3.axisBottom(x)
                .tickFormat(multiFormat));

            // set the parameters for the histogram
            var histogram = d3.histogram()
                .value(function(d) {return formatData(d.duration).getTime(); })   // I need to give the vector of value
                .domain(x.domain())  // then the domain of the graphic
                .thresholds(x.ticks(30)); // then the numbers of bins

            // And apply this function to data to get the bins
            var bins = histogram(data);

            // Y axis: scale and draw:
            var y = d3.scaleLinear()
                .range([height, 0]);
                y.domain([0, d3.max(bins, function(d) { return d.length; })]);   // d3.hist has to be called before the Y axis obviously
            svg.append("g")
                .call(d3.axisLeft(y));

            // Add a tooltip div. Here I define the general feature of the tooltip: stuff that do not depend on the data point.
            // Its opacity is set to 0: we don't see it by default.
            var tooltip = d3.select("#my_datavizDURATION")
                .append("div")
                .style("opacity", 0)
                .attr("class", "tooltip")
                .style("background-color", "black")
                .style("color", "white")
                .style("border-radius", "5px")
                .style("padding", "10px")

            // A function that change this tooltip when the user hover a point.
            // Its opacity is set to 1: we can now see it. Plus it set the text and position of tooltip depending on the datapoint (d)
            var showTooltip = function(d) {
                tooltip
                .transition()
                .duration(100)
                .style("opacity", 1)
                tooltip
                .html("Range: " + formatData1(d.x0) + " - " + formatData1(d.x1))
                .style("left", (d3.mouse(this)[0]+20) + "px")
                .style("top", (d3.mouse(this)[1]) + "px")
            }
            var moveTooltip = function(d) {
                tooltip
                .style("left", (d3.mouse(this)[0]+20) + "px")
                .style("top", (d3.mouse(this)[1]) + "px")
            }
            // A function that change this tooltip when the leaves a point: just need to set opacity to 0 again
            var hideTooltip = function(d) {
                tooltip
                .transition()
                .duration(100)
                .style("opacity", 0)
            }

            // append the bar rectangles to the svg element
            svg.selectAll("rect")
                .data(bins)
                .enter()
                .append("rect")
                    .attr("x", 1)
                    .attr("transform", function(d) { return "translate(" + x(d.x0) + "," + y(d.length) + ")"; })
                    .attr("width", function(d) { return x(d.x1) - x(d.x0) -1 ; })
                    .attr("height", function(d) { return height - y(d.length); })
                    .style("fill", "#69b3a2")
                    // Show tooltip on hover
                    .on("mouseover", showTooltip )
                    .on("mousemove", moveTooltip )
                    .on("mouseleave", hideTooltip )

            });

        }

        async function createTimeHistogram(dataInput,minDate){  
            let numberOfTicks = 30
            var formatData = d3.timeParse("%Y-%m-%dT%H:%M:%S.%LZ");
            var formatData1 = d3.timeFormat("%Y-%m-%d");
            let rangeVar = [new Date(minDate).getTime(), new Date(dataInput).getTime()]
            if(dataInput == minDate) {
                rangeVar = [new Date(minDate).getTime()-1000, new Date(dataInput).getTime()+1000]
                numberOfTicks = 2
            }
            var formatMillisecond = d3.timeFormat(".%L"),
                formatSecond = d3.timeFormat(":%S"),
                formatMinute = d3.timeFormat("%I:%M"),
                formatHour = d3.timeFormat("%I %p"),
                formatDay = d3.timeFormat("%a %d"),
                formatWeek = d3.timeFormat("%b %d"),
                formatMonth = d3.timeFormat("%b"),
                formatYear = d3.timeFormat("%Y");

            // Define filter conditions
            function multiFormat(date) {
            return (d3.timeSecond(date) < date ? formatMillisecond
                : d3.timeMinute(date) < date ? formatSecond
                : d3.timeHour(date) < date ? formatMinute
                : d3.timeDay(date) < date ? formatHour
                : d3.timeMonth(date) < date ? (d3.timeWeek(date) < date ? formatDay : formatWeek)
                : d3.timeYear(date) < date ? formatMonth
                : formatYear)(date);
            }
             
            // set the dimensions and margins of the graph
            var margin = {top: 10, right: 20, bottom: 30, left: 40},
                width = 410 - margin.left - margin.right,
                height = 280 - margin.top - margin.bottom;

            // append the svg object to the body of the page
            var svg = d3.select("#my_datavizTIME")
            .append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
            .append("g")
                .attr("transform",
                    "translate(" + margin.left + "," + margin.top + ")");

            // get the data
            d3.csv("activeCSV/timeFinal.csv", function(data) {

            // X axis: scale and draw:
            var x = d3.scaleTime()
                .domain(rangeVar)     // can use this instead of 1000 to have the max of data: d3.max(data, function(d) { return +d.price })
                .range([0, width]);
            svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(d3.axisBottom(x)
                .tickFormat(multiFormat));

            // set the parameters for the histogram
            var histogram = d3.histogram()
                .value(function(d) {return new Date(d.data_time_start).getTime(); })   // I need to give the vector of value
                .domain(x.domain())  // then the domain of the graphic
                .thresholds(x.ticks(numberOfTicks)); // then the numbers of bins

            // And apply this function to data to get the bins
            var bins = histogram(data);

            // Y axis: scale and draw:
            var y = d3.scaleLinear()
                .range([height, 0]);
                y.domain([0, d3.max(bins, function(d) { return d.length; })]);   // d3.hist has to be called before the Y axis obviously
            svg.append("g")
                .call(d3.axisLeft(y));

            // Add a tooltip div. Here I define the general feature of the tooltip: stuff that do not depend on the data point.
            // Its opacity is set to 0: we don't see it by default.
            var tooltip = d3.select("#my_datavizTIME")
                .append("div")
                .style("opacity", 0)
                .attr("class", "tooltip")
                .style("background-color", "black")
                .style("color", "white")
                .style("border-radius", "5px")
                .style("padding", "10px")

            // A function that change this tooltip when the user hover a point.
            // Its opacity is set to 1: we can now see it. Plus it set the text and position of tooltip depending on the datapoint (d)
            var showTooltip = function(d) {
                tooltip
                .transition()
                .duration(100)
                .style("opacity", 1)
                tooltip
                .html("Range: " + formatData1(d.x0) + " - " + formatData1(d.x1))
                .style("left", (d3.mouse(this)[0]+20) + "px")
                .style("top", (d3.mouse(this)[1]) + "px")
            }
            var moveTooltip = function(d) {
                tooltip
                .style("left", (d3.mouse(this)[0]+20) + "px")
                .style("top", (d3.mouse(this)[1]) + "px")
            }
            // A function that change this tooltip when the leaves a point: just need to set opacity to 0 again
            var hideTooltip = function(d) {
                tooltip
                .transition()
                .duration(100)
                .style("opacity", 0)
            }

            // append the bar rectangles to the svg element
            svg.selectAll("rect")
                .data(bins)
                .enter()
                .append("rect")
                    .attr("x", 1)
                    .attr("transform", function(d) { return "translate(" + x(d.x0) + "," + y(d.length) + ")"; })
                    .attr("width", function(d) { return x(d.x1) - x(d.x0) -1 ; })
                    .attr("height", function(d) { return height - y(d.length); })
                    .style("fill", "#69b3a2")
                    // Show tooltip on hover
                    .on("mouseover", showTooltip )
                    .on("mousemove", moveTooltip )
                    .on("mouseleave", hideTooltip )

            });
        }

        async function circularHistogram(lens){
            // set the dimensions and margins of the graph
            var margin = {top: 100, right: 0, bottom: 0, left: 0},
                width = 800 - margin.left - margin.right,
                height = 800 - margin.top - margin.bottom,
                innerRadius = 105,
                outerRadius = 200;   // the outerRadius goes from the middle of the SVG area to the border
            var nameOfHisto = "#"+lens.idOfHistogram
            console.log(nameOfHisto)
            // append the svg object
            var svg = d3.select(nameOfHisto)
            .append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
            .append("g")
                .attr("transform", "translate(" + (width / 2 + margin.left) + "," + (height / 2 + margin.top) + ")");
            console.log(lens.attArrayCircHistogram)
            
            
            let max = 0
            for(let index = 0; index <= lens.attArrayCircHistogram.length-1;index++){
                console.log(lens.attArrayCircHistogram[index].value)
                if(lens.attArrayCircHistogram[index].value > max) max =lens.attArrayCircHistogram[index].value
            }
            console.log(max)
            for(let index = 0; index <= lens.attArrayCircHistogram.length-1;index++){
                lens.attArrayCircHistogram[index].value =lens.attArrayCircHistogram[index].value + max/100;
            }
            let jsonToUse = lens.attArrayCircHistogram;
            // Scales
            var x = d3.scaleBand()
                .range([(-1 * Math.PI)*0.99, (0.5 * Math.PI)*0.99])    // X axis goes from 0 to 2pi = all around the circle. If I stop at 1Pi, it will be around a half circle
                .align(0)                  // This does nothing
                .domain(jsonToUse.map(function(d) { return d.name; })); // The domain of the X axis is the list of states.
            var y = d3.scaleRadial()
                .range([innerRadius, outerRadius])   // Domain will be define later.
                .domain([0, max]); // Domain of Y is from 0 to the max seen in the data
            // Add the bars
            svg.append("g")
                .selectAll("path")
                .data(jsonToUse)
                .enter()
                .append("path")
                .attr("fill", function(d, i) {
                    return lens.color(i);
                })
                .attr("d", d3.arc()     // imagine your doing a part of a donut plot
                    .innerRadius(innerRadius)
                    .outerRadius(function(d) { return y(+d.value); })
                    .startAngle(function(d) { return x(d.name); })
                    .endAngle(function(d) { return x(d.name) + x.bandwidth(); })
                    .padAngle(0.01)
                    .padRadius(innerRadius))

            // Add the labels
            svg.append("g")
                .selectAll("g")
                .data(jsonToUse)
                .enter()
                .append("g")
                    .attr("text-anchor", function(d) { return (x(d.name) + x.bandwidth() / 2 + Math.PI) % (2 * Math.PI) < Math.PI ? "end" : "start"; })
                    .attr("transform", function(d) { return "rotate(" + ((x(d.name) + x.bandwidth() / 2) * 180 / Math.PI - 90) + ")"+"translate(" + (y(+d.value)+10) + ",0)"; })
                .append("text")
                    .text(function(d){return(d.name)})
                    .attr("transform", function(d) { return (x(d.name) + x.bandwidth() / 2 + Math.PI) % (2 * Math.PI) < Math.PI ? "rotate(180)" : "rotate(0)"; })
                    .style("font-size", "11px")
                    .style("fill", colorToUseWithMap)
                    .attr("alignment-baseline", "middle")
        }


        //////////////////////////////////////////
        //////////////////////////////////////////
        //////////////////////////////////////////


        function clearBox(elementID)
        {
            document.getElementById(elementID).innerHTML = "";
        }

        //////////////////////////////////////////
        //////////////////////////////////////////
        //////////////////////////////////////////

        // Function to compute density
        function kernelDensityEstimator(kernel, X) {
            return function(V) {
                return X.map(function(x) {
                return [x, d3.mean(V, function(v) { return kernel(x - v); })];
                });
            };
        }
        function kernelEpanechnikov(k) {
            return function(v) {
                return Math.abs(v /= k) <= 1 ? 0.75 * (1 - v * v) / k : 0;
            };
        }

        //////////////////////////////////////////

        function replaceGlobally(original, searchTxt, replaceTxt) {
            original = original.split(searchTxt).join(replaceTxt);
            return original;
        }
        
        /*document
            .querySelector('#basemaps')
            .addEventListener('change', function (e) {
            var basemap = e.target.value;
            setBasemap(basemap);
            });
        */

        //NEW MENU RELATED STUFF
        function moveLENSNEWMENU(lens){
            document.getElementById('type').style.visibility="hidden";
            document.getElementById("timeSelectionMenu").style.visibility="hidden";
            document.getElementsByClassName('explanation')[0].style.visibility="hidden"
            clicked=false;
            changeRadius=false;
            lensCanMove = true;
            if(lensCanMove){
                let mouseDown = false;
                lens.outsideCircle.on({
                    dbclick:function(e){
                        L.DomEvent.stopPropagation(e);
                    },
                    click : function(e){
                        L.DomEvent.stopPropagation(e);
                    },
                    mousedown: function (event) {
                        L.DomEvent.stopPropagation(event);
                        mouseDown = true;
                        notClickedLens = false;
                        
                        map.on('mousemove', function (e) {
                            createQueryLensesFlag = false;
                            createAttributeLensesFlag = false;
                            document.getElementsByClassName("not-tabFilter")[0].style.backgroundColor ="#14599100"
                            document.getElementsByClassName("not-tabAttr")[0].style.backgroundColor ="#14599100"
                            /*container1.style.backgroundColor = 'white'; 
                            container2.style.backgroundColor = 'white';*/
                            L.DomEvent.stopPropagation(e);
                            console.log(lensCanMove);
                            console.log(mouseDown);
                            if(lensCanMove && mouseDown){
                                
                                if(!(moved)){
                                    document.getElementById('piemenu').style.visibility = "hidden";
                                }
                                
                                map.dragging.disable();
                                moved = true;
                                lens.areaQuery.setLatLng(e.latlng);
                                lens.outsideCircle.setLatLng(e.latlng);
                                lens.lngLat = e.latlng;
                                lens.setBounds(lens.areaQuery.getBounds());
                                map.panInside(lens.getLngLat(),{padding:[200,200],duration:0.35});
                                
                            }
                        });
                    },
                    mouseup: function(e){
                        mouseDown = false;
                        L.DomEvent.stopPropagation(e); 
                        map.removeEventListener('mousemove');
                        if(lensCanMove){
                            
                            if(moved){ 
                                document.getElementById('piemenu').style.visibility = "visible";
                                moved = false;   
                                map.dragging.enable();
                                
                                lens.setLngLat([e.latlng.lat,e.latlng.lng]);
                                lens.updateLENS();
                                lens.setLngLatOLD([e.latlng.lat,e.latlng.lng]);
                                lens.setBounds(lens.areaQuery.getBounds());
                                
                                for(i = 0; i < attLensesArray.length; i++){
                                    attLensesArray[i].updateALL();
                                };
                            }
                        }
                    }
                });
            }
            else{
                map.zoomIn(1,true);
                map.fitBounds(lens.getBound());

            }
                            
        }
        function radiusLENSNEWMENU(lens){
            document.getElementById('type').style.visibility="hidden";
            document.getElementById("timeSelectionMenu").style.visibility="hidden";

            document.getElementsByClassName('explanation')[0].style.visibility="visible"
            clicked=false;
            changeRadius = true;
            lensCanMove = false;
            
            //if(changeRadius){
            lens.setRadiusFlag(true);
            //map.zoomOut(1, true);
            lens.outsideCircle.on({
                click: function(e){
                    L.DomEvent.stopPropagation(e);
                    mapPressForCreation = false;
                    correctSizeVar = false;
                },
                mousedown: function (e) {
                    
                    if(changeRadius){  
                        L.DomEvent.stopPropagation(e);
                        console.log(lens.getRadiusFlag())  
                        let from = turf.point(lens.getLngLat());
                        let optionsCreateCirc = {units: 'kilometers'};

                        mapPressForCreation = true;
                        map.on('mousemove', function (event) {
                            
                            if(lens.getRadiusFlag()){
                                L.DomEvent.stopPropagation(event);

                                if (mapPressForCreation && changeRadius) {
                                    
                                    document.getElementById('piemenu').style.visibility = "hidden";
                                    map.dragging.disable();

                                    let to = turf.point([event.latlng.lat, event.latlng.lng]);

                                    let distance = turf.distance(from, to, optionsCreateCirc);
                                    radiusValue = distance * 1000;
                                    if (radiusValue >= 50 && radiusValue <= 25000) {
                                        correctSizeVar = true;
                                        lens.colorSuccess();
                                        lens.setRadius(radiusValue);
                                        document.getElementsByClassName('explanation')[0].innerText = lens.getRadius().toFixed(0)/1000+"Kilometers";
                                    } else {
                                        correctSizeVar = false;
                                        lens.areaQuery.setStyle({fillColor: 'DarkRed',color:'red'});
                                    }
                                }
                                else
                                    console.log("Mouse down but flags are false :S");
                            }
                        });
                    }
                },
                mouseup: function (e) {
                    
                    if(changeRadius && lens.getRadiusFlag()){
                        L.DomEvent.stopPropagation(e);
                        map.removeEventListener('mousemove');
                        document.getElementById('piemenu').style.visibility = "visible";
                        
                        console.log(correctSizeVar);
                        if (mapPressForCreation && correctSizeVar) {

                            lens.updateLENS();
                            lens.setBounds(lens.areaQuery.getBounds());
                            
                            for (i = 0; i < attLensesArray.length; i++) {
                                attLensesArray[i].updateALL();
                            }
                            lens.setRadiusOLD(lens.getRadius());
                        }
                        else{
                            lens.setRadius(lens.getRadiusOLD());
                        }

                        //map.fitBounds(lens.getBound());
                        mapPressForCreation = false;
                        correctSizeVar = false;
                        
                    }
                    map.dragging.enable();

                }
            });
            /*} else {
                lens.setRadiusFlag(false);
                //map.fitBounds(lens.getBound());
                map.dragging.enable();
            }*/
        }

        function deleteLENSNEWMENU(lens){
            lensCanMove=false;
            clicked=false;
            outterLensesLayer.clearLayers();
            lens.deleteLayers();
            lens.deleteFromZORDER();
            for(i = 0; i < attLensesArray.length; i++){
                attLensesArray[i].updateALL();
            };
        }

        function typeLENSNEWMENU(){
            clicked=false;
            lensCanMove = false;
            changeRadius = false;
            document.getElementById('type').style.visibility = "visible";
            document.getElementById("timeSelectionMenu").style.visibility="hidden";
            document.getElementsByClassName('explanation')[0].style.visibility="hidden"
                                    
        }

        function intervalsLENSNEWMENU(lens){
            clicked=false;
            lensCanMove = false;
            changeRadius = false;
            document.getElementById('type').style.visibility = "hidden";
            document.getElementsByClassName('explanation')[0].style.visibility="hidden"
                    

            //if(document.getElementById("sliderRadius").style.display=='none'){
            if(lens.getType() == "Vel_avg") {

                if(document.getElementById("sliderIntervalVel").style.display=='none'){

                    map.removeEventListener("click",_mapClickEffect)
                    map.on("click",_intervalsClickEffect)
                    lens.areaQuery.setStyle({fillOpacity: 0.6})
                    //document.getElementsByClassName('myIntervalsButton')[0].style.backgroundColor = "#ff0000";
                    document.getElementById("sliderIntervalVel").style.display="block";

                    let $sliderIntervalVel = $('#sliderIntervalVel');
                    $sliderIntervalVel.mousedown( function (e){
                        //TODO VELOCITY REMOVING BADLY??
                        L.DomEvent.stopPropagation(e);
                        map.dragging.disable();
                        e.originalEvent.preventDefault();
                    });
                }
                else {
                    document.getElementById("sliderIntervalVel").style.display="none";
                    lens.areaQuery.setStyle({fillOpacity: 0.0})
                    map.on("click",_mapClickEffect)
                    //document.getElementsByClassName('myIntervalsButton')[0].style.backgroundColor = "#ff8400";
                }
            }
            else if(lens.getType() == "Length") {
                if(document.getElementById("sliderIntervalLength").style.display=='none'){

                    map.removeEventListener("click",_mapClickEffect)
                    map.on("click",_intervalsClickEffect)
                    lens.areaQuery.setStyle({fillOpacity: 0.6})
                    //document.getElementsByClassName('myIntervalsButton')[0].style.backgroundColor = "#ff0000";
                    document.getElementById("sliderIntervalLength").style.display="block";

                    let $sliderIntervalLength = $('#sliderIntervalLength');
                    $sliderIntervalLength.mousedown( function (e){
                        //TODO VELOCITY REMOVING BADLY??
                        L.DomEvent.stopPropagation(e);
                        map.dragging.disable();

                        e.originalEvent.preventDefault();
                    });
                }
                else {
                    document.getElementById("sliderIntervalLength").style.display="none";
                    lens.areaQuery.setStyle({fillOpacity: 0.0})
                    map.on("click",_mapClickEffect)
                    map.removeEventListener("click",_intervalsClickEffect)
                    //document.getElementsByClassName('myIntervalsButton')[0].style.backgroundColor = "#ff8400";
                }
            }
            else if(lens.getType() == "Time_Duration") {
                if(document.getElementById("sliderIntervalDuration").style.display=='none'){

                    map.removeEventListener("click",_mapClickEffect)
                    map.on("click",_intervalsClickEffect)
                    lens.areaQuery.setStyle({fillOpacity: 0.6})
                    //document.getElementsByClassName('myIntervalsButton')[0].style.backgroundColor = "#ff0000";
                    document.getElementById("sliderIntervalDuration").style.display="block";

                    let $sliderIntervalDuration = $('#sliderIntervalDuration');
                    $sliderIntervalDuration.mousedown( function (e){
                        //TODO VELOCITY REMOVING BADLY??
                        L.DomEvent.stopPropagation(e);
                        map.dragging.disable();
                        e.originalEvent.preventDefault();
                    });
                }
                else {
                    document.getElementById("sliderIntervalDuration").style.display="none";
                    lens.areaQuery.setStyle({fillOpacity: 0.0})
                    map.on("click",_mapClickEffect)
                    map.removeEventListener("click",_intervalsClickEffect)
                    //document.getElementsByClassName('myIntervalsButton')[0].style.backgroundColor = "#ff8400";
                }
            }
            else if(lens.getType() == "Time_Interval") {
                var previousValueEnd = null 
                var previousValueStart = null
                if(document.getElementById("timeSelectionMenu").style.visibility=='hidden'){
                    //NEW TIME PICKER
                    lens.pickerStart = new WindowDatePicker({
                        value: new Date(maxArrayValuesGlobal.timemin).getTime(),
                        // selectors
                        el: '#pickerStart',
                        inputEl: '#demoStart',
                        toggleEl: null,
                        // or 'HOUR', 'DATE'
                        type: "DATEHOUR",// date format
                        dateType: "YYYY/MM/DD HH:MM:SS",
                        // or '12'
                        hourType: "24"
                    });
                    lens.pickerEnd = new WindowDatePicker({
                        value: new Date(maxArrayValuesGlobal.timemax).getTime(),
                        // selectors
                        el: '#pickerEnd',
                        inputEl: '#demoEnd',
                        toggleEl: null,
                        // or 'HOUR', 'DATE'
                        type: "DATEHOUR",// date format
                        dateType: "YYYY/MM/DD",
                        // or '12'
                        hourType: "24"
                    });

                    previousValueEnd = lens.pickerEnd.get().value
                    previousValueStart = lens.pickerStart.get().value

                    document.getElementById("timeSelectionMenu").style.visibility="visible";

                    let toggledStart = false;
                    let toggledEnd = false;
                    $("#toggleEnd").click(function(e){
                        
                        L.DomEvent.stopPropagation(e);
                        map.removeEventListener("click",_mapClickEffect)

                        console.log("YOOO BITCH")
                        

                        lens.pickerEnd.toggle();
                        
                        /*lens.pickerEnd.el.addEventListener('wdp.open', () => {
                            map.removeEventListener("click",_mapClickEffect)

                            evenTimeEndClicked = true;
                            evenTimeStartClicked = false;
                            lens.pickerEnd.el.addEventListener('wdp.change', eveTimeChangeEnd(lens,previousValueEnd));
                            //lens.pickerEnd.el.addEventListener('wdp.save', eveTimeEnd(lens));
                        });
                        
                        lens.pickerEnd.el.addEventListener('wdp.close', () => {
                            map.addEventListener("click")
                            evenTimeStartClicked = false
                            lens.pickerEnd.el.removeEventListener('wdp.change', eveTimeChangeEnd(lens,previousValueEnd));
                        });*/
                    })
                    lens.pickerEnd.el.addEventListener('wdp.open', () => {
                        map.removeEventListener("click",_intervalsClickEffect)
                        map.removeEventListener("click",_mapClickEffect)
                    });
                    lens.pickerEnd.el.addEventListener('wdp.close', () => {
                        console.log("On close")
                        map.on("click",_intervalsClickEffect)
                    });
                    $("#toggleStart").click(function(e){
                        
                        L.DomEvent.stopPropagation(e);
                        map.removeEventListener("click",_mapClickEffect)
                        console.log("SCIENCE BITCH")
                        lens.pickerStart.toggle();
                        /*lens.pickerStart.el.addEventListener('wdp.open', () => {
                            map.removeEventListener("click",_mapClickEffect)
                            evenTimeStartClicked = true;
                            evenTimeEndClicked = false;
                            lens.pickerStart.el.addEventListener('wdp.change', eveTimeChangeStart(lens,previousValueStart));
                            //lens.pickerStart.el.addEventListener('wdp.save', eveTimeStart(lens));
                        });*/
                    

                    });
                    lens.pickerStart.el.addEventListener('wdp.open', () => {
                        map.removeEventListener("click",_intervalsClickEffect)
                        map.removeEventListener("click",_mapClickEffect)
                    });
                    lens.pickerStart.el.addEventListener('wdp.close', () => {
                        console.log("On close")
                        map.on("click",_intervalsClickEffect)
                    });
                    $("#updateFilterButton").click(function(e){
                        eveTimeToChange(lens,previousValueStart,previousValueEnd)
                    })
                    $("#cancelFilterButton").click(function(e){
                        cancelationButton(lens)
                    })
                    
                }
                else {
                    document.getElementById("timeSelectionMenu").style.visibility="hidden";
                    map.on("click",_mapClickEffect)
                    //lens.pickerEnd.el.removeEventListener('wdp.change', eveTimeChangeEnd(lens,previousValueEnd));
                    //lens.pickerEnd.el.removeEventListener('wdp.save', eveTimeEnd(lens));
                    
                    //lens.pickerStart.el.removeEventListener('wdp.change', eveTimeChangeStart(lens,previousValueStart));
                    //lens.pickerStart.el.removeEventListener('wdp.save', eveTimeStart(lens));
                }
            }
            else{
                console.log("Lens not of the type that allows for intervals");
            }
            //}
            
            $(function(){
                $("#sliderIntervalVel").roundSlider({
                    sliderType: "range",
                    radius: "130px",
                    value: lens.getMinV() + "," + lens.getMaxV(),
                    min: 0,
                    max: 250,
                    
                    //lineCap: "round",
                    width: 5,
                    handleSize: "+10",
                    handleShape: "dot",
                    tooltipFormat: function (e) {
                        return e.value + "Km/h";
                    },
                    drag: function (e) {
                        L.DomEvent.stopPropagation(e);
                        
                        let index = e.value.indexOf(",");  // Gets the first index where a , occurs
                        let firstPart = e.value.substr(0, index); // Gets the first part
                        let secondPart = e.value.substr(index + 1);  // Gets the text part
                        lens.setMinV(firstPart);
                        lens.setMaxV(secondPart);
                        console.log(lens.getMinV());
                        console.log(lens.getMaxV());
                    },
                    start: function(e) {
                        
                    },
                    stop: function (e) {
                        L.DomEvent.stopPropagation(e);
                        map.dragging.enable();
                        lens.updateLENS();
                        lens.setMinVOLD(lens.getMinV());
                        lens.setMaxVOLD(lens.getMaxV());
                    }
                });
                
                $("#sliderIntervalLength").roundSlider({
                    sliderType: "range",
                    radius: "130px",
                    value: lens.getMinV() + "," + lens.getMaxV(),
                    min: 1,
                    max: 500000,
                    //lineCap: "round",
                    width: 5,
                    handleSize: "+10",
                    handleShape: "dot",
                    tooltipFormat: function (e) {
                        return e.value/1000 + "Km";
                    },
                    drag: function (e) {
                        L.DomEvent.stopPropagation(e);
                        
                        let index = e.value.indexOf(",");  // Gets the first index where a , occurs
                        let firstPart = e.value.substr(0, index); // Gets the first part
                        let secondPart = e.value.substr(index + 1);  // Gets the text part
                        lens.setMinV(firstPart);
                        lens.setMaxV(secondPart);
                        console.log(lens.getMinV());
                        console.log(lens.getMaxV());
                    },
                    start: function(e) {
                        
                    },
                    stop: function (e) {
                        L.DomEvent.stopPropagation(e);
                        map.dragging.enable();
                        lens.updateLENS();
                        lens.setMinVOLD(lens.getMinV());
                        lens.setMaxVOLD(lens.getMaxV());
                    }
                });
                
                $("#sliderIntervalDuration").roundSlider({
                    sliderType: "range",
                    radius: "130px",
                    value: lens.getMinV() + "," + lens.getMaxV(),
                    min: 0, // 2008-02-02 13:30:44
                    max: 85839, // 2008-02-08 17:39:18
                    //lineCap: "round",
                    width: 5,
                    handleSize: "+10",
                    handleShape: "dot",
                    tooltipFormat: function (e) {
                        let delta = e.value;
                        let days = Math.floor(delta / 86400);
                        delta -= days * 86400;

                        // calculate (and subtract) whole hours
                        let hours = Math.floor(delta / 3600) % 24;
                        delta -= hours * 3600;

                        // calculate (and subtract) whole minutes
                        let minutes = Math.floor(delta / 60) % 60;
                        delta -= minutes * 60;

                        // what's left is seconds
                        let seconds = delta % 60;  // in theory the modulus is not required
                        return hours + 'h ' + minutes + 'm ' + seconds + 's';
                    },
                    drag: function (e) {
                        L.DomEvent.stopPropagation(e);
                        
                        let index = e.value.indexOf(",");  // Gets the first index where a , occurs
                        let firstPart = e.value.substr(0, index); // Gets the first part
                        let secondPart = e.value.substr(index + 1);  // Gets the text part
                        lens.setMinV(firstPart);
                        lens.setMaxV(secondPart);
                        console.log(lens.getMinV());
                        console.log(lens.getMaxV());
                    },
                    start: function(e) {
                        
                    },
                    stop: function (e) {
                        L.DomEvent.stopPropagation(e);
                        map.dragging.enable();
                        lens.updateLENS();
                        lens.setMinVOLD(lens.getMinV());
                        lens.setMaxVOLD(lens.getMaxV());
                    }
                });
                
                
            });

        }

        function deleteATTLENSNEWMENU(lens,idOfHistogram){
            clicked=false;
            changeRadius = false;
            lensCanMove = false;

            document.getElementById('attribute').style.display = "none";
            document.getElementById('attribute').style.visibility = "hidden";

            document.getElementById('encoding').style.display = "none";
            document.getElementById('encoding').style.visibility = "hidden";
            
            outterLensesLayer.removeLayer(lens.outsideCircle);
            outterLensesCircularHistoLayer.removeLayer(lens.outsideCircleHistogram);
            lensesLayer.removeLayer(lens.areaQuery);
            
            lens.delete();
            lens.updateOthersV2(true);
            if(lens.hasBeenOpacity){
                attLensArrayToServer();
                for(let j = 0; j < lens.intersections.length; j++){
                    lens.intersections[j].removeOpacityLens(lens);
                    for(let i = 0; i < lens.intersections[j].areas.length; i++){
                        lens.intersections[j].areas[i].delete();
                        lens.intersections[j].areas[i].createLayers();
                    }
                }
                
            }
        }

        function radiusATTLENSNEWMENU(lens,idOfHistogram){
            document.getElementById('attribute').style.display = "none";
            document.getElementById('attribute').style.visibility = "hidden";
            document.getElementById('encoding').style.display = "none";
            document.getElementById('encoding').style.visibility = "hidden";

            document.getElementsByClassName('explanationATT')[0].style.visibility="visible"
            clicked=false;
            changeRadius = true;
            lensCanMove = false;
            mapPressForCreation = false;
            let once = true;
            lens.setRadiusFlag(true);
            mapPressForCreation = false;
            correctSizeVar = false;
            console.log("OK TOU NA FUNCAO")
            lens.outsideCircle.on({
                mousedown: function (e) {
                    if(changeRadius){  
                        L.DomEvent.stopPropagation(e);
                        console.log("OK TOU No mouse down")
                        let from = turf.point([lens.getLngLat().lat,lens.getLngLat().lng]);
                        let optionsCreateCirc = {units: 'kilometers'};
                        
                        mapPressForCreation = true;
                        map.on('mousemove', function (event) {
                            if(lens.getRadiusFlag()){
                                L.DomEvent.stopPropagation(event);
                                console.log("OK TOU No map move")
                                if(once){
                                    document.getElementById('piemenu').style.visibility="hidden";
                                    lens.delete();
                                    lens.updateOthersV2(true);
                                    if(lens.hasBeenOpacity){
                                        for(let j = 0; j < lens.intersections.length; j++){
                                            lens.intersections[j].removeOpacityLens(lens);
                                            for(let i = 0; i < lens.intersections[j].areas.length; i++){
                                                lens.intersections[j].areas[i].delete();
                                                lens.intersections[j].areas[i].createLayers();
                                            }
                                        }
                                    }
                                    once = false;
                                }
                                if (mapPressForCreation && changeRadius) {
                                    
                                    
                                    map.dragging.disable();

                                    let to = turf.point([event.latlng.lat, event.latlng.lng]);

                                    let distance = turf.distance(from, to, optionsCreateCirc);
                                    radiusValue = distance * 1000;
                                    if (radiusValue >= 50 && radiusValue <= 25000) {
                                        correctSizeVar = true;
                                        lens.colorSuccess();
                                        lens.setRadius(radiusValue);
                                        document.getElementsByClassName('explanation')[0].innerText = lens.getRadius().toFixed(0)/1000+"Kilometers";
                                    
                                    } else {
                                        correctSizeVar = false;
                                        lens.areaQuery.setStyle({fillColor: 'DarkRed',color:'red'});
                                    }
                                }
                                else
                                    console.log("Mouse down but flags are false :S");
                            }
                        });
                    }
                },
                mouseup: function (e) {
                    L.DomEvent.stopPropagation(e);
                    console.log("OK TOU No mouse up")
                    map.removeEventListener('mousemove');
                    map.dragging.enable();
                    once = true;
                    if(changeRadius && lens.getRadiusFlag()){
                        
                        document.getElementById('piemenu').style.visibility="visible";
                        console.log(correctSizeVar);
                        if (mapPressForCreation,correctSizeVar) {
                            

                            lens.createAreas();
                            if(lens.hasBeenOpacity){
                                if(lens.enc != "opacity"){
                                    lens.hasBeenOpacity = false;
                                }
                                else{
                                    attOPACITYLensesArray.push(lens);
                                    for(let j = 0; j < lens.intersections.length; j++){
                                        lens.intersections[j].addOpacityLens(lens);
                                        for(let i = 0; i < lens.intersections[j].areas.length; i++){
                                            lens.intersections[j].areas[i].delete();
                                            lens.intersections[j].areas[i].createLayers();
                                        }
                                    }
                                }
                                attLensArrayToServer();

                            }
                            lens.setBounds(lens.areaQuery.getBounds());
                            
                            lens.setRadiusOLD(lens.getRadius());
                        }
                        else{
                            lens.colorSuccess();
                            lens.setRadius(lens.getRadiusOLD());
                        }

                        mapPressForCreation = false;
                        correctSizeVar = false;
                    }

                }
            });
        }

        function moveATTLENSNEWMENU(lens,idOfHistogram){
            document.getElementById('attribute').style.display = "none";
            document.getElementById('attribute').style.visibility = "hidden";

            document.getElementById('encoding').style.display = "none";
            document.getElementById('encoding').style.visibility = "hidden";

            if(lens.visibleOutsideMenuFlag == false){
                document.getElementById(idOfHistogram).style.visibility = "hidden";
            }
            clicked = false; 
            changeRadius = false;
            lensCanMove = true;
            lens.setRadiusFlag(false);
            let mouseDown = false;
            lens.outsideCircle.on({
                dbclick:function(e){
                    L.DomEvent.stopPropagation(e);
                },
                click : function(e){
                    L.DomEvent.stopPropagation(e);
                },
                mousedown: function (event) {
                    L.DomEvent.stopPropagation(event);
                    mouseDown = true;
                    notClickedLens = false;
                        
                    
                    map.on('mousemove', function (e) {
                        
                        
                        if(lensCanMove && mouseDown){
                            L.DomEvent.stopPropagation(e);
                            document.getElementById('piemenu').style.visibility = "hidden";
                            createQueryLensesFlag = false;
                            createAttributeLensesFlag = false;
                            document.getElementsByClassName("not-tabFilter")[0].style.backgroundColor ="#14599100"
                            document.getElementsByClassName("not-tabAttr")[0].style.backgroundColor ="#14599100"
                            /*container1.style.backgroundColor = 'white'; 
                            container2.style.backgroundColor = 'white';*/
                            if(!(moved)){
                                
                                lens.delete();
                                lens.updateOthersV2(true);
                                if(lens.hasBeenOpacity){
                                    for(let j = 0; j < lens.intersections.length; j++){
                                        lens.intersections[j].removeOpacityLens(lens);
                                        for(let i = 0; i < lens.intersections[j].areas.length; i++){
                                            lens.intersections[j].areas[i].delete();
                                            lens.intersections[j].areas[i].createLayers();
                                        }
                                    }
                                }
                            }
                            
                            map.dragging.disable();
                            moved = true;
                            lens.areaQuery.setLatLng(e.latlng);
                            lens.outsideCircle.setLatLng(e.latlng);
                            lens.outsideCircleHistogram.setLatLng(e.latlng);
                            lens.lngLat = e.latlng;
                            lens.setBounds(lens.areaQuery.getBounds());
                            map.panInside(lens.getLngLat(),{padding:[200,200],duration:0.3});
                        }
                    });
                },
                mouseup: function(e){
                    mouseDown = false;
                    L.DomEvent.stopPropagation(e);
                    
                    
                    document.getElementById('piemenu').style.visibility = "visible";
                    if(lensCanMove){
                        map.removeEventListener('mousemove');
                        if(moved){ 
                            moved = false;   
                            map.dragging.enable();
                            
                            //lens.delete();

            
                            lens.createAreas();
                            console.log(lens.hasBeenOpacity)
                            if(lens.hasBeenOpacity){
                                console.log(attOPACITYLensesArray);
                                if(lens.enc != "opacity"){
                                    lens.hasBeenOpacity = false;
                                }
                                else{
                                    attOPACITYLensesArray.push(lens);
                                    for(let j = 0; j < lens.intersections.length; j++){
                                        lens.intersections[j].addOpacityLens(lens);
                                        for(let i = 0; i < lens.intersections[j].areas.length; i++){
                                            lens.intersections[j].areas[i].delete();
                                            lens.intersections[j].areas[i].createLayers();
                                        }
                                    }
                                }
                                
                                attLensArrayToServer();
                            }
                            //lens.createLayers();

                            lens.setBounds(lens.areaQuery.getBounds());
                            

                        }
                    }
                }
            });
        }

        function attLENSNEWMENU(lens,idOfHistogram){
            clicked = false; 
            changeRadius = false;
            lensCanMove = false;
            lens.setRadiusFlag(false);
            document.getElementById('attribute').style.display = "block";
            document.getElementById('attribute').style.visibility = "visible";

            document.getElementById('encoding').style.display = "none";
            document.getElementById('encoding').style.visibility = "hidden";

            if(lens.visibleOutsideMenuFlag == false){
                document.getElementById(idOfHistogram).style.visibility = "hidden";
            }
        }

        function encLENSNEWMENU(lens,idOfHistogram){
            clicked = false; 
            changeRadius = false;
            lensCanMove = false;
            lens.setRadiusFlag(false);
            document.getElementById('encoding').style.display = "block";
            document.getElementById('encoding').style.visibility = "visible";
            document.getElementById('attribute').style.display = "none";
            document.getElementById('attribute').style.visibility = "hidden";
            if(lens.visibleOutsideMenuFlag == false){
                document.getElementById(idOfHistogram).style.visibility = "hidden";
            }
        }

        function statsLENSNEWMENU(lens,idOfHistogram){
            clicked = false; 
            changeRadius = false;
            lensCanMove = false;
            lens.setRadiusFlag(false);
            document.getElementById('encoding').style.display = "none";
            document.getElementById('encoding').style.visibility = "hidden";
            document.getElementById('attribute').style.display = "none";
            document.getElementById('attribute').style.visibility = "hidden";
            console.log(idOfHistogram)
            if(document.getElementById(idOfHistogram).style.visibility == "hidden")
                document.getElementById(idOfHistogram).style.visibility = "visible";
            else if(document.getElementById(idOfHistogram).style.visibility == "visible" && lens.visibleOutsideMenuFlag == false){
                lens.visibleOutsideMenuFlag = true;
                document.getElementById("wheelnav-piemenu-slice-2").style.fill = "#879489"
            }
            else{
                lens.visibleOutsideMenuFlag = false;
                document.getElementById("wheelnav-piemenu-slice-2").style.fill = "#497F4C"
                document.getElementById(idOfHistogram).style.visibility = "hidden"
            }
        }

        ///////Z-ORDER/////

        function updateZORDER(){
            for(let ind = 0; ind <= lensArrayZORDER.length - 1; ind ++){
                lensesLayer.getLayer(lensArrayZORDER[ind].areaQuery._leaflet_id).bringToFront();
                console.log(lensArrayZORDER[ind].areaQuery)
            }
        }

        ///////TIME SELECTION/////
        function eveTimeEnd(lens){
            console.log("Got called 'save'")
            if(getUnixTime(lens.pickerEnd.get().value)/1000 > lens.getMinV() && evenTimeEndClicked == true){
                evenTimeEndClicked = false
                console.log("Value is ok will now update")
                lens.setMaxV(new Date(lens.pickerEnd.get().value).getTime()/1000);
                console.log("Value is ok will now update1")
                lens.updateLENS();
                console.log("Value is ok will now update2")
                lens.setMaxVOLD(lens.getMaxV());
            }
            else{
                console.log("WONT UPDATE")
                lens.setMaxV(lens.getMaxVOLD());
                lens.pickerEnd.set(lens.getMaxVOLD()*1000);
            }
        }
        function eveTimeStart(lens){
            // when the value changed
            console.log("Got called 'save'")
            if(getUnixTime(lens.pickerStart.get().value)/1000 < lens.getMaxV() && evenTimeStartClicked == true){
                evenTimeStartClicked = false
                console.log("Value is ok will now update")
                lens.setMinV(getUnixTime(lens.pickerStart.get().value)/1000);
                console.log("Value is ok will now update 1")
                lens.updateLENS();
                console.log("Value is ok will now update 2")
                lens.setMinVOLD(lens.getMinV());
            }
            else{
                console.log("WONT UPDATE")
                lens.setMinV(lens.getMinVOLD());
                lens.pickerStart.set(lens.getMinVOLD()*1000);

            }
        }

        function eveTimeToChange(lens){
            // when the value changed
            console.log("Got called 'change'")
            if(new Date(lens.pickerStart.get().value+":00").getTime()/1000!=lens.getMinVOLD() || new Date(lens.pickerEnd.get().value+":00").getTime()/1000!=lens.getMaxVOLD()){
                console.log(lens.pickerEnd.get() + " cenas " +  lens.pickerStart.get())
                var timeEndVar = new Date(lens.pickerEnd.get().year,lens.pickerEnd.get().month,lens.pickerEnd.get().day,lens.pickerEnd.get().hour,lens.pickerEnd.get().minute,0);
                var timeStartVar = new Date(lens.pickerStart.get().year,lens.pickerStart.get().month,lens.pickerStart.get().day,lens.pickerStart.get().hour,lens.pickerStart.get().minute,0);
                if (timeEndVar >= timeStartVar){
                    
                    console.log("Value is ok will now update")
                    lens.setMinV(timeStartVar.getTime()/1000);
                    lens.setMaxV(timeEndVar.getTime()/1000);
                    console.log(lens.pickerStart.get().value)
                    console.log(lens.pickerEnd.get().value)
                    console.log(lens.getMinV())
                    console.log(lens.getMaxV())
                    lens.updateLENS();
                    console.log("Value is ok will now update 2")
                    lens.setMinVOLD(lens.getMinV());
                    lens.setMaxVOLD(lens.getMaxV());
                }
                else{
                    console.log("Intervals were wrong")
                    cancelationButton(lens);
                }
            }
            else{
                console.log("WONT UPDATE, values didnt change")
                

            }
        }
        function cancelationButton(lens){
            lens.pickerStart.set(lens.getMinVOLD()*1000);
            lens.pickerEnd.set(lens.getMaxVOLD()*1000);
        }
        var _intervalsClickEffect = function(e){
            L.DomEvent.stopPropagation(e); 
            console.log("Interval click effect")
            document.getElementById("sliderIntervalDuration").style.display="none";
            document.getElementById("sliderIntervalLength").style.display="none";
            document.getElementById("sliderIntervalVel").style.display="none";
            //document.getElementById("timeSelectionMenu").style.visibility="hidden";
            map.on("click",_mapClickEffect)
        }
        /*function eveTimeChangeEnd(lens,previousValueEnd){
            // when the value changed
            console.log("Got called 'change'")
            if(lens.pickerEnd.get().value!=previousValueEnd  && getUnixTime(lens.pickerEnd.get().value)/1000 > lens.getMinV() && evenTimeEndClicked == true){
                previousValueEnd=lens.pickerEnd.get().value
                lens.pickerEnd.save()
                evenTimeEndClicked = false
                console.log("Value is ok will now update")
                lens.setMaxV(new Date(lens.pickerEnd.get().value).getTime()/1000);
                console.log("Value is ok will now update1")
                lens.updateLENS();
                console.log("Value is ok will now update2")
                lens.setMaxVOLD(lens.getMaxV());
            }
            else{
                console.log("WONT UPDATE")
                lens.setMaxV(lens.getMaxVOLD());
                lens.pickerEnd.set(lens.getMaxVOLD()*1000);
            }
        }*/



        //////////////////////////
        //////////////////////////
        //////////////////////////
        //////////TESTS///////////
        //////////////////////////
        //////////////////////////
        //////////////////////////

        document.addEventListener('keydown', function(e) {
            if (e.keyCode == 48){
                testsLayer.clearLayers()
            }
            if (e.keyCode == 49){//1
                testsLayer.clearLayers()
                var marker = L.marker([39.76210275375139, 2.726669311523438]).addTo(testsLayer);//any size, needs to use statistics menu which gives exact answer
            }
            else if (e.keyCode == 50){//2
                testsLayer.clearLayers()

                var marker = L.marker([39.79343340955507, 3.024901449680329]).addTo(testsLayer);//4.5Km
            }
            else if (e.keyCode == 51){//3
                testsLayer.clearLayers()
                var marker = L.marker([39.56950657835579, 3.281462788581848]).addTo(testsLayer);//9km----E a maior
            }
            else if (e.keyCode == 52){//4
                testsLayer.clearLayers()
                var marker = L.marker([39.74415422820842,3.3467102050781254]).addTo(testsLayer);//5.6km -- domingo
                
            }
            else if (e.keyCode == 53){//5
                testsLayer.clearLayers()
                var marker = L.marker([39.53650624031114,2.717203795909882]).addTo(testsLayer);//2.4km -- zona junto ao mar

            }
            else if (e.keyCode == 54){//6
                testsLayer.clearLayers()
                var marker = L.marker([39.557811060494615,2.676768153905869]).addTo(testsLayer);//0.5km --- 25 min+-
            }
        });





