extends layout
block content

    #map
    script.

        


        //Array that will save all the layers
        var layerArray = [];
    
        


        var map = L.map('map',{preferCanvas: true,renderer: L.canvas({}), center: [39.96964,116.33251], zoom: 10});
        map.createPane('lensPane');
        map.createPane('outtterLensPane');
        map.createPane('outtterLensDeletePane');
        map.createPane('velPane');
        map.createPane('areaPane');
        map.createPane('attLensPane');
        map.createPane('queryLensPane');
        map.createPane('queryLensPane1');
        map.createPane('queryLensPane2');
        map.createPane('queryLensPane3');
        map.getPane('lensPane').style.zIndex = 600;
        map.getPane('outtterLensPane').style.zIndex = 650;
        map.getPane('outtterLensDeletePane').style.zIndex = 700;
        map.getPane('attLensPane').style.zIndex = 450;
        map.getPane('queryLensPane').style.zIndex = 400;
        map.getPane('queryLensPane1').style.zIndex = 401;
        map.getPane('queryLensPane2').style.zIndex = 402;
        map.getPane('queryLensPane3').style.zIndex = 403;
        map.getPane('velPane').style.zIndex = 400;

        map.getPane('areaPane').style.zIndex = 900;
        var popup = L.popup();
        var popup2 = L.popup();

        var minValueVel;
        var maxValueVel;
        var minValueLength;
        var maxValueLength;
        var minValueTime;
        var maxValueTime;
        var minValueTimeDuration;
        var maxValueTimeDuration;

        //create array with all layers?

        var markerGroup  = L.featureGroup({pane: 'queryLensPane'}).addTo(map);
        var markerGroup1 = L.featureGroup({pane: 'queryLensPane1'}).addTo(map);
        var markerGroup2 = L.featureGroup({pane: 'queryLensPane2'}).addTo(map);
        var markerGroup3 = L.featureGroup({pane: 'queryLensPane3'}).addTo(map);
        
        var attLenResults = L.featureGroup({pane: 'attLensPane'}).addTo(map);

        var outterLensesLayer = L.featureGroup({pane: 'outtterLensPane'}).addTo(map);
        var lensesLayer = L.featureGroup({pane: 'lensPane'}).addTo(map);
        var areasLayer = L.featureGroup({pane: 'areaPane'}).addTo(map);
        

        var lensPreCreationLayer = L.layerGroup().addTo(map);
        
        var lastMarkerGroupID = null ;
        var lastMarkerGroupID1 = null ;
        var lastMarkerGroupID2 = null ;
        var lastMarkerGroupID3 = null ;
        var defaultLayerFlag = true;

        var createQueryLensesFlag = false;
        var createAttributeLensesFlag = false;

        var attributeFuncVar = "length";
        var encodingFuncVar = "color";

        var attLensesArray = [];

        //ALL black and dark grey
        L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_nolabels/{z}/{x}/{y}{r}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',
            subdomains: 'abcd',
            maxZoom: 19
        }).addTo(map);

        //var myData = jsonData;
        var myData = !{JSON.stringify(jsonData)};

        // Create variable to hold map element, give initial settings to map
        var customControlQ =  L.Control.extend({

        options: {
            position: 'topleft'
        },

        onAdd: function (map) {
            var container = L.DomUtil.create('div', 'leaflet-bar leaflet-control leaflet-control-custom');

            container.style.backgroundColor = 'white';     
            container.style.backgroundImage = "url(images/636051.svg)";
            container.style.backgroundSize = "30px 30px";
            container.style.width = '30px';
            container.style.height = '30px';

            container.onclick = function(e){
                L.DomEvent.stopPropagation(e); 
                if(!createAttributeLensesFlag){
                    createQueryLensesFlag = !createQueryLensesFlag;
                    if (createQueryLensesFlag){
                        container.style.backgroundColor = 'grey';
                    }
                    else{
                        container.style.backgroundColor = 'white';   
                    }
                }
            }

            return container;
        }
        });
        var customControlA =  L.Control.extend({

        options: {
            position: 'topleft'
        },

        onAdd: function (map) {
            var container = L.DomUtil.create('div', 'leaflet-bar leaflet-control leaflet-control-custom');

            container.style.backgroundColor = 'white';     
            //container.style.backgroundImage = "url(images/636051.svg)";
            container.style.backgroundSize = "30px 30px";
            container.style.width = '30px';
            container.style.height = '30px';

            container.onclick = function(e){
                L.DomEvent.stopPropagation(e); 
                if(!createQueryLensesFlag){
                    createAttributeLensesFlag = !createAttributeLensesFlag;
                    if (createAttributeLensesFlag){
                        container.style.backgroundColor = 'grey';
                    }
                    else{
                        container.style.backgroundColor = 'white';   
                    }
                }
            }

            return container;
        }
        });

        map.addControl(new customControlQ());
        map.addControl(new customControlA());
            
        var container = document.getElementsByClassName("leaflet-zoom-animated");
        container[0].onclick = function(e){
                L.DomEvent.stopPropagation(e);
        }
                

        
        //var defaultLayer = new L.GeoJSON().addTo(map);
        var firstStyle = {
            "color": '#43A7DF',
            "weight": 1.5
            
        };
        var firstStyleATT = {
            "color": '#43A7DF',
            "weight": 1.5,
            "pane": "attLensPane"
            
        };
     
        // Add JSON to map
        
        var defaultLayer = new L.geoJson(myData,firstStyle).addTo(map);
    
        map.on('zoomend', function() {
            console.log(map.getZoom())
            if (map.getZoom() >= 19){
                    markerGroup3.addTo(map);
            }
            else {
                if (map.hasLayer(markerGroup3)) {
                    map.removeLayer(markerGroup3);
                } else {
                    console.log("MarkerGroup3 not active");
                }
                if (map.getZoom() >= 17){
                    markerGroup2.addTo(map);
                }
                else {
                    if (map.hasLayer(markerGroup2)) {
                        map.removeLayer(markerGroup2);
                    } else {
                        console.log("MarkerGroup2 not active");
                    }
                    if (map.getZoom() >= 15){
                        markerGroup1.addTo(map);
                    }
                    else {
                        if (map.hasLayer(markerGroup1)) {
                            map.removeLayer(markerGroup1);
                        } else {
                            console.log("MarkerGroup1 not active");
                        }
                
                    }
                }
            }
            lensesLayer.bringToFront();
        });   
            

        function onMapClick(e) {// + "<input id='radiusBox' type='text' size='20'/>"
            if(createQueryLensesFlag){   
                queryLensMenu(e);
            }
            else if(createAttributeLensesFlag){
                attributeLensMenu(e);
            }
        }

        map.on('click', onMapClick);

        /////
        /////
        /////

        
        /////
        ///// Menus for lens creation
        /////

        function queryLensMenu(e){
            lensPreCreationLayer.clearLayers();
            var location= e.latlng;
            createLens(location.lng, location.lat, 1000,"Default",0,0).createLayers();
            /*var previewCircle = L.circle(e.latlng, {
                    color: 'red',
                    fillColor: '#f03',
                    fillOpacity: 0.5,
                    radius: 5000
                });
            previewCircle.addTo(lensPreCreationLayer);
            popup
                .setLatLng(e.latlng)
                .setContent("You clicked the map at " + e.latlng.toString() + 
                "<input id='radiusBox' type='range' min='1' max='10000' val='5000' />" + 
                "<input type='text' id='amountVel' readonly style=' border:0; color:#f6f31f1; font-weight:bold;'>" + 
                "<div id='maxMinBoundsVel'></div>" + 
                "<input type='text' id='amountLength' readonly style='width:250px; border:0; color:#669911; font-weight:bold;'>" + 
                "<div id='maxMinBoundsLength'></div>" +
                "<input type='text' id='amountTimeInterval' readonly style='width:310px; border:0; color:#f6931f; font-weight:bold;'>" + 
                "<div id='maxMinBoundsTimeInterval'></div>" + 
                "<input type='text' id='amountTimeDuration' readonly style='width:310px; border:0; color:#23339f; font-weight:bold;'>" + 
                "<div id='maxMinBoundsTimeDuration'></div>" + 
                "<input type='button' value='Create Pass by Lens' class='marker-create-button'/>" + 
                "<input type='button' value='Create Start point Lens' class='marker-create-Start-button'/>" + 
                "<input type='button' value='Create End point Lens' class='marker-create-End-button'/>" + 
                "<input type='button' value='Create average Velocity Lens' class='marker-create-VelocityAVG-button'/>" + 
                "<input type='button' value='Create Length Lens' class='marker-create-length-button'/>" + 
                "<input type='button' value='Create Time Interval Lens' class='marker-create-timeInterval-button'/>" +
                "<input type='button' value='Create Time Duration Lens' class='marker-create-timeDuration-button'/>").openOn(map);
            map.on('popupclose', function(e) {
                    lensPreCreationLayer.clearLayers();
                })
            var location= e.latlng;
            $('.marker-create-button').click(function () {
                console.log ($('#radiusBox').val() );
                if ($('#radiusBox').val() == "" || $('#radiusBox').val() <= 0 || $('#radiusBox').val() > 10000) {
                    popup2
                        .setLatLng(e.latlng)
                        .setContent("Fill with a value of 1 until 10000" )
                        .openOn(map);
                }
                else {
                    createLens(location.lng, location.lat, 5000,"Default",0,0).createLayers();
                }
            });
            $('.marker-create-Start-button').click(function () {
                console.log ($('#radiusBox').val() );
                if ($('#radiusBox').val() == "" || $('#radiusBox').val() <= 0 || $('#radiusBox').val() > 10000) {
                    popup2
                        .setLatLng(e.latlng)
                        .setContent("Fill with a value of 1 until 10000" )
                        .openOn(map);
                }
                else {
                    createQuery(location.lng, location.lat, $('#radiusBox').val(),"Start",0,0);
                }
            });
            $('.marker-create-End-button').click(function () {
                console.log ($('#radiusBox').val() );
                if ($('#radiusBox').val() == "" || $('#radiusBox').val() <= 0 || $('#radiusBox').val() > 10000) {
                    popup2
                        .setLatLng(e.latlng)
                        .setContent("Fill with a value of 1 until 10000" )
                        .openOn(map);
                }
                else {
                    createQuery(location.lng, location.lat, $('#radiusBox').val(),"End",0,0);
                }
            });
            $('.marker-create-VelocityAVG-button').click(function () {
                console.log ($('#radiusBox').val() );
                if ($('#radiusBox').val() == "" || $('#radiusBox').val() <= 0 || $('#radiusBox').val() > 10000) {
                    popup2
                        .setLatLng(e.latlng)
                        .setContent("Fill with a value of 1 until 10000" )
                        .openOn(map);
                }
                else {
                    createQuery(location.lng, location.lat, $('#radiusBox').val(),"Vel_avg",minValueVel,maxValueVel);
                }
            });
            $('.marker-create-length-button').click(function () {
                console.log ($('#radiusBox').val() );
                if ($('#radiusBox').val() == "" || $('#radiusBox').val() <= 0 || $('#radiusBox').val() > 10000) {
                    popup2
                        .setLatLng(e.latlng)
                        .setContent("Fill with a value of 1 until 10000" )
                        .openOn(map);
                }
                else {
                    createQuery(location.lng, location.lat, $('#radiusBox').val(),"Length",minValueLength,maxValueLength);
                }
            });
            $('.marker-create-timeInterval-button').click(function () {
                console.log ($('#radiusBox').val() );
                if ($('#radiusBox').val() == "" || $('#radiusBox').val() <= 0 || $('#radiusBox').val() > 10000) {
                    popup2
                        .setLatLng(e.latlng)
                        .setContent("Fill with a value of 1 until 10000" )
                        .openOn(map);
                }
                else {
                    createQuery(location.lng, location.lat, $('#radiusBox').val(),"Time_Interval",minValueTime,maxValueTime);
                }
            });
            $('.marker-create-timeDuration-button').click(function () {
                console.log ($('#radiusBox').val() );
                if ($('#radiusBox').val() == "" || $('#radiusBox').val() <= 0 || $('#radiusBox').val() > 10000) {
                    popup2
                        .setLatLng(e.latlng)
                        .setContent("Fill with a value of 1 until 10000" )
                        .openOn(map);
                }
                else {
                    createQuery(location.lng, location.lat, $('#radiusBox').val(),"Time_Duration",minValueTimeDuration,maxValueTimeDuration);
                }
            });
            
            $( function() {
                $( "#radiusValue" ).slider({
                range: true,
                min: 0,
                max: 500,
                values: [ 0, 500 ],
                slide: function( event, ui ) {
                    minValueVel =ui.values[ 0 ];
                    maxValueVel =ui.values[ 1 ];
                    $( "#amountVel" ).val( "Km/h " + ui.values[ 0 ] + " - Km/h " + ui.values[ 1 ] );
                }
                });
                $( "#amountVel" ).val( "Km/h" + $( "#slider-range" ).slider( "values", 0 ) +
                " - Km/h" + $( "#slider-range" ).slider( "values", 1 ) );
            } );

            $( function() {
                $( "#maxMinBoundsVel" ).slider({
                range: true,
                min: 0,
                max: 500,
                values: [ 0, 500 ],
                slide: function( event, ui ) {
                    minValueVel =ui.values[ 0 ];
                    maxValueVel =ui.values[ 1 ];
                    $( "#amountVel" ).val( "Km/h " + ui.values[ 0 ] + " - Km/h " + ui.values[ 1 ] );
                }
                });
                $( "#amountVel" ).val( "Km/h" + $( "#slider-range" ).slider( "values", 0 ) +
                " - Km/h" + $( "#slider-range" ).slider( "values", 1 ) );
            } );

            $( function() {
                $( "#maxMinBoundsLength" ).slider({
                range: true,
                min: 1,
                max: 500000,
                values: [ 1, 300000 ],
                slide: function( event, ui ) {
                    minValueLength =ui.values[ 0 ];
                    maxValueLength =ui.values[ 1 ];
                    $( "#amountLength" ).val( "Meters" + ui.values[ 0 ] + " - Meters" + ui.values[ 1 ] );
                }
                });
                $( "#amountLength" ).val( "Meters " + $( "#slider-range" ).slider( "values", 0 ) +
                " - Meters " + $( "#slider-range" ).slider( "values", 1 ) );
            } );

            $( function() {
                $( "#maxMinBoundsTimeInterval" ).slider({
                range: true,
                min: 1201959044 , // 2008-02-02 13:30:44
                max: 1202492358 , // 2008-02-08 17:39:18
                values: [ 1201959044 , 1202492358  ],
                slide: function( event, ui ) {
                    minValueTime =ui.values[ 0 ];
                    maxValueTime =ui.values[ 1 ];
                    $( "#amountTimeInterval" ).val(Unix_timestamp(minValueTime * 1000) + " - " + Unix_timestamp(maxValueTime * 1000) );
                }
                });
                $( "#amountTimeInterval" ).val($( "#slider-range" ).slider( "values", 0 ) +
                " - " + $( "#slider-range" ).slider( "values", 1 ) );
            } );

            $( function() {
                $( "#maxMinBoundsTimeDuration" ).slider({
                range: true,
                min: 0, // 2008-02-02 13:30:44
                max: 85839, // 2008-02-08 17:39:18
                values: [ 0, 85839 ],
                slide: function( event, ui ) {
                    minValueTimeDuration =ui.values[ 0 ];
                    maxValueTimeDuration =ui.values[ 1 ];
                    $( "#amountTimeDuration" ).val(minValueTimeDuration + " - " + maxValueTimeDuration);
                }
                });
                $( "#amountTimeDuration" ).val( "Min duration " + $( "#slider-range" ).slider( "values", 0 ) +
                " - Max time " + $( "#slider-range" ).slider( "values", 1 ) );
            } );

            $('#radiusBox').on('input',function(){
                var myVar = $(this).val();
                previewCircle.setRadius( myVar);
                
            });*/
        }
        async function attributeLensMenu(e){
            //lensPreCreationLayer.clearLayers();
            var holder = createALens(e.latlng, 1000,'time','color')
            holder = await holder.createAreas();
            //holder.createLayers();
        }

        /////
        /////
        /////

        /////
        ///// Create Lens' circle (lens it self)
        /////

        function createLens(lng, lat, radiusQuery, _type, minVal, maxVal){
            var lens = { type: _type, 
                areaQuery : L.circle([lat, lng], {
                    color: 'DarkRed',
                    fillColor: 'red',
                    fillOpacity: 0.6,
                    radius: radiusQuery,
                    pane: 'lensPane'
                }).addTo(lensesLayer),
                outsideCircle : null,
                lngLat : [lat,lng],
                radiusQuery : radiusQuery,
                type : _type,
                minV : minVal,
                maxV : maxVal,
                lngLatOLD : [lat,lng],
                radiusQueryOLD : radiusQuery,
                typeOLD : _type,
                minVOLD : minVal,
                maxVOLD : maxVal,
                lID : null,
                bounds : null,
                getMinV: function (){
                    return this.minV;
                },
                getMaxV: function (){
                    return this.maxV;
                },
                getType: function (){
                    return this.type;
                },
                setMinV: function (value){
                    this.minV = value;
                },
                setMaxV: function (value){
                    this.maxV = value;
                },
                setType: function (value){
                    this.type = value;
                },
                setLngLat : function (value){
                    this.lngLat = value;
                },
                getMinVOLD: function (){
                    return this.minVOLD;
                },
                getMaxVOLD: function (){
                    return this.maxVOLD;
                },
                getTypeOLD: function (){
                    return this.typeOLD;
                },
                setMinVOLD: function (value){
                    this.minVOLD = value;
                },
                setMaxVOLD: function (value){
                    this.maxVOLD = value;
                },
                setTypeOLD: function (value){
                    this.typeOLD = value;
                },
                setLngLatOLD : function (value){
                    this.lngLatOLD = value;
                },
                setBounds : function (value){
                    this.bounds = value;
                },
                setlID : function (value){
                    this.lID = value;
                },
                getLngLat : function (){
                    return this.lngLat;
                },
                getLngLatOLD : function (){
                    return this.lngLatOLD;
                },
                getBound : function (){
                    return this.bounds;
                },
                getlID : function (){
                    return this.lID;
                },
                setOutsideCircle: function(circle){
                    this.outsideCircle = circle;
                },
                setRadius : function (value){
                    this.areaQuery.setRadius(value);
                    this.radiusQuery = value;
                },
                getRadius : function (){
                    return this.radiusQuery;
                },
                setRadiusOLD : function (value){
                    this.radiusQueryOLD = value;
                },
                getRadiusOLD : function (){
                    return this.radiusQueryOLD;
                },
                colorSuccess : function() {
                    if(_type == "Default"){
                        console.log("I will now paint the Pass by circle again ....")
                        lens.areaQuery.setStyle({color: 'DodgerBlue', fillColor: 'DodgerBlue', fillOpacity: 0.2});
                    }
                    else if(_type == "Start"){
                        console.log("I will now paint the Start circle again ....")
                        lens.areaQuery.setStyle({color: 'MediumSeaGreen', fillColor: 'MediumSeaGreen', fillOpacity: 0.2});
                    }
                    else if(_type == "End"){
                        console.log("I will now paint the End circle again ....")
                        lens.areaQuery.setStyle({color: 'Violet', fillColor: 'Violet', fillOpacity: 0.2});
                    }
                    else if(_type == "Vel_avg"){
                        console.log("I will now paint the End circle again ....")
                        lens.areaQuery.setStyle({color: 'orange', fillColor: 'orange', fillOpacity: 0.2});
                    }
                    else if(_type == "Length"){
                        console.log("I will now paint the End circle again ....")
                        lens.areaQuery.setStyle({color: 'SlateBlue', fillColor: 'SlateBlue', fillOpacity: 0.2});
                    }
                    else if(_type == "Time_Interval"){
                        console.log("I will now paint the End circle again ....")
                        lens.areaQuery.setStyle({color: 'purple', fillColor: 'purple', fillOpacity: 0.2});
                    }
                    else if(_type == "Time_Duration"){
                        console.log("I will now paint the End circle again ....")
                        lens.areaQuery.setStyle({color: 'DarkTurquoise ', fillColor: 'DarkTurquoise ', fillOpacity: 0.2});
                    }
                },
                createLayers: function(){
                    //lensPreCreationLayer.clearLayers();
                    console.log("Im removing the map now and adding new ones afterwards")
                    if(defaultLayerFlag){
                        defaultLayerFlag = false;
                        map.removeLayer(defaultLayer);
                    }

                    if(lastMarkerGroupID !=null){
                        markerGroup.removeLayer(lastMarkerGroupID);
                        lastMarkerGroupID = null;
                    }
                    if(lastMarkerGroupID1 !=null){
                        markerGroup1.removeLayer(lastMarkerGroupID1);
                        lastMarkerGroupID1 = null;
                    }
                    if(lastMarkerGroupID2 !=null){
                        markerGroup2.removeLayer(lastMarkerGroupID2);
                        lastMarkerGroupID2 = null;
                    }
                    if(lastMarkerGroupID3 !=null){
                        markerGroup3.removeLayer(lastMarkerGroupID3);
                        lastMarkerGroupID3 = null;
                    }

                        // Create URL
                    var urlString3 = "query/trajectory_lines/"  + this.getLngLat()[1] + "/" + this.getLngLat()[0] + "/" + this.getRadius() + "/" + this.getType() + "/" + this.getMinV() + "/" + this.getMaxV();
                    var urlString2 = "query/trajectory_lines1/" + this.getLngLat()[1] + "/" + this.getLngLat()[0] + "/" + this.getRadius() + "/" + this.getType() + "/" + this.getMinV() + "/" + this.getMaxV();
                    var urlString1 = "query/trajectory_lines2/" + this.getLngLat()[1] + "/" + this.getLngLat()[0] + "/" + this.getRadius() + "/" + this.getType() + "/" + this.getMinV() + "/" + this.getMaxV();
                    var urlString  = "query/trajectory_lines3/" + this.getLngLat()[1] + "/" + this.getLngLat()[0] + "/" + this.getRadius() + "/" + this.getType() + "/" + this.getMinV() + "/" + this.getMaxV();
                    

                    var thisVar = this;

                    var newData = $.ajax({
                        url: urlString,
                        type: 'GET',
                        dataType:'json',
                        success: console.log("Data successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    }) 
                    $.when(newData).done(function() {
                        if(newData.responseJSON.features != null){
                            var tracksToDraw = L.geoJson(newData.responseJSON,firstStyle);
                            tracksToDraw.addTo(markerGroup);
                            lastMarkerGroupID = tracksToDraw._leaflet_id;
                            thisVar.colorSuccess();
                        }
                        lensesLayer.bringToFront();
                    }); 
                    var newData1 = $.ajax({
                        url: urlString1,
                        type: 'GET',
                        dataType:'json',
                        success: console.log("Data successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    }) 
                    $.when(newData1).done(function() {
                        if(newData1.responseJSON.features != null){
                            var tracksToDraw = L.geoJson(newData1.responseJSON,firstStyle);
                            tracksToDraw.addTo(markerGroup1);
                            lastMarkerGroupID1 = tracksToDraw._leaflet_id;
                            thisVar.colorSuccess();
                        }
                        lensesLayer.bringToFront();
                    });
                    var newData2 = $.ajax({
                        url: urlString2,
                        type: 'GET',
                        dataType:'json',
                        success: console.log("Data successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    }) 
                    $.when(newData2).done(function() {
                        if(newData2.responseJSON.features != null){
                            var tracksToDraw = L.geoJson(newData2.responseJSON,firstStyle);
                            tracksToDraw.addTo(markerGroup2);
                            lastMarkerGroupID2 = tracksToDraw._leaflet_id;
                            thisVar.colorSuccess();
                        }
                        lensesLayer.bringToFront();
                    });
                    var newData3 = $.ajax({
                        url: urlString3,
                        type: 'GET',
                        dataType:'json',
                        success: console.log("Data successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    }) 
                    $.when(newData3).done(function() {
                        if(newData3.responseJSON.features != null){
                            var tracksToDraw = L.geoJson(newData3.responseJSON,firstStyle);
                            tracksToDraw.addTo(markerGroup3);
                            lastMarkerGroupID3 = tracksToDraw._leaflet_id;
                            thisVar.colorSuccess();
                        }
                        lensesLayer.bringToFront();
                    });
                    
                    for(i = 0; i < attLensesArray.length; i++){
                        attLensesArray[i].updateALL();
                    };
                },
                deleteLayers: function(){
                    lensesLayer.removeLayer(lens.areaQuery);
                    if(lastMarkerGroupID !=null){
                        markerGroup.removeLayer(lastMarkerGroupID);
                        lastMarkerGroupID = null;
                    }
                    if(lastMarkerGroupID1 !=null){
                        markerGroup1.removeLayer(lastMarkerGroupID1);
                        lastMarkerGroupID1 = null;
                    }
                    if(lastMarkerGroupID2 !=null){
                        markerGroup2.removeLayer(lastMarkerGroupID2);
                        lastMarkerGroupID2 = null;
                    }
                    if(lastMarkerGroupID3 !=null){
                        markerGroup3.removeLayer(lastMarkerGroupID3);
                        lastMarkerGroupID3 = null;
                    }
                    var urlString3 = "queryRemoval/trajectory_lines/"  + this.getLngLat()[1] + "/" + this.getLngLat()[0] + "/" + this.getRadius() + "/" + this.getType()  + "/" + this.getMinV() + "/" + this.getMaxV();
                    var urlString2 = "queryRemoval/trajectory_lines1/" + this.getLngLat()[1] + "/" + this.getLngLat()[0] + "/" + this.getRadius() + "/" + this.getType()  + "/" + this.getMinV() + "/" + this.getMaxV();
                    var urlString1 = "queryRemoval/trajectory_lines2/" + this.getLngLat()[1] + "/" + this.getLngLat()[0] + "/" + this.getRadius() + "/" + this.getType()  + "/" + this.getMinV() + "/" + this.getMaxV();
                    var urlString  = "queryRemoval/trajectory_lines3/" + this.getLngLat()[1] + "/" + this.getLngLat()[0] + "/" + this.getRadius() + "/" + this.getType()  + "/" + this.getMinV() + "/" + this.getMaxV();
  
                    var newData = $.ajax({
                        url: urlString,
                        type: 'GET',
                        dataType:'json',
                        success: console.log("1 successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    })
                    $.when(newData).done(function() {
                        
                        console.log("Im removing the map now and adding new ones afterwards")
                        
                        if(newData.responseJSON.features != null){
                            var tracksToDraw = L.geoJson(newData.responseJSON,firstStyle);
                            tracksToDraw.addTo(markerGroup);
                            var idTracks = tracksToDraw._leaflet_id;
                            lastMarkerGroupID = tracksToDraw._leaflet_id;
                            
                        }
                        lensesLayer.bringToFront();
                        
                    });
                    var newData1 = $.ajax({
                        url: urlString1,
                        type: 'GET',
                        dataType:'json',
                        success: console.log("2 successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    })
                    $.when(newData1).done(function() {
                        
                        console.log("Im removing the map now and adding new ones afterwards")
                        
                        if(newData1.responseJSON.features != null){
                            var tracksToDraw = L.geoJson(newData1.responseJSON,firstStyle);
                            tracksToDraw.addTo(markerGroup1);
                            lastMarkerGroupID1 = tracksToDraw._leaflet_id;
                            
                        }
                        lensesLayer.bringToFront();
                    });
                    var newData2 = $.ajax({
                        url: urlString2,
                        type: 'GET',
                        dataType:'json',
                        success: console.log("3 successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    })
                    $.when(newData2).done(function() {
                        
                        console.log("Im removing the map now and adding new ones afterwards")
                        
                        if(newData2.responseJSON.features != null){
                            var tracksToDraw = L.geoJson(newData2.responseJSON,firstStyle);
                            tracksToDraw.addTo(markerGroup2);
                            lastMarkerGroupID2 = tracksToDraw._leaflet_id;
                            
                        }
                        lensesLayer.bringToFront();
                    });
                    var newData3 = $.ajax({
                        url: urlString3,
                        type: 'GET',
                        dataType:'json',
                        success: console.log("4 successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    })
                    $.when(newData3).done(function() {
                        
                        console.log("Im removing the map now and adding new ones afterwards")
                        
                        if(newData3.responseJSON.features != null){
                            var tracksToDraw = L.geoJson(newData3.responseJSON,firstStyle);
                            tracksToDraw.addTo(markerGroup3);
                            lastMarkerGroupID3 = tracksToDraw._leaflet_id;
                            
                        }
                        lensesLayer.bringToFront();
                    });

                    for(i = 0; i < attLensesArray.length; i++){
                        attLensesArray[i].updateALL();
                    };
                    
                },
                updateLENS: function(){
                    this.areaQuery.setStyle({color: 'DarkRed',fillColor: 'red',fillOpacity: 0.6});
                    var thisVar= this;
                    if(lastMarkerGroupID !=null){
                        markerGroup.removeLayer(lastMarkerGroupID);
                        lastMarkerGroupID = null;
                    }
                    if(lastMarkerGroupID1 !=null){
                        markerGroup1.removeLayer(lastMarkerGroupID1);
                        lastMarkerGroupID1 = null;
                    }
                    if(lastMarkerGroupID2 !=null){
                        markerGroup2.removeLayer(lastMarkerGroupID2);
                        lastMarkerGroupID2 = null;
                    }
                    if(lastMarkerGroupID3 !=null){
                        markerGroup3.removeLayer(lastMarkerGroupID3);
                        lastMarkerGroupID3 = null;
                    }
                    var urlString3 = "queryMoved/trajectory_lines/"  + this.getLngLatOLD()[1] + "/" + this.getLngLatOLD()[0] + "/" + this.getRadiusOLD() + "/" + this.getTypeOLD() + "/" + this.getMinVOLD() + "/" + this.getMaxVOLD()+"/"  + 
                    this.getLngLat()[1] + "/" + this.getLngLat()[0] + "/" + this.getRadius() + "/" + this.getType() + "/" + this.getMinV() + "/" + this.getMaxV();
                    var urlString2 = "queryMoved/trajectory_lines1/" + this.getLngLatOLD()[1] + "/" + this.getLngLatOLD()[0] + "/" + this.getRadiusOLD() + "/" + this.getTypeOLD() + "/" + this.getMinVOLD() + "/" + this.getMaxVOLD()+"/"  + 
                    this.getLngLat()[1] + "/" + this.getLngLat()[0] + "/" + this.getRadius() + "/" + this.getType() + "/" + this.getMinV() + "/" + this.getMaxV();
                    var urlString1 = "queryMoved/trajectory_lines2/" + this.getLngLatOLD()[1] + "/" + this.getLngLatOLD()[0] + "/" + this.getRadiusOLD() + "/" + this.getTypeOLD() + "/" + this.getMinVOLD() + "/" + this.getMaxVOLD()+"/"  + 
                    this.getLngLat()[1] + "/" + this.getLngLat()[0] + "/" + this.getRadius() + "/" + this.getType() + "/" + this.getMinV() + "/" + this.getMaxV();
                    var urlString  = "queryMoved/trajectory_lines3/" + this.getLngLatOLD()[1] + "/" + this.getLngLatOLD()[0] + "/" + this.getRadiusOLD() + "/" + this.getTypeOLD() + "/" + this.getMinVOLD() + "/" + this.getMaxVOLD()+"/"  + 
                    this.getLngLat()[1] + "/" + this.getLngLat()[0] + "/" + this.getRadius() + "/" + this.getType() + "/" + this.getMinV() + "/" + this.getMaxV();
                    
                    var newData = $.ajax({
                        url: urlString,
                        type: 'GET',
                        dataType:'json',
                        success: console.log("1 successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    })
                    $.when(newData).done(function() {
                        
                        console.log("Im removing the map now and adding new ones afterwards")
                        
                        if(newData.responseJSON.features != null){
                            var tracksToDraw = L.geoJson(newData.responseJSON,firstStyle);
                            tracksToDraw.addTo(markerGroup);
                            var idTracks = tracksToDraw._leaflet_id;
                            lastMarkerGroupID = tracksToDraw._leaflet_id;
                            thisVar.colorSuccess();
                        }
                        
                        lensesLayer.bringToFront();
                        
                    });
                    var newData1 = $.ajax({
                        url: urlString1,
                        type: 'GET',
                        dataType:'json',
                        success: console.log("2 successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    })
                    $.when(newData1).done(function() {
                        
                        console.log("Im removing the map now and adding new ones afterwards")
                        
                        if(newData1.responseJSON.features != null){
                            var tracksToDraw = L.geoJson(newData1.responseJSON,firstStyle);
                            tracksToDraw.addTo(markerGroup1);
                            lastMarkerGroupID1 = tracksToDraw._leaflet_id;
                            thisVar.colorSuccess();
                        }
                        lensesLayer.bringToFront();
                    });
                    var newData2 = $.ajax({
                        url: urlString2,
                        type: 'GET',
                        dataType:'json',
                        success: console.log("3 successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    })
                    $.when(newData2).done(function() {
                        
                        console.log("Im removing the map now and adding new ones afterwards")
                        
                        if(newData2.responseJSON.features != null){
                            var tracksToDraw = L.geoJson(newData2.responseJSON,firstStyle);
                            tracksToDraw.addTo(markerGroup2);
                            lastMarkerGroupID2 = tracksToDraw._leaflet_id;
                            thisVar.colorSuccess();
                        }
                        lensesLayer.bringToFront();
                    });
                    var newData3 = $.ajax({
                        url: urlString3,
                        type: 'GET',
                        dataType:'json',
                        success: console.log("4 successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    })
                    $.when(newData3).done(function() {
                        
                        console.log("Im removing the map now and adding new ones afterwards")
                        
                        if(newData3.responseJSON.features != null){
                            var tracksToDraw = L.geoJson(newData3.responseJSON,firstStyle);
                            tracksToDraw.addTo(markerGroup3);
                            lastMarkerGroupID3 = tracksToDraw._leaflet_id;
                            thisVar.colorSuccess();
                        }
                        lensesLayer.bringToFront();
                    });

                    for(i = 0; i < attLensesArray.length; i++){
                        attLensesArray[i].updateALL();
                    };

                }
            };
            
            lens.setBounds(lens.areaQuery.getBounds());

            

            /*CALCULATE THE DISTANCE FROM ONE POINT TO ANOTHER IN PIXELS
            var northVar = map.latLngToLayerPoint(lens.areaQuery.getBounds().getNorthWest());
            var southVar = map.latLngToLayerPoint(lens.areaQuery.getBounds().getSouthWest());
            var numOfPixl = northVar.distanceTo(southVar);*/
            var myOutsideCircle = L.divIcon({className: 'outside-Circle', iconSize: [100,100],iconAnchor:[90,90], html: 
                "<input type='button' value='X' class='myDeleteButton' style='z-index: 1000;     position: fixed;margin: -16%;'/>"+
                "<div class='dropdown' style='        margin-left: -9.5%; margin-top: 87.5%;'><button class='dropbtn'><img src='images/type.png' style='width: 20px; height: 20px;   margin: inherit;margin-left: -1px;margin-top: -1px;'></button><div class='dropdown-content'>" + 
                "<button class='dropbtnOpt-default'>Pass by</button>"+
                "<button class='dropbtnOpt-start'>Start point</button>"+
                "<button class='dropbtnOpt-end'>End point</button>"+
                "<button class='dropbtnOpt-duration'>Duration</button>"+
                "<button class='dropbtnOpt-time'>Time</button>"+
                "<button class='dropbtnOpt-length'>Length</button>"+
                "<button class='dropbtnOpt-velocity'>Average velocity</button>"+
                "</div></div>" +
                "<button class='myIntervalsButton' style='z-index: 1025; position:fixed;     margin-left: 81.5%;margin-top: 83%;'><img src='images/intervals.png' style='z-index: 999;width: 20px;height: 20px;    margin: inherit;margin-left: -1px;margin-top: -1px;'></button>"+
                "<button class='myRadiusButton' style='z-index: 1019; position:fixed;     margin-left: 78.5%; margin-top: -19%;'><img src='images/radius.png' style='z-index: 999;width: 25px;height: 25px;    margin: inherit;margin-left: -3px;margin-top: -4px;'></button>"+
                "<div id='sliderRadius' style='z-index:1018;left:-80px; top:-80px;display:none;'></div>"+
                "<div id='sliderIntervalVel' style='z-index:1020;left:-80px; top:-80px;display:none;'></div>"+
                "<div id='sliderIntervalLength' style='z-index:1021;left:-80px; top:-80px;display:none;'></div>"+
                "<div id='sliderIntervalDuration' style='z-index:1022;left:-80px; top:-80px;display:none;'></div>"+
                "<div id='sliderIntervalTime' style='z-index:1023;left:-80px; top:-80px;display:none;'></div>"
                /*"<input type='text' id='amountVel' readonly style=' border:0; color:#f6f31f1; font-weight:bold;'>" + 
                "<div id='maxMinBoundsVel' style='width:50px;height:50px'></div>" + 
                "<input type='text' id='amountLength' readonly style='width:50px; border:0; color:#669911; font-weight:bold;'>" + 
                "<div id='maxMinBoundsLength' style='width:50px;height:50px'></div>" +
                "<input type='text' id='amountTimeInterval' readonly style='width:50; border:0; color:#f6931f; font-weight:bold;'>" + 
                "<div id='maxMinBoundsTimeInterval' style='width:50px;height:50px'></div>" + 
                "<input type='text' id='amountTimeDuration' readonly style='width:50; border:0; color:#23339f; font-weight:bold;'>" + 
                "<div id='maxMinBoundsTimeDuration' style='width:50px;height:50px'></div>"*/ 
                //"<div class='dropdown'style='margin-left: 102.5%; margin-top: 75%;'><button class='dropbtn'><img src='images/encoding.png' style='width: 15px; height: 17px;'></button><div class='dropdown-content'>"
            });
            
            console.log(myOutsideCircle.options);
            var outsideCircVar = L.marker(lens.getLngLat(), {icon: myOutsideCircle, pane: 'outtterLensPane'});
            lens.setOutsideCircle(outsideCircVar);
            

            /*$( function() {
                $( "#maxMinBoundsVel" ).slider({
                range: true,
                min: 0,
                max: 500,
                values: [ 0, 500 ],
                slide: function( event, ui ) {
                    minValueVel =ui.values[ 0 ];
                    maxValueVel =ui.values[ 1 ];
                    $( "#amountVel" ).val( "Km/h " + ui.values[ 0 ] + " - Km/h " + ui.values[ 1 ] );
                }
                });
                $( "#amountVel" ).val( "Km/h" + $( "#slider-range" ).slider( "values", 0 ) +
                " - Km/h" + $( "#slider-range" ).slider( "values", 1 ) );
            } );

            $( function() {
                $( "#maxMinBoundsLength" ).slider({
                range: true,
                min: 1,
                max: 500000,
                values: [ 1, 300000 ],
                slide: function( event, ui ) {
                    minValueLength =ui.values[ 0 ];
                    maxValueLength =ui.values[ 1 ];
                    $( "#amountLength" ).val( "Meters" + ui.values[ 0 ] + " - Meters" + ui.values[ 1 ] );
                }
                });
                $( "#amountLength" ).val( "Meters " + $( "#slider-range" ).slider( "values", 0 ) +
                " - Meters " + $( "#slider-range" ).slider( "values", 1 ) );
            } );

            $( function() {
                $( "#maxMinBoundsTimeInterval" ).slider({
                range: true,
                min: 1201959044 , // 2008-02-02 13:30:44
                max: 1202492358 , // 2008-02-08 17:39:18
                values: [ 1201959044 , 1202492358  ],
                slide: function( event, ui ) {
                    minValueTime =ui.values[ 0 ];
                    maxValueTime =ui.values[ 1 ];
                    $( "#amountTimeInterval" ).val(Unix_timestamp(minValueTime * 1000) + " - " + Unix_timestamp(maxValueTime * 1000) );
                }
                });
                $( "#amountTimeInterval" ).val($( "#slider-range" ).slider( "values", 0 ) +
                " - " + $( "#slider-range" ).slider( "values", 1 ) );
            } );

            $( function() {
                $( "#maxMinBoundsTimeDuration" ).slider({
                range: true,
                min: 0, // 2008-02-02 13:30:44
                max: 85839, // 2008-02-08 17:39:18
                values: [ 0, 85839 ],
                slide: function( event, ui ) {
                    minValueTimeDuration =ui.values[ 0 ];
                    maxValueTimeDuration =ui.values[ 1 ];
                    $( "#amountTimeDuration" ).val(minValueTimeDuration + " - " + maxValueTimeDuration);
                }
                });
                $( "#amountTimeDuration" ).val( "Min duration " + $( "#slider-range" ).slider( "values", 0 ) +
                " - Max time " + $( "#slider-range" ).slider( "values", 1 ) );
            } );*/
                        
            var movedPos = false;
            var movedRadius = false;
            var movedOthers = false;
            lens.outsideCircle.on({
                dbclick:function(e){
                    L.DomEvent.stopPropagation(e);
                },
                click : function(e){
                    L.DomEvent.stopPropagation(e);
                },
                mousedown: function () {
                    
                    map.on('mousemove', function (e) {
                        map.dragging.disable();
                        movedPos = true;
                        lens.areaQuery.setLatLng(e.latlng);
                        lens.outsideCircle.setLatLng(e.latlng);
                    });
                },
                mouseup: function(e){
                    map.removeEventListener('mousemove');
                    if(movedPos){ 
                        movedPos = false;   
                        map.dragging.enable();
                    
                        lens.setLngLat([e.latlng.lat,e.latlng.lng]);
                        lens.updateLENS();
                        lens.setLngLatOLD([e.latlng.lat,e.latlng.lng]);
                        lens.setBounds(lens.areaQuery.getBounds());
                        for(i = 0; i < attLensesArray.length; i++){
                            attLensesArray[i].updateALL();
                        };
                    }
                },
                mouseout:function(){
                    outterLensesLayer.removeLayer(lens.outsideCircle);
                }
            });
            lens.areaQuery.on({
                dbclick:function(e){
                    L.DomEvent.stopPropagation(e);
                },
                click: function(e){
                    L.DomEvent.stopPropagation(e);
                    outterLensesLayer.addLayer(lens.outsideCircle);
                    $('.myDeleteButton').click(function (e) {
                    
                        lens.deleteLayers();
                        for(i = 0; i < attLensesArray.length; i++){
                            attLensesArray[i].updateALL();
                        };
                    });

                    $('.myIntervalsButton').click(function(e){
                        if(document.getElementById("sliderRadius").style.display=='none'){
                            if(lens.getType() == "Vel_avg") {
                                if(document.getElementById("sliderIntervalVel").style.display=='none'){
                                    document.getElementById("sliderIntervalVel").style.display="block";

                                    var $sliderIntervalVel = $('#sliderIntervalVel');
                                    $sliderIntervalVel.mousedown( function (e){
                                        //TODO VELOCITY REMOVING BADLY??
                                        L.DomEvent.stopPropagation(e);
                                        map.dragging.disable();
                                        e.originalEvent.preventDefault();
                                    });
                                }
                                else document.getElementById("sliderIntervalVel").style.display="none";
                            }
                            if(lens.getType() == "Length") {
                                if(document.getElementById("sliderIntervalLength").style.display=='none'){
                                    document.getElementById("sliderIntervalLength").style.display="block";

                                    var $sliderIntervalLength = $('#sliderIntervalLength');
                                    $sliderIntervalLength.mousedown( function (e){
                                        //TODO VELOCITY REMOVING BADLY??
                                        L.DomEvent.stopPropagation(e);
                                        map.dragging.disable();
                                        e.originalEvent.preventDefault();
                                    });
                                }
                                else document.getElementById("sliderIntervalLength").style.display="none";
                            }
                            if(lens.getType() == "Time_Duration") {
                                if(document.getElementById("sliderIntervalDuration").style.display=='none'){
                                    document.getElementById("sliderIntervalDuration").style.display="block";

                                    var $sliderIntervalDuration = $('#sliderIntervalDuration');
                                    $sliderIntervalDuration.mousedown( function (e){
                                        //TODO VELOCITY REMOVING BADLY??
                                        L.DomEvent.stopPropagation(e);
                                        map.dragging.disable();
                                        e.originalEvent.preventDefault();
                                    });
                                }
                                else document.getElementById("sliderIntervalDuration").style.display="none";
                            }
                            if(lens.getType() == "Time_Interval") {
                                if(document.getElementById("sliderIntervalTime").style.display=='none'){
                                    document.getElementById("sliderIntervalTime").style.display="block";

                                    var $sliderIntervalTime = $('#sliderIntervalTime');
                                    $sliderIntervalTime.mousedown( function (e){
                                        //TODO VELOCITY REMOVING BADLY??
                                        L.DomEvent.stopPropagation(e);
                                        map.dragging.disable();
                                        e.originalEvent.preventDefault();
                                    });
                                }
                                else document.getElementById("sliderIntervalTime").style.display="none";
                            }
                        } 
                        
                        $(function(){
                            $("#sliderIntervalVel").roundSlider({
                                sliderType: "range",
                                radius: "130px",
                                value: lens.getMinV() + "," + lens.getMaxV(),
                                min: 0,
                                max: 250,
                                //lineCap: "round",
                                width: 5,
                                editableTooltip: false,
                                handleSize: "+10",
                                handleShape: "dot",
                                drag: function (e) {
                                    L.DomEvent.stopPropagation(e);
                                    
                                    var index = e.value.indexOf(",");  // Gets the first index where a , occours
                                    var firstPart = e.value.substr(0, index); // Gets the first part
                                    var secondPart = e.value.substr(index + 1);  // Gets the text part
                                    lens.setMinV(firstPart);
                                    lens.setMaxV(secondPart);
                                    console.log(lens.getMinV());
                                    console.log(lens.getMaxV());
                                },
                                start: function(e) {
                                    
                                },
                                stop: function (e) {
                                    L.DomEvent.stopPropagation(e);
                                    map.dragging.enable();
                                    lens.updateLENS();
                                    lens.setMinVOLD(lens.getMinV());
                                    lens.setMaxVOLD(lens.getMaxV());
                                }
                            });
                            
                            $("#sliderIntervalLength").roundSlider({
                                sliderType: "range",
                                radius: "130px",
                                value: lens.getMinV() + "," + lens.getMaxV(),
                                min: 1,
                                max: 500000,
                                //lineCap: "round",
                                width: 5,
                                editableTooltip: false,
                                handleSize: "+10",
                                handleShape: "dot",
                                drag: function (e) {
                                    L.DomEvent.stopPropagation(e);
                                    
                                    var index = e.value.indexOf(",");  // Gets the first index where a , occours
                                    var firstPart = e.value.substr(0, index); // Gets the first part
                                    var secondPart = e.value.substr(index + 1);  // Gets the text part
                                    lens.setMinV(firstPart);
                                    lens.setMaxV(secondPart);
                                    console.log(lens.getMinV());
                                    console.log(lens.getMaxV());
                                },
                                start: function(e) {
                                    
                                },
                                stop: function (e) {
                                    L.DomEvent.stopPropagation(e);
                                    map.dragging.enable();
                                    lens.updateLENS();
                                    lens.setMinVOLD(lens.getMinV());
                                    lens.setMaxVOLD(lens.getMaxV());
                                }
                            });
                            
                            $("#sliderIntervalDuration").roundSlider({
                                sliderType: "range",
                                radius: "130px",
                                value: lens.getMinV() + "," + lens.getMaxV(),
                                min: 0, // 2008-02-02 13:30:44
                                max: 85839, // 2008-02-08 17:39:18
                                //lineCap: "round",
                                width: 5,
                                editableTooltip: false,
                                handleSize: "+10",
                                handleShape: "dot",
                                drag: function (e) {
                                    L.DomEvent.stopPropagation(e);
                                    
                                    var index = e.value.indexOf(",");  // Gets the first index where a , occours
                                    var firstPart = e.value.substr(0, index); // Gets the first part
                                    var secondPart = e.value.substr(index + 1);  // Gets the text part
                                    lens.setMinV(firstPart);
                                    lens.setMaxV(secondPart);
                                    console.log(lens.getMinV());
                                    console.log(lens.getMaxV());
                                },
                                start: function(e) {
                                    
                                },
                                stop: function (e) {
                                    L.DomEvent.stopPropagation(e);
                                    map.dragging.enable();
                                    lens.updateLENS();
                                    lens.setMinVOLD(lens.getMinV());
                                    lens.setMaxVOLD(lens.getMaxV());
                                }
                            });
                            
                            $("#sliderIntervalTime").roundSlider({
                                sliderType: "range",
                                radius: "130px",
                                value: lens.getMinV() + "," + lens.getMaxV(),
                                min: 1201959044 , // 2008-02-02 13:30:44
                                max: 1202492358 , // 2008-02-08 17:39:18
                                //lineCap: "round",
                                width: 5,
                                editableTooltip: false,
                                handleSize: "+10",
                                handleShape: "dot",
                                drag: function (e) {
                                    L.DomEvent.stopPropagation(e);
                                    
                                    var index = e.value.indexOf(",");  // Gets the first index where a , occours
                                    var firstPart = e.value.substr(0, index); // Gets the first part
                                    var secondPart = e.value.substr(index + 1);  // Gets the text part
                                    lens.setMinV(firstPart);
                                    lens.setMaxV(secondPart);
                                    console.log(lens.getMinV());
                                    console.log(lens.getMaxV());
                                },
                                start: function(e) {
                                    
                                },
                                stop: function (e) {
                                    L.DomEvent.stopPropagation(e);
                                    map.dragging.enable();
                                    lens.updateLENS();
                                    lens.setMinVOLD(lens.getMinV());
                                    lens.setMaxVOLD(lens.getMaxV());
                                }
                            });
                        });
                    });
                     

                    $('.myRadiusButton').click(function (e) {
                        L.DomEvent.stopPropagation(e); 
                        if(document.getElementById("sliderRadius").style.display=='none' && document.getElementById("sliderRadius").style.display=='none'){
                            document.getElementById("sliderRadius").style.display="block";
                            var $sliderRadius = $('#sliderRadius');
                            $sliderRadius.mousedown( function (e){
                                //TODO VELOCITY REMOVING BADLY??
                                L.DomEvent.stopPropagation(e);
                                map.dragging.disable();
                                e.originalEvent.preventDefault();
                            });
                            $(function(){
                                $("#sliderRadius").roundSlider({
                                    sliderType: "min-range",
                                    radius: "130px",
                                    value: lens.getRadius(),
                                    min: 0,
                                    max: 10000,
                                    //lineCap: "round",
                                    width: 5,
                                    editableTooltip: false,
                                    handleSize: "+10",
                                    handleShape: "dot",
                                    drag: function (e) {
                                        L.DomEvent.stopPropagation(e);
                                        lens.setRadius(e.value); 
                                    },
                                    start: function(e) {
                                    },
                                    stop: function (e) {
                                        L.DomEvent.stopPropagation(e);
                                        map.dragging.enable();
                                        lens.updateLENS();
                                        lens.setBounds(lens.areaQuery.getBounds());
                                        for(i = 0; i < attLensesArray.length; i++){
                                            attLensesArray[i].updateALL();
                                        };
                                        lens.setRadiusOLD(lens.getRadius());
                                    }
                                });
                            }); 
                            
                        }
                        else{
                            document.getElementById("sliderRadius").style.display="none";
                        }

                    }); 
                    
                    $('.dropbtnOpt-default').click(function () {
                            lens.setType("Default");
                            lens.setMinV(0);
                            lens.setMaxV(0);
                            lens.updateLENS();
                            lens.setTypeOLD("Default");
                            lens.setMinVOLD(0);
                            lens.setMaxVOLD(0);
                    });
                    $('.dropbtnOpt-start').click(function () {
                            lens.setType("Start");
                            lens.setMinV(0);
                            lens.setMaxV(0);
                            lens.updateLENS();
                            lens.setTypeOLD("Start");
                            lens.setMinVOLD(0);
                            lens.setMaxVOLD(0);
                    });
                    $('.dropbtnOpt-end').click(function () {
                            lens.setType("End");
                            lens.setMinV(0);
                            lens.setMaxV(0);
                            lens.updateLENS();
                            lens.setTypeOLD("End");
                            lens.setMinVOLD(0);
                            lens.setMaxVOLD(0);
                    });
                    $('.dropbtnOpt-length').click(function () {
                            
                            lens.setType("Length");
                            lens.setMinV(1);
                            lens.setMaxV(500000);
                            lens.updateLENS();
                            lens.setTypeOLD("Length");
                            lens.setMinVOLD(1);
                            lens.setMaxVOLD(500000);
                    });
                    $('.dropbtnOpt-velocity').click(function () {
                            lens.setType("Vel_avg");
                            lens.setMinV(0);
                            lens.setMaxV(250);
                            lens.updateLENS();
                            lens.setTypeOLD("Vel_avg");
                            lens.setMinVOLD(0);
                            lens.setMaxVOLD(250);
                    });
                    $('.dropbtnOpt-time').click(function () {
                            lens.setType("Time_Interval");
                            lens.setMinV(1201959044);
                            lens.setMaxV(1202492358);
                            lens.updateLENS();
                            lens.setTypeOLD("Time_Interval");
                            lens.setMinVOLD(1201959044);
                            lens.setMaxVOLD(1202492358);
                    });
                    $('.dropbtnOpt-duration').click(function () {
                            lens.setType("Time_Duration");
                            lens.setMinV(0);
                            lens.setMaxV(85839);
                            lens.updateLENS();
                            lens.setTypeOLD("Time_Duration");
                            lens.setMinVOLD(0);
                            lens.setMaxVOLD(85839);
                    });  
 
                }
            }); 
            /*lens.areaQuery.bindPopup("<input type='button' value='Delete this lens' class='marker-delete-button'/>")
            lens.areaQuery.on("popupopen", function() {
                //var tempMarkerGeoJSON = this.toGeoJSON();

                //var lID = tempMarker._leaflet_id; // Getting Leaflet ID of this marker

                // To remove marker on click of delete
                $('.marker-delete-button:visible').click(function () {
                    lensesLayer.removeLayer(lens.areaQuery);
                    
                    if(lastMarkerGroupID !=null){
                        markerGroup.removeLayer(lastMarkerGroupID);
                        lastMarkerGroupID = null;
                    }
                    if(lastMarkerGroupID1 !=null){
                        markerGroup1.removeLayer(lastMarkerGroupID1);
                        lastMarkerGroupID1 = null;
                    }
                    if(lastMarkerGroupID2 !=null){
                        markerGroup2.removeLayer(lastMarkerGroupID2);
                        lastMarkerGroupID2 = null;
                    }
                    if(lastMarkerGroupID3 !=null){
                        markerGroup3.removeLayer(lastMarkerGroupID3);
                        lastMarkerGroupID3 = null;
                    }
                    deleteQuery(lng, lat, radiusQuery, _type, minVal, maxVal);
                    attLensesArray.forEach(function(item, index, array) {
                        item.updateALL();
                    });
                });
                    
            }) ; */
            
            return lens
        }

        function createALens(lngLat, radiusQuery, _attribute, _encoding){
            var lens = { 
                areaQuery : L.circle([lngLat.lat, lngLat.lng], {
                    color: 'DarkRed',
                    fillColor: 'red',
                    fillOpacity: 0.6,
                    radius: radiusQuery,
                    pane: 'lensPane'
                }).addTo(lensesLayer),
                outsideCircle : null,
                lngLat : lngLat,
                radiusQuery : radiusQuery,
                lID : null,
                att : _attribute,
                enc : _encoding,
                intersections: [],
                areas: [],
                bounds : null,
                addIntersection: function (obj){
                    this.intersections.push(obj);
                },
                removeIntersection: function (obj){
                    for(var i = this.intersections.length - 1; i >= 0; i--) {
                        if(this.intersections[i] === obj) {
                            this.intersections.splice(i, 1);
                            return true;
                        }
                    }
                    return false;
                },
                addArea: function (obj){
                    this.areas.push(obj);
                },
                removeArea: function (obj){
                    for(var i = this.areas.length - 1; i >= 0; i--) {
                        if(this.areas[i] === obj) {
                            this.areas.splice(i, 1);
                            return true;
                        }
                    }
                    return false;
                },
                setLngLat : function (value){
                    this.lngLat = value;
                },
                setBounds : function (value){
                    this.bounds = value;
                },
                setlID : function (value){
                    this.lID = value;
                },
                getLngLat : function (){
                    return this.lngLat;
                },
                getBound : function (){
                    return this.bounds;
                },
                getlID : function (){
                    return this.lID;
                },
                setOutsideCircle: function(circle){
                    this.outsideCircle = circle;
                },
                setRadius : function (value){
                    this.areaQuery.setRadius(value);
                    this.radiusQuery = value;
                },
                getRadius : function (){
                    return this.radiusQuery;
                },
                colorSuccess : function() {
                    //if(_attribute == "length"){
                    console.log("I will now paint the Pass by circle again ....")
                    this.areaQuery.setStyle({color: '#FFFFFF', fillColor: '#FFFFFF', fillOpacity: 0.01});
                    
                },
                updateLayer : function(layer, value){
                    //var layersActive = layersWithin(map, layer, lngLat, pixelsInRadius)
                    //TODO
                    switch(this.att) {
                        case "length":
                            lengthAtt(layer, value,this.enc);
                            break;
                        case "duration":
                            durationAtt(layer,value, this.enc);
                            break;
                        case "vel":
                            velocityAtt(layer,value,this.enc);
                            break;
                        case "time":
                            timeAtt(layer,value, this.enc);
                            break;
                    }   
                },
                addIntersections : function(){
                    for(i=0; i< attLensesArray.length;i++){
                        if(this.areaQuery.getBounds().intersects(attLensesArray[i].areaQuery.getBounds())){
                            this.addIntersection(attLensesArray[i]);
                        }
                    }
                    attLensesArray.push(this);
                },
                createAreas : function(){
                    this.addIntersections();
                    var radius = this.getRadius()/1000;
                    var options = {steps: 32,units: 'kilometers'};
                    var circle = turf.circle([this.getLngLat().lng, this.getLngLat().lat], radius, options);
                    
                    var firstArea = creaAttAreas(circle);
                    firstArea.addLens(this);
                    this.addArea(firstArea);
                    var areaCounnt =1;
                    var numberOfAreasVisited = 0;
                    var conaca = 0;
                    var thisVar = this;
                    recursiveArea(thisVar, this.intersections.length - 1, 0);
                    
                   
                    return thisVar;
                },
                createLayers : function(){
                    this.areas.forEach(function(eachArea, index, array) {
                        eachArea.createLayers();
                    });
                    this.colorSuccess();
                },
                updateALL : function (){
                    //TODO CHAMAR ARRAY DE TRAS PARA A FRENTE PARA NAO TER DE FAZER VERIFICACOES  
                    this.deleteLayers();
                    /*this.updateOthersV2(false);
                    this.createAreas();*/
                    this.createLayers();
                },
                updateLENS : function(attORenc , value){
                    //Will check if any of the lenses if any of the intersections has an area wich recieves the styling from it
                    var foundMyself = false;
                    console.log(attLensesArray);
                    for(var i = 0;i<attLensesArray.length ;i++) {
                        console.log("I entered the array");
                        console.log(attLensesArray[i]);
                        if(attLensesArray[i] === this) {
                            console.log("Found the lens");
                            foundMyself = true;
                        }
                        else if(foundMyself){
                            for(var j = 0; j < attLensesArray[i].intersections.length; j++) {
                                if(attLensesArray[i].intersections[j] === this){
                                    if(attORenc){
                                        attLensesArray[i].intersections[j].att = value;
                                    }
                                    //False for encoding
                                    else{
                                        attLensesArray[i].intersections[j].enc = value;
                                    }
                                    attLensesArray[i].areas.forEach( function(item,index,array){
                                        item.updateLayer();
                                    });
                                }
                            }
                        }

                    }
                    //True for attriute
                    if(attORenc){
                        this.att = value;
                    }
                    //False for encoding
                    else{
                        this.enc = value;
                    }
                    this.areas.forEach( function(item,index,array){
                        console.log(item.getlID());
                        item.updateLayer();
                    });
                },
                delete: function(){
                    for(var areaIndex = this.areas.length - 1;areaIndex>=0; areaIndex--){
                        this.areas[areaIndex].delete();
                        this.areas.pop();
                    }
                },
                deleteLayers: function(){
                    for(var areaIndex = this.areas.length - 1;areaIndex>=0; areaIndex--){
                        this.areas[areaIndex].delete();
                    }
                },
                removeFromAttLen : function(){
                    for(var i = attLensesArray.length - 1; i >= 0; i--) {
                        console.log("im in updateOthers");
                        if(attLensesArray[i] === this) {
                            console.log("i will splice the attLensesArray");
                            attLensesArray.splice(i, 1);
                            console.log(attLensesArray);
                            break;
                        }
                    }
                },
                updateOthersV2 : function( onlyRemoveInter ){
                    //true if areas need to e updated
                    this.removeFromAttLen();
                    for(i = 0; i<attLensesArray.length; i++){
                        console.log("AAAAAAAIXO");
                        console.log(attLensesArray[i]);
                        if(attLensesArray[i].removeIntersection(this)) {
                            if(onlyRemoveInter){
                                console.log(attLensesArray[i]);
                                console.log("CIMAAAAAAAA");
                                for(let areaIndex = 1;areaIndex < attLensesArray[i].areas.length; areaIndex++){
                                    var flag = attLensesArray[i].areas[areaIndex].removeLens(this);
                                    console.log(flag);
                                }
                                for(let areaIndex = 1;areaIndex < attLensesArray[i].areas.length; areaIndex++){
                                    if(attLensesArray[i].areas[areaIndex].getLensArray().length == 1){
                                        //IF ERROR APPEArS WHERE SOME PARTS ARE somewhat forgotten it might mean that splice allows for a jump?
                                        console.log("AGORA VOU MOSTRAR Os ARRAYs a JUNTAR");
                                        console.log(attLensesArray[i].areas[0].area);
                                        console.log(attLensesArray[i].areas[areaIndex].area);
                                        console.log("Before union");
                                        var unionVar = turf.union(attLensesArray[i].areas[0].area, attLensesArray[i].areas[areaIndex].area);
                                        console.log("After union");
                                        attLensesArray[i].areas[0].setArea(unionVar);
                                        attLensesArray[i].areas[areaIndex].delete();
                                        attLensesArray[i].areas[0].delete();
                                        attLensesArray[i].areas.splice(areaIndex, 1);
                                        attLensesArray[i].areas[0].createLayers();
                                    }
                                    else{
                                        for(let ind = 1;ind < attLensesArray[i].areas.length; ind++){
                                            if(areaIndex != ind) {  

                                                if(isEqual(attLensesArray[i].areas[areaIndex].getLensArray(),attLensesArray[i].areas[ind].getLensArray())){
                                                    console.log("isEQUAL ALRIGHTY");
                                                    console.log(attLensesArray[i].areas[ind].getLensArray());
                                                    console.log(attLensesArray[i].areas[areaIndex].getLensArray());
                                                    console.log("Before union");
                                                    var unionVar = turf.union(attLensesArray[i].areas[ind].area, attLensesArray[i].areas[areaIndex].area);
                                                    console.log("After union");
                                                    attLensesArray[i].areas[ind].setArea(unionVar);
                                                    attLensesArray[i].areas[areaIndex].delete();
                                                    attLensesArray[i].areas[ind].delete();
                                                    attLensesArray[i].areas.splice(areaIndex, 1);
                                                    attLensesArray[i].areas[ind].createLayers();
                                                }
                                            }
                                        }
                                        
                                    }
                                    
                                }
                            }
                        }
                    }
                }
                /*updateOthers: function(){
                    for(var i = attLensesArray.length - 1; i >= 0; i--) {
                        if(attLensesArray[i] === this) {
                            attLensesArray.splice(i, 1);
                        }
                    }
                    var thisVar = this;
                    
                    attLensesArray.forEach(function (lensInGlobalArray,index,array){
                        console.log("AAAAAAAIXO");
                        console.log(lensInGlobalArray);
                        if(lensInGlobalArray.removeIntersection(thisVar)) {
                            console.log(lensInGlobalArray);
                            console.log("CIMAAAAAAAA");
                            
                            var layerofItem = attLenResults.getLayer(lensInGlobalArray.getlID());
                            layerofItem.eachLayer(function (layerHolder) {
                                layerHolder.eachLayer(function (layerContainer) {
                                    layerContainer.eachLayer(function (layer){
                                            if (thisVar.getBound().intersects(layer.getBounds())){
                                            console.log("This layer is inside the bounds");
                                            switch(thisVar.enc) {
                                                case "color":
                                                    layer.setStyle({color: '#FF6347'});
                                                    lensInGlobalArray.updateLayer(layer, layer.feature.properties);
                                                    lensInGlobalArray.intersections.forEach(function(itemInterLens, index, array) {
                                                        if (itemInterLens.areaQuery.getBounds().intersects(layer.getBounds())){
                                                            itemInterLens.updateLayer(layer, layer.feature.properties);
                                                        }
                                                    });
                                                    break;
                                                case "brightness":
                                                    layer.setStyle({color: '#FF6347'});
                                                    lensInGlobalArray.updateLayer(layer, layer.feature.properties);
                                                    lensInGlobalArray.intersections.forEach(function(itemInterLens, index, array) {
                                                        if (itemInterLens.areaQuery.getBounds().intersects(layer.getBounds())){
                                                            itemInterLens.updateLayer(layer, layer.feature.properties);
                                                        }
                                                    });
                                                    break;
                                                case "opacity":
                                                    console.log("Returning Opacity to 1");
                                                    layer.setStyle({opacity:1});
                                                    break;
                                                case "width":
                                                    console.log("Returning Width to 1.5");
                                                    layer.setStyle({"weight": 1.5});
                                                    break;
                                            }
                                        }
                                    });
                                });
                            });

                        }
                    });

                }*/
            };

            lens.setBounds(lens.areaQuery.getBounds());

            /*CALCULATE THE DISTANCE FROM ONE POINT TO ANOTHER IN PIXELS
            var northVar = map.latLngToLayerPoint(lens.areaQuery.getBounds().getNorthWest());
            var southVar = map.latLngToLayerPoint(lens.areaQuery.getBounds().getSouthWest());
            var numOfPixl = northVar.distanceTo(southVar);*/
            var myOutsideCircle = L.divIcon({className: 'outside-Circle', iconSize: [100,100],iconAnchor:[90,90], html: 
                "<input type='button' value='X' class='myDeleteButton' style='z-index: 1000;     position: fixed;margin: -16%;'/>"+
                "<div class='dropdown' style='        margin-left: -9.5%; margin-top: 87.5%;'><button class='dropbtn'><img src='images/attribute.png' style='width: 15px; height: 17px;'></button><div class='dropdown-content'>" + 
                "<button class='dropbtnOpt-length'>Length</button>"+
                "<button class='dropbtnOpt-velocity'>Velocity</button>"+
                "<button class='dropbtnOpt-time'>Time</button>"+
                "<button class='dropbtnOpt-duration'>Duration</button>"+
                "</div></div>" +
                "<div class='dropdown'style='margin-left: 81.5%;margin-top: 83%;'><button class='dropbtn'><img src='images/encoding.png' style='width: 15px; height: 17px;'></button><div class='dropdown-content'>" + 
                "<button class='dropbtnOpt-color'>Color</button>"+
                "<button class='dropbtnOpt-width'>Width</button>"+
                "<button class='dropbtnOpt-brightness'>Brightness</button>"+
                "<button class='dropbtnOpt-opacity'>Opacity</button>"+
                "</div></div>" +
                "<button class='myRadiusButton' style='z-index: 1019; position:fixed;     margin-left: 78.5%; margin-top: -19%;'><img src='images/radius.png' style='z-index: 999;width: 25px;height: 25px;    margin: inherit;margin-left: -3px;margin-top: -4px;'></button>"+
                "<div id='sliderRadius' style='z-index:1018;left:-80px; top:-80px;display:none;'></div>"
                //"<div class='dropdown'style='margin-left: 102.5%; margin-top: 75%;'><button class='dropbtn'><img src='images/encoding.png' style='width: 15px; height: 17px;'></button><div class='dropdown-content'>"
            });
            var outsideCircVar = L.marker(lens.getLngLat(), {icon: myOutsideCircle, pane: 'outtterLensPane'});
            lens.setOutsideCircle(outsideCircVar);
            
            var moved = false;
            lens.outsideCircle.on({
                dbclick:function(e){
                    L.DomEvent.stopPropagation(e);
                },
                click : function(e){
                    L.DomEvent.stopPropagation(e);
                },
                mousedown: function () {
                    
                    map.on('mousemove', function (e) {
                        if(!(moved)){
                            lens.delete();
                            lens.updateOthersV2(true);
                        }
                        map.dragging.disable();
                        moved = true;
                        lens.areaQuery.setLatLng(e.latlng);
                        lens.outsideCircle.setLatLng(e.latlng);
                        lens.lngLat = e.latlng;
                    });
                },
                mouseup: function(){
                    map.removeEventListener('mousemove');
                    if(moved){ 
                        moved = false;   
                        map.dragging.enable();

                        //lens.delete();
                        lens.createAreas();
                        //lens.createLayers();
                        lens.setBounds(lens.areaQuery.getBounds());
                    }
                },
                mouseout:function(){
                    console.log("Bellow is the attLensesArray");
                    console.log(attLensesArray);
                    outterLensesLayer.removeLayer(lens.outsideCircle);
                }
            });
            lens.areaQuery.on({
                dbclick:function(e){
                    L.DomEvent.stopPropagation(e);
                },
                click: function(e){
                    L.DomEvent.stopPropagation(e);
                    outterLensesLayer.addLayer(lens.outsideCircle);
                    $('.myDeleteButton').click(function (e) {
                        L.DomEvent.stopPropagation(e); 
                        outterLensesLayer.removeLayer(lens.outsideCircle);
                        lensesLayer.removeLayer(lens.areaQuery);
                        lens.delete();
                        lens.updateOthersV2(true);
                    });
                    $('.myRadiusButton').click(function (e) {
                        L.DomEvent.stopPropagation(e); 
                        if(document.getElementById("sliderRadius").style.display=='none' && document.getElementById("sliderRadius").style.display=='none'){
                            document.getElementById("sliderRadius").style.display="block";
                            var $sliderRadius = $('#sliderRadius');
                            $sliderRadius.mousedown( function (e){
                                //TODO VELOCITY REMOVING BADLY??
                                L.DomEvent.stopPropagation(e);
                                map.dragging.disable();
                                e.originalEvent.preventDefault();
                            });
                            $(function(){
                                $("#sliderRadius").roundSlider({
                                    sliderType: "min-range",
                                    radius: "130px",
                                    value: lens.getRadius(),
                                    min: 0,
                                    max: 10000,
                                    //lineCap: "round",
                                    width: 5,
                                    editableTooltip: false,
                                    handleSize: "+10",
                                    handleShape: "dot",
                                    drag: function (e) {
                                        L.DomEvent.stopPropagation(e);
                                        lens.setRadius(e.value); 
                                    },
                                    start: function(e) {
                                        lens.delete();
                                        lens.updateOthersV2(true);
                                    },
                                    stop: function (e) {
                                        L.DomEvent.stopPropagation(e);
                                        map.dragging.enable();
                                        lens.createAreas();
                                        //lens.createLayers();
                                        lens.setBounds(lens.areaQuery.getBounds());
                                    }
                                });
                            }); 
                            
                        }
                        else{
                            document.getElementById("sliderRadius").style.display="none";
                        }
                    }); 
                    
                    $('.dropbtnOpt-length').click(function () {
                            //lens.updateOthers();
                            lens.updateLENS(true,"length");
                    });
                    $('.dropbtnOpt-velocity').click(function () {
                            //lens.updateOthers();
                            lens.updateLENS(true,"vel");
                    });
                    $('.dropbtnOpt-time').click(function () {
                            //lens.updateOthers();
                            //lens.att = "time"
                            lens.updateLENS(true,"time");
                    });
                    $('.dropbtnOpt-duration').click(function () {
                            //lens.updateOthers();
                            //lens.att = "duration"
                            lens.updateLENS(true,"duration");
                    });

                    $('.dropbtnOpt-color').click(function () {
                            //lens.updateOthers();
                            //lens.enc = "color"
                            lens.updateLENS(false,"color");
                    });
                    $('.dropbtnOpt-width').click(function () {
                            //lens.updateOthers();
                            //lens.enc = "width"
                            lens.updateLENS(false,"width");
                    });
                    $('.dropbtnOpt-brightness').click(function () {
                            //lens.updateOthers();
                            //lens.enc = "brightness"
                            lens.updateLENS(false,"brightness");
                    });
                    $('.dropbtnOpt-opacity').click(function () {
                            //lens.updateOthers();
                            //lens.enc = "opacity"
                            lens.updateLENS(false,"opacity");
                    });   
 
                }
            }); 
            
            return lens
        }

        function creaAttAreas(areaOfQuery){
            var areaObj = {
                area:areaOfQuery,
                lensArray: [],
                lID:null,
                setArea: function(newValue){

                    //this.area = turf.clone(newValue);
                    this.area = newValue;
                },
                addLens: function (obj){
                    this.lensArray.push(obj);
                },
                removeLens: function (obj){
                    for(var i = this.lensArray.length - 1; i >= 0; i--) {
                        if(this.lensArray[i] === obj) {
                            this.lensArray.splice(i, 1);
                            return true;
                        }
                    }
                    return false;
                },
                setlID : function(value){
                    this.lID = value;
                },
                getlID : function(){
                    return this.lID;
                },
                getLensArray : function(){
                    return this.lensArray;
                },
                createLayers : function(){
                    var attLayer = L.featureGroup({pane: 'attLensPane'}).addTo(attLenResults);
                    var _attLayer = L.featureGroup({pane: 'attLensPane'}).addTo(attLayer);
                    var _attLayer1 = L.featureGroup({pane: 'attLensPane'}).addTo(attLayer);
                    var _attLayer2 = L.featureGroup({pane: 'attLensPane'}).addTo(attLayer);
                    var _attLayer3 = L.featureGroup({pane: 'attLensPane'}).addTo(attLayer);
                    

                        // Create URL
                    var urlString3 = "attQueryNEW/trajectory_lines/"  + JSON.stringify(this.area.geometry);
                    var urlString2 = "attQueryNEW/trajectory_lines1/" + JSON.stringify(this.area.geometry);
                    var urlString1 = "attQueryNEW/trajectory_lines2/" + JSON.stringify(this.area.geometry);
                    var urlString  = "attQueryNEW/trajectory_lines3/" + JSON.stringify(this.area.geometry);
                    
                    this.setlID(attLayer._leaflet_id);
                    var thisVar = this;
                    var newData = $.ajax({
                        url: urlString,
                        type: 'GET',
                        dataType:'json',
                        success: console.log("Data successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    }) 
                    $.when(newData).done(function() {
                        
                        if(newData.responseJSON.features != null){
                            newData.responseJSON.features.forEach(function(item, index, array) {
                                var tracksToDraw = L.geoJson(item,firstStyleATT);
                                thisVar.getLensArray().forEach(function(lens,index,array){
                                    console.log(lens);
                                    lens.updateLayer(tracksToDraw,item.properties);
                                });
                                tracksToDraw.addTo(_attLayer);
                            });
                            
                        }
                    }); 
                    var newData1 = $.ajax({
                        url: urlString1,
                        type: 'GET',
                        dataType:'json',
                        success: console.log("Data successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    }) 
                    $.when(newData1).done(function() {
                        if(newData1.responseJSON.features != null){
                            newData1.responseJSON.features.forEach(function(item, index, array) {
                                var tracksToDraw = L.geoJson(item,firstStyleATT);
                                thisVar.getLensArray().forEach(function(lens,index,array){
                                    lens.updateLayer(tracksToDraw,item.properties);
                                });
                                tracksToDraw.addTo(_attLayer1);
                            });
                            
                        }
                    });
                    var newData2 = $.ajax({
                        url: urlString2,
                        type: 'GET',
                        dataType:'json',
                        success: console.log("Data successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    }) 
                    $.when(newData2).done(function() {
                        if(newData2.responseJSON.features != null){
                            newData2.responseJSON.features.forEach(function(item, index, array) {
                                var tracksToDraw = L.geoJson(item,firstStyleATT);
                                thisVar.getLensArray().forEach(function(lens,index,array){
                                    lens.updateLayer(tracksToDraw,item.properties); 
                                });
                                tracksToDraw.addTo(_attLayer2);
                            });
                            
                        }
                    });
                    var newData3 = $.ajax({
                        url: urlString3,
                        type: 'GET',
                        dataType:'json',
                        success: console.log("Data successfully loaded!"),
                        error: function (xhr) {
                            alert(xhr.statusText)
                        }
                        
                    }) 
                    $.when(newData3).done(function() {
                        if(newData3.responseJSON.features != null){
                            newData3.responseJSON.features.forEach(function(item, index, array) {
                                var tracksToDraw = L.geoJson(item,firstStyleATT);
                                thisVar.getLensArray().forEach(function(lens,index,array){
                                    lens.updateLayer(tracksToDraw,item.properties); 
                                });
                                tracksToDraw.addTo(_attLayer3);
                            });
                            
                            
                        }
                    });
                    
                },
                updateLayer : function(){
                    var thisVar = this;
                    //if(this.getlID() != null){
                    attLenResults.getLayer(this.getlID()).eachLayer(function(oneOfFourATTLayers){
                        oneOfFourATTLayers.eachLayer(function(oneOfSmallLayerContainer){
                            oneOfSmallLayerContainer.eachLayer(function(oneOfSmallLayers) {
                                oneOfSmallLayers.setStyle(firstStyleATT);
                                thisVar.getLensArray().forEach(function(lens,index,array){
                                    lens.updateLayer(oneOfSmallLayers,oneOfSmallLayers.feature.properties);
                                });
                            });
                        });
                    });
                    /*}
                    else{
                        console.log("This area has no lID");
                    }*/
                },
                delete : function(){
                    attLenResults.removeLayer(this.getlID());
                    this.setlID(null);
                }


            };
            return areaObj;
        }

        /////
        /////
        /////

        /////
        /////  Functions per attribute
        /////

        function velocityAtt(layer, properties, encoding){
             // code block
            var velAtt = properties.f5;
            switch(encoding){
                case "color":
                    /*layer.setStyle({opacity:0});
                    var pointsArray = layer.feature.geometry.coordinates;
                    
                    var velArray =  layer.feature.properties.f5;

                    var finalArray = [];
                    
                    for(var i = 0;i < velArray.length;i++ ){
                        finalArray.push([pointsArray[i][1],pointsArray[i][0],velArray[i]]);    
                    }
                    console.log(pointsArray);
                    var hotlineLayer = L.hotline(finalArray, {
                        min: 0,
                        max: 60,
                        palette: {
                            0.0: '#ff0000',
                            0.3: '#ffff00',
                            1.0: '#008800'
                        },
                        weight: 1,
                        outlineColor: '#FFFFFF',
                        outlineWidth: 0
                    });
                    
                    delete finalArray;
                    delete pointsArray;
                    delete velArray;
                    

                    console.log(hotlineLayer);
                    hotlineLayer.addTo(layerToPaint);
                    */

                    if(velAtt <= 10)          {
                            layer.setStyle({color :'#ff3232'});
                    }
                    else if(velAtt <= 20)     {
                            layer.setStyle({color :'#ff6928'});
                    }
                    else if(velAtt <= 30)    {
                            layer.setStyle({color :'#fcb42f'});
                    }
                    else if(velAtt <= 40)    {
                            layer.setStyle({color :'#fcce28'});
                    }
                    else if(velAtt <= 50)    {
                            layer.setStyle({color :'#fcd62f'});
                    }
                    else if(velAtt <= 60)    {
                            layer.setStyle({color :'#fcf528'});
                    }
                    else if(velAtt <=  70)   {
                            layer.setStyle({color :'#d5fc28'});
                    }
                    else if(velAtt <=  80)   {
                            layer.setStyle({color :'#b9fc28'});
                    }
                    else if(velAtt <=  90)   {
                            layer.setStyle({color :'#80fc28'});
                    }
                    else    layer.setStyle({color :'#00ff00'});
                    break;
                    
                    break;
                case "brightness":
                    if(velAtt <= 10)          {
                        var colr = ColorLuminance(layer.options.color,-0.95);
                        layer.setStyle({"color":colr});
                    }
                    else if(velAtt <= 20)     {
                        var colr = ColorLuminance(layer.options.color,-0.9);
                        layer.setStyle({"color":colr});
                    }
                    else if(velAtt <= 30)    {
                        var colr = ColorLuminance(layer.options.color,-0.8);
                        layer.setStyle({"color":colr});
                    }
                    else if(velAtt <= 40)    {
                        var colr = ColorLuminance(layer.options.color,-0.65);
                        layer.setStyle({"color":colr});
                    }
                    else if(velAtt <= 50)    {
                        var colr = ColorLuminance(layer.options.color,-0.5);
                        layer.setStyle({"color":colr});
                    }
                    else if(velAtt <= 60)    {
                        var colr = ColorLuminance(layer.options.color,-0.35);
                        layer.setStyle({"color":colr});
                    }
                    else if(velAtt <=  70)   {
                        var colr = ColorLuminance(layer.options.color,-0.2);
                        layer.setStyle({"color":colr});
                    }
                    else if(velAtt <=  80)   {
                        var colr = ColorLuminance(layer.options.color,-0.1);
                        layer.setStyle({"color":colr});
                    }
                    else if(velAtt <=  90)   {
                        var colr = ColorLuminance(layer.options.color,-0.05);
                        layer.setStyle({"color":colr});
                    }
                    else                    console.log("brightness already at 1")
                    break;
                case "opacity":
                
                    break;
                case "width":
                    if(velAtt <= 10)        layer.setStyle({"weight": 1});
                    else if(velAtt <= 20)   layer.setStyle({"weight": 1.5});
                    else if(velAtt <= 30)   layer.setStyle({"weight": 2});
                    else if(velAtt <= 40)   layer.setStyle({"weight": 2.5});
                    else if(velAtt <= 50)   layer.setStyle({"weight": 3});
                    else if(velAtt <= 60)   layer.setStyle({"weight": 3.5});
                    else if(velAtt <= 70)   layer.setStyle({"weight": 4});
                    else if(velAtt <= 80)   layer.setStyle({"weight": 4.5});
                    else if(velAtt <= 90)   layer.setStyle({"weight": 5});
                    else                    layer.setStyle({"weight": 6});
                    break;
            }
        }

        function lengthAtt(layer,properties, encoding){
             // code block
            var len = properties.f1;
            switch(encoding){
                case "color":
                    if(len <= 250)          layer.setStyle({color :'#ff3232'}) 
                    else if(len <= 500)     layer.setStyle({color :'#ff6928'})
                    else if(len <= 1000)    layer.setStyle({color :'#fcb42f'}) 
                    else if(len <= 2000)    layer.setStyle({color :'#fcce28'})
                    else if(len <= 4000)    layer.setStyle({color :'#fcd62f'}) 
                    else if(len <= 8000)    layer.setStyle({color :'#fcf528'}) 
                    else if(len <= 16000)   layer.setStyle({color :'#d5fc28'})
                    else if(len <= 32000)   layer.setStyle({color :'#b9fc28'})
                    else if (len <= 128000) layer.setStyle({color :'#80fc28'})
                    else                    layer.setStyle({color :'#00ff00'})
                    break;
                case "brightness":
                    if(len <= 250)          {
                        var colr = ColorLuminance(layer.options.color,-0.95);
                        layer.setStyle({"color":colr});
                    }
                    else if(len <= 500)     {
                        var colr = ColorLuminance(layer.options.color,-0.9);
                        layer.setStyle({"color":colr});
                    }
                    else if(len <= 1000)    {
                        var colr = ColorLuminance(layer.options.color,-0.8);
                        layer.setStyle({"color":colr});
                    }
                    else if(len <= 2000)    {
                        var colr = ColorLuminance(layer.options.color,-0.65);
                        layer.setStyle({"color":colr});
                    }
                    else if(len <= 4000)    {
                        var colr = ColorLuminance(layer.options.color,-0.5);
                        layer.setStyle({"color":colr});
                    }
                    else if(len <= 8000)    {
                        var colr = ColorLuminance(layer.options.color,-0.35);
                        layer.setStyle({"color":colr});
                    }
                    else if(len <=  16000)   {
                        var colr = ColorLuminance(layer.options.color,-0.2);
                        layer.setStyle({"color":colr});
                    }
                    else if(len <=  32000)   {
                        var colr = ColorLuminance(layer.options.color,-0.1);
                        layer.setStyle({"color":colr});
                    }
                    else if(len <=  128000)   {
                        var colr = ColorLuminance(layer.options.color,-0.05);
                        layer.setStyle({"color":colr});
                    }
                    else                    console.log("brightness already at 1")
                    break;
                case "opacity":
                    if(len <= 250)          layer.setStyle({opacity:0.05});
                    else if(len <= 500)     layer.setStyle({opacity:0.10});
                    else if(len <= 1000)    layer.setStyle({opacity:0.20}); 
                    else if(len <= 2000)    layer.setStyle({opacity:0.35});
                    else if(len <= 4000)    layer.setStyle({opacity:0.5});
                    else if(len <= 8000)    layer.setStyle({opacity:0.65});
                    else if(len <= 16000)   layer.setStyle({opacity:0.8});
                    else if(len <= 32000)   layer.setStyle({opacity:0.9});
                    else if(len <= 128000)  layer.setStyle({opacity:0.95});
                    else                    console.log("Opcacity already at 1")
                    break;
                case "width":
                if(len <= 250)              layer.setStyle({"weight": 0.1});
                    else if(len <= 500)     layer.setStyle({"weight": 0.5});
                    else if(len <= 1000)    layer.setStyle({"weight": 1});
                    else if(len <= 2000)    layer.setStyle({"weight": 1.5});
                    else if(len <= 4000)    layer.setStyle({"weight": 2});
                    else if(len <= 8000)    layer.setStyle({"weight": 2.5});
                    else if(len <= 16000)   layer.setStyle({"weight": 3.5});
                    else if(len <= 32000)   layer.setStyle({"weight": 5});
                    else if(len <= 128000)  layer.setStyle({"weight": 6.5});
                    else                    layer.setStyle({"weight": 8});
                    break;
            }
        }
        
        function durationAtt(layer, properties, encoding){
             // code block
            var dur = properties.f2;
            switch(encoding){
                case "color":
                    if(dur <= "00:01:00")           layer.setStyle({color :'#FFF8DC'}) 
                    else if(dur <= "00:02:00")      layer.setStyle({color :'#FFE4C4'}) 
                    else if(dur <= "00:05:00")      layer.setStyle({color :'#F5DEB3'})
                    else if(dur <= "00:010:00")     layer.setStyle({color :'#DAA520'}) 
                    else if(dur <=  "00:30:00")     layer.setStyle({color :'#D2691E'}) 
                    else                            layer.setStyle({color :'#A52A2A'}) 
                    break;
                case "brightness":
                    if(dur <= "00:01:00")          {
                        var colr = ColorLuminance(layer.options.color,-0.95);
                        layer.setStyle({"color":colr});
                    }
                    else if(dur <= "00:02:00")     {
                        var colr = ColorLuminance(layer.options.color,-0.9);
                        layer.setStyle({"color":colr});
                    }
                    else if(dur <= "00:05:00")    {
                        var colr = ColorLuminance(layer.options.color,-0.8);
                        layer.setStyle({"color":colr});
                    }
                    else if(dur <= "00:10:00")    {
                        var colr = ColorLuminance(layer.options.color,-0.5);
                        layer.setStyle({"color":colr});
                    }
                    else if(dur <=  "00:30:00")   {
                        var colr = ColorLuminance(layer.options.color,-0.2);
                        layer.setStyle({"color":colr});
                    }
                    else                    console.log("brightness already at 1")
                    break;
                case "opacity":
                    if(dur <= "00:01:00")           layer.setStyle({opacity:0.05});
                    else if(dur <= "00:02:00")      layer.setStyle({opacity:0.15}); 
                    else if(dur <= "00:05:00")      layer.setStyle({opacity:0.3});
                    else if(dur <= "00:10:00")      layer.setStyle({opacity:0.55});
                    else if(dur <=  "00:30:00")     layer.setStyle({opacity:0.8});
                    else                            console.log("Opcacity already at 1")
                    break;
                case "width":
                    if(dur <= "00:01:00")           layer.setStyle({"weight": 0.2});
                    else if(dur <= "00:02:00")      layer.setStyle({"weight": 0.8});
                    else if(dur <= "00:05:00")      layer.setStyle({"weight": 1.5});
                    else if(dur <= "00:10:00")      layer.setStyle({"weight": 2.5});
                    else if(dur <=  "00:30:00")     layer.setStyle({"weight": 3.5});
                    else                            layer.setStyle({"weight": 5});
                    break;
            }
        }

         function timeAtt(layer, properties, encoding){
            // 2008-02-02 13:30:44
            // 2008-02-08 17:39:18
            // code block
            var tim = properties.f3;
            switch(encoding){
                case "color":
                    if(tim <= "2008-02-03 13:30:44")            layer.setStyle({color :'#FFF8DC'}) 
                    else if(tim <= "2008-02-04 13:30:44")       layer.setStyle({color :'#FFE4C4'}) 
                    else if(tim <= "2008-02-05 13:30:44")       layer.setStyle({color :'#F5DEB3'})
                    else if(tim <= "2008-02-06 13:30:44")       layer.setStyle({color :'#DAA520'}) 
                    else if(tim <=  "2008-02-07 13:30:44")      layer.setStyle({color :'#D2691E'}) 
                    else                                        layer.setStyle({color :'#A52A2A'}) 
                    break;
                case "brightness":
                    if(tim <= "2008-02-03 13:30:44")          {
                        var colr = ColorLuminance(layer.options.color,-0.95);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= "2008-02-04 13:30:44")     {
                        var colr = ColorLuminance(layer.options.color,-0.9);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= "2008-02-05 13:30:44")    {
                        var colr = ColorLuminance(layer.options.color,-0.8);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= "2008-02-06 13:30:44")    {
                        var colr = ColorLuminance(layer.options.color,-0.5);
                        layer.setStyle({"color":colr});
                    }
                    else if(tim <= "2008-02-07 13:30:44")   {
                        var colr = ColorLuminance(layer.options.color,-0.2);
                        layer.setStyle({"color":colr});
                    }
                    else                    console.log("brightness already at 1")
                    break;
                case "opacity":
                    if(tim <= "2008-02-03 13:30:44")            layer.setStyle({opacity:0.05});
                    else if(tim <= "2008-02-04 13:30:44")       layer.setStyle({opacity:0.15}); 
                    else if(tim <= "2008-02-05 13:30:44")       layer.setStyle({opacity:0.3});
                    else if(tim <= "2008-02-06 13:30:44")       layer.setStyle({opacity:0.55});
                    else if(tim <= "2008-02-07 13:30:44")       layer.setStyle({opacity:0.8});
                    else                                        console.log("Opcacity already at 1")
                    break;
                case "width":
                    if(tim <= "2008-02-03 13:30:44")            layer.setStyle({"weight": 0.2});
                    else if(tim <= "2008-02-04 13:30:44")       layer.setStyle({"weight": 0.8});
                    else if(tim <= "2008-02-05 13:30:44")       layer.setStyle({"weight": 1.5});
                    else if(tim <= "2008-02-06 13:30:44")       layer.setStyle({"weight": 2.5});
                    else if(tim <= "2008-02-07 13:30:44")       layer.setStyle({"weight": 3.5});
                    else                                        layer.setStyle({"weight": 5});
                    break;
            }
        }
        /////
        ///// Area calculation
        /////

        function recursiveArea(thisVar, indexI, j){ 
            console.log([indexI, j]);
            console.log("Look alive");
            if(indexI >= 0){

                console.log("Before intersection and difference");
                //var optionsTruncate = {coordinates: 2};
                var urlIntersectDifference = "interdif/"  + JSON.stringify(thisVar.areas[0].area) + "/" +  JSON.stringify(thisVar.intersections[indexI].areas[j].area);
                console.log(thisVar.areas[0].area);
                //var thisVar = this;
                //var thisAreasZero = this.areas[0];
                //var oneOfAreasFromIntersection = this.intersections[indexI].areas[j];
                var interDifPromise = intersectionServer(urlIntersectDifference);
                interDifPromise.then(function(responseInter) {
                    console.log("After intersection and difference");
                    //var urlDifference = "difference/"  + JSON.stringify(thisVar.areas[0].area) + "/" +  JSON.stringify(thisVar.intersections[indexI].areas[j].area);
                    
                    if(responseInter[0] != null){
                        
                        //var differencePromise =  differenceServer(urlDifference);
                        //differencePromise.then(function(responseDiff) {
                        //var difference = turf.difference(turf.truncate(this.areas[0].area, optionsTruncate),turf.truncate(this.intersections[i].areas[j].area, optionsTruncate));
                        console.log("Intersection not null");
                        //var difference1 = turf.cleanCoords(difference)
                        //var intersection1 = turf.cleanCoords(intersection)
                        //console.log(thisAreasZero);
                        //console.log(responseDiff);
                        //thisAreasZero.setArea(responseDiff);
                        thisVar.areas[0].setArea(responseInter[1]);

                        var lensArrOfArea = thisVar.intersections[indexI].areas[j].getLensArray();
                        var newArea = creaAttAreas(responseInter[0]);
                        for(k = 0; k < lensArrOfArea.length;k++){
                            newArea.addLens(lensArrOfArea[k]);
                        }
                        newArea.addLens(thisVar);
                        thisVar.addArea(newArea);
                        var color2;
                        var r = Math.min(Math.max(Math.floor(Math.random() * 255), 55), 200);
                        var g = Math.min(Math.max(Math.floor(Math.random() * 255), 75), 255);
                        var b = Math.min(Math.max(Math.floor(Math.random() * 255), 100), 225);
                        
                        color2= "rgb("+r+" ,"+g+","+ b+")"; 
                        var randomColor = Math.floor(Math.random()*16777215).toString(16);
                        var cona = L.geoJson(responseInter[0], {
                            color: '#ff3636',
                            fillColor: color2,
                            fillOpacity:1
                        });
                        cona.addTo(areasLayer);
                        //})
                        
                        j++;
                        if(j==thisVar.intersections[indexI].areas.length){
                            return recursiveArea(thisVar,indexI - 1, 0);
                        }
                        else{
                            return recursiveArea(thisVar,indexI, j);
                        }
                    }
                    else{
                        console.log(responseInter);
                        console.log("There was no intersection");
                        
                        j++;
                        if(j==thisVar.intersections[indexI].areas.length){
                            return recursiveArea(thisVar,indexI - 1, 0);
                        }
                        else{
                            return recursiveArea(thisVar,indexI, j);
                        }
                    }
                }).catch(function(jqXHR) {
                    if (jqXHR instanceof ReferenceError) {
                        console.log('wow!');
                    }
                });
            } 
            else{
                return thisVar.createLayers();
            }     
        }
                

        /////
        /////
        /////

        /////
        ///// support
        /////

        function Unix_timestamp(t){
            var dt = new Date(t);
            var stringDate = dt.toUTCString();
            /*var year = dt.getFullYear();
            var month = dt.getMonth();
            var day = dt.getDay();
            var hour = dt.getHours();
            var minute = dt.getMinutes();
            var seconds = dt.getSeconds();*/

            return stringDate;
        }

        function isEqual(a, b) { 
            // if length is not equal 
            if(a.length!=b.length) 
                return false; 
            else{ 
            // comapring each element of array 
                for(var i=0;i<a.length;i++){
                    if(a[i]!=b[i]) return false; 
                } 
                return true; 
            } 
        } 

        function ColorLuminance(hex, lum) {

            // validate hex string
            hex = String(hex).replace(/[^0-9a-f]/gi, '');
            if (hex.length < 6) {
                hex = hex[0]+hex[0]+hex[1]+hex[1]+hex[2]+hex[2];
            }
            lum = lum || 0;

            // convert to decimal and change luminosity
            var rgb = "#", c, i;
            for (i = 0; i < 3; i++) {
                c = parseInt(hex.substr(i*2,2), 16);
                c = Math.round(Math.min(Math.max(0, c + (c * lum)), 255)).toString(16);
                rgb += ("00"+c).substr(c.length);
            }

            return rgb;
        }

        function intersectionServer(urlIntersect){
            return new Promise((resolve, reject) => {
                $.ajax({
                    url: urlIntersect,
                    type: 'GET',
                    dataType:'json',
                    success: function(data){
                        resolve(data)
                    },
                    error: function(jqXHR, textStatus, errorThrown) {
                        alert('An error occurred... Look at the console (F12 or Ctrl+Shift+I, Console tab) for more information!');

                        $('#result').html('<p>status code: '+jqXHR.status+'</p><p>errorThrown: ' + errorThrown + '</p><p>jqXHR.responseText:</p><div>'+jqXHR.responseText + '</div>');
                        console.log('jqXHR:');
                        console.log(jqXHR);
                        console.log('textStatus:');
                        console.log(textStatus);
                        console.log('errorThrown:');
                        console.log(errorThrown);
                    }
                }) 
            });
        }

        function differenceServer(urlDifference){
            return new Promise((resolve, reject) => {
                $.ajax({
                    url: urlDifference,
                    type: 'GET',
                    dataType:'json',
                    success: function(data){
                        resolve(data)
                    },
                    error: function (req, status, err) {
                        reject(err);
                    } 
                }) 
            });
        }

        


